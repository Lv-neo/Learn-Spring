{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"themes/landscape/source/css/style.styl","path":"css/style.styl","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/blank.gif","path":"fancybox/blank.gif","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/fancybox_loading.gif","path":"fancybox/fancybox_loading.gif","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/fancybox_loading@2x.gif","path":"fancybox/fancybox_loading@2x.gif","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/fancybox_overlay.png","path":"fancybox/fancybox_overlay.png","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/fancybox_sprite.png","path":"fancybox/fancybox_sprite.png","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/fancybox_sprite@2x.png","path":"fancybox/fancybox_sprite@2x.png","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.css","path":"fancybox/jquery.fancybox.css","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.js","path":"fancybox/jquery.fancybox.js","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.pack.js","path":"fancybox/jquery.fancybox.pack.js","modified":0,"renderable":1},{"_id":"themes/landscape/source/js/script.js","path":"js/script.js","modified":0,"renderable":1},{"_id":"themes/landscape/source/css/fonts/FontAwesome.otf","path":"css/fonts/FontAwesome.otf","modified":0,"renderable":1},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.eot","path":"css/fonts/fontawesome-webfont.eot","modified":0,"renderable":1},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.woff","path":"css/fonts/fontawesome-webfont.woff","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/fancybox_buttons.png","path":"fancybox/helpers/fancybox_buttons.png","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-buttons.css","path":"fancybox/helpers/jquery.fancybox-buttons.css","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-buttons.js","path":"fancybox/helpers/jquery.fancybox-buttons.js","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-media.js","path":"fancybox/helpers/jquery.fancybox-media.js","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-thumbs.css","path":"fancybox/helpers/jquery.fancybox-thumbs.css","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-thumbs.js","path":"fancybox/helpers/jquery.fancybox-thumbs.js","modified":0,"renderable":1},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.ttf","path":"css/fonts/fontawesome-webfont.ttf","modified":0,"renderable":1},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.svg","path":"css/fonts/fontawesome-webfont.svg","modified":0,"renderable":1},{"_id":"themes/landscape/source/css/images/banner.jpg","path":"css/images/banner.jpg","modified":0,"renderable":1}],"Cache":[{"_id":"themes/landscape/.gitignore","hash":"58d26d4b5f2f94c2d02a4e4a448088e4a2527c77","modified":1542729697894},{"_id":"themes/landscape/Gruntfile.js","hash":"71adaeaac1f3cc56e36c49d549b8d8a72235c9b9","modified":1542729697894},{"_id":"themes/landscape/LICENSE","hash":"c480fce396b23997ee23cc535518ffaaf7f458f8","modified":1542729697894},{"_id":"themes/landscape/_config.yml","hash":"79ac6b9ed6a4de5a21ea53fc3f5a3de92e2475ff","modified":1542729697894},{"_id":"themes/landscape/README.md","hash":"37fae88639ef60d63bd0de22314d7cc4c5d94b07","modified":1542729697894},{"_id":"themes/landscape/package.json","hash":"544f21a0b2c7034998b36ae94dba6e3e0f39f228","modified":1542729697902},{"_id":"source/.DS_Store","hash":"4e40b9edc306851cddffad5f40f926f4c9396ca5","modified":1542729854360},{"_id":"themes/landscape/languages/de.yml","hash":"3ebf0775abbee928c8d7bda943c191d166ded0d3","modified":1542729697894},{"_id":"themes/landscape/languages/default.yml","hash":"3083f319b352d21d80fc5e20113ddf27889c9d11","modified":1542729697894},{"_id":"themes/landscape/languages/es.yml","hash":"76edb1171b86532ef12cfd15f5f2c1ac3949f061","modified":1542729697895},{"_id":"themes/landscape/languages/fr.yml","hash":"415e1c580ced8e4ce20b3b0aeedc3610341c76fb","modified":1542729697895},{"_id":"themes/landscape/languages/ja.yml","hash":"a73e1b9c80fd6e930e2628b393bfe3fb716a21a9","modified":1542729697895},{"_id":"themes/landscape/languages/ko.yml","hash":"881d6a0a101706e0452af81c580218e0bfddd9cf","modified":1542729697895},{"_id":"themes/landscape/languages/nl.yml","hash":"12ed59faba1fc4e8cdd1d42ab55ef518dde8039c","modified":1542729697895},{"_id":"themes/landscape/languages/no.yml","hash":"965a171e70347215ec726952e63f5b47930931ef","modified":1542729697895},{"_id":"themes/landscape/languages/pt.yml","hash":"57d07b75d434fbfc33b0ddb543021cb5f53318a8","modified":1542729697895},{"_id":"themes/landscape/languages/ru.yml","hash":"4fda301bbd8b39f2c714e2c934eccc4b27c0a2b0","modified":1542729697895},{"_id":"themes/landscape/languages/zh-CN.yml","hash":"ca40697097ab0b3672a80b455d3f4081292d1eed","modified":1542729697896},{"_id":"themes/landscape/languages/zh-TW.yml","hash":"53ce3000c5f767759c7d2c4efcaa9049788599c3","modified":1542729697896},{"_id":"themes/landscape/layout/archive.ejs","hash":"2703b07cc8ac64ae46d1d263f4653013c7e1666b","modified":1542729697901},{"_id":"themes/landscape/layout/category.ejs","hash":"765426a9c8236828dc34759e604cc2c52292835a","modified":1542729697901},{"_id":"themes/landscape/layout/index.ejs","hash":"aa1b4456907bdb43e629be3931547e2d29ac58c8","modified":1542729697901},{"_id":"themes/landscape/layout/layout.ejs","hash":"f155824ca6130080bb057fa3e868a743c69c4cf5","modified":1542729697901},{"_id":"themes/landscape/layout/page.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1542729697901},{"_id":"themes/landscape/layout/post.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1542729697901},{"_id":"themes/landscape/layout/tag.ejs","hash":"eaa7b4ccb2ca7befb90142e4e68995fb1ea68b2e","modified":1542729697901},{"_id":"themes/landscape/scripts/fancybox.js","hash":"aa411cd072399df1ddc8e2181a3204678a5177d9","modified":1542729697902},{"_id":"source/_posts/hibernate/active_transaction.md","hash":"2349ca5222cc106d7ed9d8ffb899986735b53034","modified":1542726248184},{"_id":"source/_posts/hibernate/current_thread.md","hash":"a2e6c364d70251e8e80c285e447c0b26e293d1ca","modified":1542725726974},{"_id":"source/_posts/hibernate/getCurrentSession.md","hash":"425dea8759daec4db2100c708a7b28c12020d1e8","modified":1542726250119},{"_id":"source/_posts/hibernate/hql.md","hash":"20e4da0c9dcf22c83e5b0dd396ccbf988e3d38ec","modified":1542725726975},{"_id":"source/_posts/hibernate/maven.md","hash":"e5b8855149432616684819dfb8ea2dd9102fff57","modified":1542726279263},{"_id":"source/_posts/hibernate/sequence.md","hash":"9be7f88281f70360161989c86814283e05fcc0e9","modified":1542725726975},{"_id":"source/_posts/hibernate/serializable.md","hash":"cb7c96ac5c5353f0812c89eca7d0f213ef47cd4e","modified":1542726249541},{"_id":"source/_posts/hibernate/session.md","hash":"37ae7937b4654db756a48241e82da76bab1344ca","modified":1542726206270},{"_id":"source/_posts/spring/ApplicationContext.md","hash":"a0b2aa57d27c6e096ff8151c7e2db5be41f3f5d7","modified":1542725726983},{"_id":"source/_posts/spring/aop.md","hash":"8bb24bb3a2be0be5f8bac892bcb4c95ddc36ae67","modified":1542725804105},{"_id":"source/_posts/spring/build-spring.md","hash":"72caf5c0135c9904db8528d0d2ce19cfd065493f","modified":1542725813239},{"_id":"source/_posts/spring/ioc_di.md","hash":"82b90ebc269c4cbf822d6dbaef282544efd5744b","modified":1542725840314},{"_id":"source/_posts/spring/.DS_Store","hash":"b9d8adde24eca4081750f98c561d20923705563a","modified":1542725726982},{"_id":"source/_posts/spring-boot/aop.md","hash":"a93bcf0deef7616fea2c5144fe8428680f61fe32","modified":1542726104141},{"_id":"source/_posts/spring-boot/.DS_Store","hash":"39628c3dd057b7016a8d67e703594164626852fc","modified":1542725726976},{"_id":"source/_posts/spring-boot/starter.md","hash":"98827f68c89e8a3a9f2ac6b07e2c14422011f144","modified":1542726160346},{"_id":"themes/landscape/layout/_widget/archive.ejs","hash":"beb4a86fcc82a9bdda9289b59db5a1988918bec3","modified":1542729697899},{"_id":"themes/landscape/layout/_widget/category.ejs","hash":"dd1e5af3c6af3f5d6c85dfd5ca1766faed6a0b05","modified":1542729697900},{"_id":"themes/landscape/layout/_widget/recent_posts.ejs","hash":"0d4f064733f8b9e45c0ce131fe4a689d570c883a","modified":1542729697900},{"_id":"themes/landscape/layout/_widget/tag.ejs","hash":"2de380865df9ab5f577f7d3bcadf44261eb5faae","modified":1542729697900},{"_id":"themes/landscape/layout/_widget/tagcloud.ejs","hash":"b4a2079101643f63993dcdb32925c9b071763b46","modified":1542729697900},{"_id":"themes/landscape/layout/_partial/after-footer.ejs","hash":"d0d753d39038284d52b10e5075979cc97db9cd20","modified":1542729697896},{"_id":"themes/landscape/layout/_partial/archive-post.ejs","hash":"c7a71425a946d05414c069ec91811b5c09a92c47","modified":1542729697896},{"_id":"themes/landscape/layout/_partial/archive.ejs","hash":"950ddd91db8718153b329b96dc14439ab8463ba5","modified":1542729697896},{"_id":"themes/landscape/layout/_partial/article.ejs","hash":"c4c835615d96a950d51fa2c3b5d64d0596534fed","modified":1542729697896},{"_id":"themes/landscape/layout/_partial/footer.ejs","hash":"93518893cf91287e797ebac543c560e2a63b8d0e","modified":1542729697896},{"_id":"themes/landscape/layout/_partial/gauges-analytics.ejs","hash":"aad6312ac197d6c5aaf2104ac863d7eba46b772a","modified":1542729697896},{"_id":"themes/landscape/layout/_partial/google-analytics.ejs","hash":"f921e7f9223d7c95165e0f835f353b2938e40c45","modified":1542729697897},{"_id":"themes/landscape/layout/_partial/head.ejs","hash":"5abf77aec957d9445fc71a8310252f0013c84578","modified":1542729697897},{"_id":"themes/landscape/layout/_partial/header.ejs","hash":"7e749050be126eadbc42decfbea75124ae430413","modified":1542729697897},{"_id":"themes/landscape/layout/_partial/mobile-nav.ejs","hash":"e952a532dfc583930a666b9d4479c32d4a84b44e","modified":1542729697897},{"_id":"themes/landscape/layout/_partial/sidebar.ejs","hash":"930da35cc2d447a92e5ee8f835735e6fd2232469","modified":1542729697899},{"_id":"themes/landscape/source/css/_extend.styl","hash":"222fbe6d222531d61c1ef0f868c90f747b1c2ced","modified":1542729697902},{"_id":"themes/landscape/source/css/_variables.styl","hash":"628e307579ea46b5928424313993f17b8d729e92","modified":1542729697904},{"_id":"themes/landscape/source/css/style.styl","hash":"a70d9c44dac348d742702f6ba87e5bb3084d65db","modified":1542729697908},{"_id":"themes/landscape/source/fancybox/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1542729697909},{"_id":"themes/landscape/source/fancybox/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1542729697909},{"_id":"themes/landscape/source/fancybox/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1542729697909},{"_id":"themes/landscape/source/fancybox/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1542729697909},{"_id":"themes/landscape/source/fancybox/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1542729697909},{"_id":"themes/landscape/source/fancybox/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1542729697910},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.css","hash":"aaa582fb9eb4b7092dc69fcb2d5b1c20cca58ab6","modified":1542729697911},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.js","hash":"d08b03a42d5c4ba456ef8ba33116fdbb7a9cabed","modified":1542729697911},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.pack.js","hash":"9e0d51ca1dbe66f6c0c7aefd552dc8122e694a6e","modified":1542729697912},{"_id":"themes/landscape/source/js/script.js","hash":"2876e0b19ce557fca38d7c6f49ca55922ab666a1","modified":1542729697912},{"_id":"source/_posts/spring-boot/properties.md","hash":"be36ebb9baf5c6fcccafd3c9dfec65eca8db6561","modified":1542725726980},{"_id":"source/_posts/spring/annotate/README.md","hash":"c52578e9bcd9ea3cfac7e82a3de59ea177e57f66","modified":1542726004488},{"_id":"source/_posts/spring/annotate/autowired.md","hash":"4f51c193e8d62b118645b12028876e1c33655605","modified":1542727383020},{"_id":"source/_posts/spring/img/.DS_Store","hash":"e986eaae2f9fdf886e15447ba166cbafb7c0b5a7","modified":1542725726984},{"_id":"source/_posts/spring/mvc/aop.md","hash":"864707af683e4b818fca203089310da99b45ef4c","modified":1542727585018},{"_id":"source/_posts/spring/mvc/exceptionHandler.md","hash":"4b2a052ac5eb3432d656983d1437faff33f32c0e","modified":1542725879162},{"_id":"source/_posts/spring/mvc/log4j2.md","hash":"f6729905b04796807c64299d85a76de13caa04b6","modified":1542725895555},{"_id":"source/_posts/spring/mvc/resultful.md","hash":"251df9a952fcd1c85f55fda84771a4feccf4eccc","modified":1542725934063},{"_id":"source/_posts/spring/mvc/web_xml.md","hash":"cbde29a2583bd796df9222a248b548a9f50de98c","modified":1542727522865},{"_id":"source/_posts/spring/img/SpringMVCExceptionResolver.png","hash":"3ac2a3afb1a5b80eab4adcb7784e48d62f4f148d","modified":1542725726985},{"_id":"source/_posts/spring-boot/exception/errorController.md","hash":"93afc1ee439580d54c6908fc9a5d458ca558fb4f","modified":1542726183525},{"_id":"source/_posts/spring-boot/exception/exception.md","hash":"f63fea7d4ad4eb6840b92d3967b88aece5929f47","modified":1542726187149},{"_id":"source/_posts/spring-boot/exception/whitelabel.md","hash":"3bd261b85bf9fb7943849d4dd7976e29b9917faf","modified":1542725726977},{"_id":"source/_posts/spring-boot/file/loadFile.md","hash":"a5f1bc26604a78942de6f07a8b9640b04a98c952","modified":1542726176645},{"_id":"source/_posts/spring-boot/log/logback.md","hash":"b4852447610a3ff1e50909478c501a1411152b14","modified":1542727659142},{"_id":"source/_posts/spring-boot/mybaits/configuration.md","hash":"01ca6ed1ad9979d0c4da87c2303148fd4093cd2e","modified":1542725726979},{"_id":"source/_posts/spring-boot/mybaits/curd.md","hash":"6002bd60cb8dce6f9985350803b779dee05c318a","modified":1542725726979},{"_id":"source/_posts/spring-boot/mybaits/datasource.md","hash":"439de189892b5c391354628789cb5566028057e0","modified":1542725726979},{"_id":"source/_posts/spring-boot/mybaits/spring-boot.md","hash":"a0b2aa57d27c6e096ff8151c7e2db5be41f3f5d7","modified":1542725726980},{"_id":"source/_posts/spring-boot/imgs/SpringBootWebExceptionResolver.png","hash":"4bf16834b5f745ac1746a6f0aa9718a15ab842f4","modified":1542725726978},{"_id":"source/_posts/spring-boot/redis/README.md","hash":"73747d311a4afd34ec6f043c4c8c99e1fd7586be","modified":1542726252364},{"_id":"source/_posts/spring-boot/war/war.md","hash":"4a68fd88a3848927d5dbee02abc4fcba510a5d9e","modified":1542726141300},{"_id":"themes/landscape/layout/_partial/post/category.ejs","hash":"c6bcd0e04271ffca81da25bcff5adf3d46f02fc0","modified":1542729697897},{"_id":"themes/landscape/layout/_partial/post/date.ejs","hash":"6197802873157656e3077c5099a7dda3d3b01c29","modified":1542729697897},{"_id":"themes/landscape/layout/_partial/post/gallery.ejs","hash":"3d9d81a3c693ff2378ef06ddb6810254e509de5b","modified":1542729697897},{"_id":"themes/landscape/layout/_partial/post/nav.ejs","hash":"16a904de7bceccbb36b4267565f2215704db2880","modified":1542729697898},{"_id":"themes/landscape/layout/_partial/post/tag.ejs","hash":"2fcb0bf9c8847a644167a27824c9bb19ac74dd14","modified":1542729697898},{"_id":"themes/landscape/layout/_partial/post/title.ejs","hash":"2f275739b6f1193c123646a5a31f37d48644c667","modified":1542729697899},{"_id":"themes/landscape/source/css/_partial/archive.styl","hash":"db15f5677dc68f1730e82190bab69c24611ca292","modified":1542729697902},{"_id":"themes/landscape/source/css/_partial/article.styl","hash":"10685f8787a79f79c9a26c2f943253450c498e3e","modified":1542729697902},{"_id":"themes/landscape/source/css/_partial/comment.styl","hash":"79d280d8d203abb3bd933ca9b8e38c78ec684987","modified":1542729697903},{"_id":"themes/landscape/source/css/_partial/footer.styl","hash":"e35a060b8512031048919709a8e7b1ec0e40bc1b","modified":1542729697903},{"_id":"themes/landscape/source/css/_partial/header.styl","hash":"85ab11e082f4dd86dde72bed653d57ec5381f30c","modified":1542729697903},{"_id":"themes/landscape/source/css/_partial/highlight.styl","hash":"bf4e7be1968dad495b04e83c95eac14c4d0ad7c0","modified":1542729697903},{"_id":"themes/landscape/source/css/_partial/mobile.styl","hash":"a399cf9e1e1cec3e4269066e2948d7ae5854d745","modified":1542729697903},{"_id":"themes/landscape/source/css/_partial/sidebar-aside.styl","hash":"890349df5145abf46ce7712010c89237900b3713","modified":1542729697903},{"_id":"themes/landscape/source/css/_partial/sidebar-bottom.styl","hash":"8fd4f30d319542babfd31f087ddbac550f000a8a","modified":1542729697903},{"_id":"themes/landscape/source/css/_partial/sidebar.styl","hash":"404ec059dc674a48b9ab89cd83f258dec4dcb24d","modified":1542729697904},{"_id":"themes/landscape/source/css/_util/grid.styl","hash":"0bf55ee5d09f193e249083602ac5fcdb1e571aed","modified":1542729697904},{"_id":"themes/landscape/source/css/_util/mixin.styl","hash":"44f32767d9fd3c1c08a60d91f181ee53c8f0dbb3","modified":1542729697904},{"_id":"themes/landscape/source/css/fonts/FontAwesome.otf","hash":"b5b4f9be85f91f10799e87a083da1d050f842734","modified":1542729697905},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.eot","hash":"7619748fe34c64fb157a57f6d4ef3678f63a8f5e","modified":1542729697905},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.woff","hash":"04c3bf56d87a0828935bd6b4aee859995f321693","modified":1542729697907},{"_id":"themes/landscape/source/fancybox/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1542729697910},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1542729697910},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-buttons.js","hash":"dc3645529a4bf72983a39fa34c1eb9146e082019","modified":1542729697910},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-media.js","hash":"294420f9ff20f4e3584d212b0c262a00a96ecdb3","modified":1542729697910},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1542729697910},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-thumbs.js","hash":"47da1ae5401c24b5c17cc18e2730780f5c1a7a0c","modified":1542729697911},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.ttf","hash":"7f09c97f333917034ad08fa7295e916c9f72fd3f","modified":1542729697907},{"_id":"source/_posts/spring/annotate/media/19514985@B485A864-1.34fca657","hash":"df5a3c4442adbd5fad3c5fc402fadcf318f08970","modified":1542725726983},{"_id":"source/_posts/spring/img/ioc/1.jpg","hash":"d11c4aa9f60f0b97201f82372aa077f1ea779c2b","modified":1542725726989},{"_id":"source/_posts/spring-boot/web/Thymeleaf/README.md","hash":"4877939a55621f6eccc7ee8f10b4e105657d5926","modified":1542725726982},{"_id":"source/_posts/spring/img/ioc/2.jpg","hash":"d695bef5a0a99fe701a75a7b4d88a05446d0f8ab","modified":1542725726989},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.svg","hash":"46fcc0194d75a0ddac0a038aee41b23456784814","modified":1542729697906},{"_id":"themes/landscape/source/css/images/banner.jpg","hash":"f44aa591089fcb3ec79770a1e102fd3289a7c6a6","modified":1542729697908},{"_id":"source/_posts/spring/img/aop/1.png","hash":"7e16997ca4654d3aec78a6f0f44171d8ff0aec04","modified":1542725726988},{"_id":"public/2018/11/20/spring/mvc/web_xml/index.html","hash":"6debc24ed2c25905f25673f7bc6f78c291afafa6","modified":1542730040439},{"_id":"public/2018/11/20/spring/mvc/aop/index.html","hash":"c1ff01d1e0e0fd2bd214c21e48d67c4a0e8cfd24","modified":1542730040439},{"_id":"public/2018/11/20/spring/ioc_di/index.html","hash":"4f14cca9add3da62e5fd6cc8ce9c457b2e8fd478","modified":1542730040446},{"_id":"public/2018/11/20/spring/aop/index.html","hash":"1eda6eb59b0fb5b569a43b0aa7491fbe0eb94d18","modified":1542730040446},{"_id":"public/2018/11/20/spring/build-spring/index.html","hash":"f5eed83c3c5cf287f2af77b3b9cb1021b9387519","modified":1542730040447},{"_id":"public/2018/11/20/spring/annotate/README/index.html","hash":"291525399efde8b5ef584ed7ed02db4706717c6b","modified":1542730040447},{"_id":"public/2018/11/20/spring/annotate/autowired/index.html","hash":"d63ca777c7556e0595b38875b4c406f713864b8c","modified":1542730040447},{"_id":"public/2018/11/20/spring/ApplicationContext/index.html","hash":"a65bc61c78ef19a02c0204fd9c1cb341495caf08","modified":1542730040447},{"_id":"public/2018/11/20/spring-boot/web/Thymeleaf/README/index.html","hash":"c0a9a92d03201336d7b04f96e9b42ebeedf73642","modified":1542730040447},{"_id":"public/2018/11/20/spring-boot/starter/index.html","hash":"46ba3f504d7c203887877f1fa2d28a835e96cfa6","modified":1542730040447},{"_id":"public/2018/11/20/spring-boot/war/war/index.html","hash":"abafe3044d09fc62d87ae1c3295713d9dd8184a8","modified":1542730040447},{"_id":"public/2018/11/20/spring-boot/mybaits/curd/index.html","hash":"aa77cee7b4dd76ad0dbc3b87add906a706ba04cf","modified":1542730040447},{"_id":"public/2018/11/20/spring-boot/mybaits/configuration/index.html","hash":"c31bcc593cbb5273b7398120ffa79d2d76c95c9a","modified":1542730040447},{"_id":"public/2018/11/20/spring-boot/mybaits/datasource/index.html","hash":"d55d76145372ff9ebf1bab3c531c758542b7b197","modified":1542730040447},{"_id":"public/2018/11/20/spring-boot/mybaits/spring-boot/index.html","hash":"dda6a50d0c383d0a06b637bf0eead6477bf90881","modified":1542730040447},{"_id":"public/2018/11/20/spring-boot/log/logback/index.html","hash":"1ce2be82202fc916adbe9aca9369feb17b55dcae","modified":1542730040447},{"_id":"public/2018/11/20/spring-boot/exception/whitelabel/index.html","hash":"2967f2feff57c6cfd5c63b3d38716b480f4cd7cd","modified":1542730040447},{"_id":"public/2018/11/20/spring-boot/file/loadFile/index.html","hash":"29ccc3cedb53405a012c3625420a5ebefb355568","modified":1542730040447},{"_id":"public/2018/11/20/hibernate/maven/index.html","hash":"089356c211529e3520ae271e874c855cf557dd2b","modified":1542730040447},{"_id":"public/2018/11/20/hibernate/sequence/index.html","hash":"d06208775a171528b72cd77be78cbcc36ecc4a73","modified":1542730040447},{"_id":"public/2018/11/20/hibernate/serializable/index.html","hash":"ac23fe91e062424621287c3c05095564de5b8450","modified":1542730040448},{"_id":"public/2018/11/20/hibernate/session/index.html","hash":"25d614ed150aede83c3ae10120a83b5e1691a731","modified":1542730040448},{"_id":"public/2018/11/20/hibernate/active_transaction/index.html","hash":"369a0698951b54875ba10f992c201faa879c80ab","modified":1542730040448},{"_id":"public/2018/11/20/hibernate/current_thread/index.html","hash":"90a14cdb6fa979510c7ad4468f7bca31b52b1215","modified":1542730040448},{"_id":"public/2018/11/20/hibernate/getCurrentSession/index.html","hash":"af0cc5b79018aa2d38ab1769c3a12ebea176fad3","modified":1542730040448},{"_id":"public/archives/index.html","hash":"a580d8550c1a48a8f8dd7a04bd392d9dc9525113","modified":1542730040448},{"_id":"public/archives/page/2/index.html","hash":"3f5dcc0b738b3f861ba46151567e10991544afd4","modified":1542730040448},{"_id":"public/archives/page/3/index.html","hash":"5b08c406da1c550e82e5bbea11387d003171e5d1","modified":1542730040448},{"_id":"public/archives/page/4/index.html","hash":"61789b11c1c06a4cbb0e9799a62ac6d8e54f1650","modified":1542730040448},{"_id":"public/archives/2018/index.html","hash":"0a2d6978b464a8520fd7cc5e93fcff5f9249fc6f","modified":1542730040448},{"_id":"public/archives/2018/page/2/index.html","hash":"50c23922713ea843ba521abf39579bae7c8ed475","modified":1542730040448},{"_id":"public/archives/2018/page/3/index.html","hash":"de5ea8e50b77d4224a1232dadc22c45aad8cb27c","modified":1542730040448},{"_id":"public/archives/2018/page/4/index.html","hash":"8b503537379aa68bda68eedfc58eed72c232bd21","modified":1542730040448},{"_id":"public/archives/2018/11/index.html","hash":"9aa0ee6a4def2b1dc729e399db9464405858e98b","modified":1542730040448},{"_id":"public/archives/2018/11/page/2/index.html","hash":"c17ad35efb56a263ee38fe81ca940dc167d1022b","modified":1542730040448},{"_id":"public/archives/2018/11/page/3/index.html","hash":"ae4993a6c8a44a480a2afb65450acd10a8f55ae8","modified":1542730040448},{"_id":"public/archives/2018/11/page/4/index.html","hash":"1fcf1a6dbabb103f4319418594c26d634550da97","modified":1542730040448},{"_id":"public/2018/11/20/spring/mvc/log4j2/index.html","hash":"7c816f064fe5b26b9f905f89917f460a71a4e5cc","modified":1542730040448},{"_id":"public/2018/11/20/spring/mvc/resultful/index.html","hash":"6e2ebac696d50e224ddac00827ad7ba837bdc174","modified":1542730040449},{"_id":"public/2018/11/20/spring/mvc/exceptionHandler/index.html","hash":"476a2e91612514d88edf9a5dc36cae46aae83d9a","modified":1542730040449},{"_id":"public/2018/11/20/spring-boot/redis/README/index.html","hash":"49d1c68de90b58c26e19def03d57d4e23c4bd5cd","modified":1542730040449},{"_id":"public/2018/11/20/spring-boot/properties/index.html","hash":"b00f6f2e8c9c732f4ff6821bb0b2eda977d79b30","modified":1542730040449},{"_id":"public/2018/11/20/spring-boot/exception/errorController/index.html","hash":"0e958dc699196dc1dc4aa6a5d915d38be4d330cb","modified":1542730040449},{"_id":"public/2018/11/20/spring-boot/exception/exception/index.html","hash":"3bb9c53266811d3dfd298e315312875a9875e17e","modified":1542730040449},{"_id":"public/2018/11/20/spring-boot/aop/index.html","hash":"b4b413c65d9da72817630f6484d578df6301ec5f","modified":1542730040449},{"_id":"public/2018/11/20/hibernate/hql/index.html","hash":"4254bf51395f2e4deed37cc3dbe0df5a5ad15b86","modified":1542730040449},{"_id":"public/index.html","hash":"2ce32e042b16e702cab31a4c773aaec8e97b9a5d","modified":1542730040449},{"_id":"public/page/2/index.html","hash":"4cbfbe461d8625e31348868972c2aa7dacee0714","modified":1542730040449},{"_id":"public/page/3/index.html","hash":"a14dafd00f80eb99fcc32bbbc7ede9168c95e535","modified":1542730040449},{"_id":"public/page/4/index.html","hash":"a9e52234d9790aadf69320079eb995d4eca11ca1","modified":1542730040452},{"_id":"public/fancybox/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1542730040452},{"_id":"public/fancybox/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1542730040453},{"_id":"public/fancybox/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1542730040453},{"_id":"public/fancybox/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1542730040453},{"_id":"public/fancybox/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1542730040453},{"_id":"public/fancybox/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1542730040453},{"_id":"public/css/fonts/fontawesome-webfont.eot","hash":"7619748fe34c64fb157a57f6d4ef3678f63a8f5e","modified":1542730040453},{"_id":"public/fancybox/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1542730040453},{"_id":"public/css/fonts/fontawesome-webfont.woff","hash":"04c3bf56d87a0828935bd6b4aee859995f321693","modified":1542730040453},{"_id":"public/css/fonts/FontAwesome.otf","hash":"b5b4f9be85f91f10799e87a083da1d050f842734","modified":1542730040704},{"_id":"public/css/fonts/fontawesome-webfont.ttf","hash":"7f09c97f333917034ad08fa7295e916c9f72fd3f","modified":1542730040705},{"_id":"public/fancybox/jquery.fancybox.css","hash":"aaa582fb9eb4b7092dc69fcb2d5b1c20cca58ab6","modified":1542730040708},{"_id":"public/js/script.js","hash":"2876e0b19ce557fca38d7c6f49ca55922ab666a1","modified":1542730040708},{"_id":"public/fancybox/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1542730040708},{"_id":"public/fancybox/helpers/jquery.fancybox-media.js","hash":"294420f9ff20f4e3584d212b0c262a00a96ecdb3","modified":1542730040708},{"_id":"public/fancybox/helpers/jquery.fancybox-buttons.js","hash":"dc3645529a4bf72983a39fa34c1eb9146e082019","modified":1542730040708},{"_id":"public/fancybox/helpers/jquery.fancybox-thumbs.js","hash":"47da1ae5401c24b5c17cc18e2730780f5c1a7a0c","modified":1542730040708},{"_id":"public/fancybox/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1542730040708},{"_id":"public/css/style.css","hash":"5f8dadd37d0052c557061018fe6f568f64fced9b","modified":1542730040708},{"_id":"public/css/fonts/fontawesome-webfont.svg","hash":"46fcc0194d75a0ddac0a038aee41b23456784814","modified":1542730040710},{"_id":"public/fancybox/jquery.fancybox.pack.js","hash":"9e0d51ca1dbe66f6c0c7aefd552dc8122e694a6e","modified":1542730040712},{"_id":"public/css/images/banner.jpg","hash":"f44aa591089fcb3ec79770a1e102fd3289a7c6a6","modified":1542730040712},{"_id":"public/fancybox/jquery.fancybox.js","hash":"d08b03a42d5c4ba456ef8ba33116fdbb7a9cabed","modified":1542730040718}],"Category":[],"Data":[],"Page":[],"Post":[{"_content":"# createSQLQuery is not valid without active transaction 异常\n\torg.hibernate.HibernateException: createSQLQuery is not valid without active transaction\n\n## 没有声明事务\n\n需要在spring-hibernate.xml中增加事务声明\n\n```\n<tx:advice transaction-manager=\"transactionManager\" id=\"txAdvice\">\n    <tx:attributes>\n        <tx:method name=\"get*\" read-only=\"true\"/>\n        <tx:method name=\"find*\" read-only=\"true\"/>\n        <tx:method name=\"count*\" read-only=\"true\"/>\n        <tx:method name=\"*\" />\n    </tx:attributes>\n</tx:advice>\n\n<aop:config>\n    <aop:pointcut expression=\"execution(* xx.xx.service.*.*(..))\" id=\"txPointCut\"/>\n    <aop:advisor advice-ref=\"txAdvice\" pointcut-ref=\"txPointCut\"/>\n</aop:config>\n\n```\n\n\n参考阅读：hibernate线程问题\nhttp://blog.csdn.net/yinjian520/article/details/8666695\n\n","source":"_posts/hibernate/active_transaction.md","raw":"# createSQLQuery is not valid without active transaction 异常\n\torg.hibernate.HibernateException: createSQLQuery is not valid without active transaction\n\n## 没有声明事务\n\n需要在spring-hibernate.xml中增加事务声明\n\n```\n<tx:advice transaction-manager=\"transactionManager\" id=\"txAdvice\">\n    <tx:attributes>\n        <tx:method name=\"get*\" read-only=\"true\"/>\n        <tx:method name=\"find*\" read-only=\"true\"/>\n        <tx:method name=\"count*\" read-only=\"true\"/>\n        <tx:method name=\"*\" />\n    </tx:attributes>\n</tx:advice>\n\n<aop:config>\n    <aop:pointcut expression=\"execution(* xx.xx.service.*.*(..))\" id=\"txPointCut\"/>\n    <aop:advisor advice-ref=\"txAdvice\" pointcut-ref=\"txPointCut\"/>\n</aop:config>\n\n```\n\n\n参考阅读：hibernate线程问题\nhttp://blog.csdn.net/yinjian520/article/details/8666695\n\n","slug":"hibernate/active_transaction","published":1,"date":"2018-11-20T14:55:26.974Z","updated":"2018-11-20T15:04:08.184Z","title":"","comments":1,"layout":"post","photos":[],"link":"","_id":"cjopxmsqm0000wfo8t85hutpm","content":"<h1><span id=\"createsqlquery-is-not-valid-without-active-transaction-异常\">createSQLQuery is not valid without active transaction 异常</span></h1><pre><code>org.hibernate.HibernateException: createSQLQuery is not valid without active transaction\n</code></pre><h2><span id=\"没有声明事务\">没有声明事务</span></h2><p>需要在spring-hibernate.xml中增加事务声明</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;tx:advice transaction-manager=&quot;transactionManager&quot; id=&quot;txAdvice&quot;&gt;</span><br><span class=\"line\">    &lt;tx:attributes&gt;</span><br><span class=\"line\">        &lt;tx:method name=&quot;get*&quot; read-only=&quot;true&quot;/&gt;</span><br><span class=\"line\">        &lt;tx:method name=&quot;find*&quot; read-only=&quot;true&quot;/&gt;</span><br><span class=\"line\">        &lt;tx:method name=&quot;count*&quot; read-only=&quot;true&quot;/&gt;</span><br><span class=\"line\">        &lt;tx:method name=&quot;*&quot; /&gt;</span><br><span class=\"line\">    &lt;/tx:attributes&gt;</span><br><span class=\"line\">&lt;/tx:advice&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;aop:config&gt;</span><br><span class=\"line\">    &lt;aop:pointcut expression=&quot;execution(* xx.xx.service.*.*(..))&quot; id=&quot;txPointCut&quot;/&gt;</span><br><span class=\"line\">    &lt;aop:advisor advice-ref=&quot;txAdvice&quot; pointcut-ref=&quot;txPointCut&quot;/&gt;</span><br><span class=\"line\">&lt;/aop:config&gt;</span><br></pre></td></tr></table></figure>\n<p>参考阅读：hibernate线程问题<br><a href=\"http://blog.csdn.net/yinjian520/article/details/8666695\" target=\"_blank\" rel=\"noopener\">http://blog.csdn.net/yinjian520/article/details/8666695</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"createSQLQuery-is-not-valid-without-active-transaction-异常\"><a href=\"#createSQLQuery-is-not-valid-without-active-transaction-异常\" class=\"headerlink\" title=\"createSQLQuery is not valid without active transaction 异常\"></a>createSQLQuery is not valid without active transaction 异常</h1><pre><code>org.hibernate.HibernateException: createSQLQuery is not valid without active transaction\n</code></pre><h2 id=\"没有声明事务\"><a href=\"#没有声明事务\" class=\"headerlink\" title=\"没有声明事务\"></a>没有声明事务</h2><p>需要在spring-hibernate.xml中增加事务声明</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;tx:advice transaction-manager=&quot;transactionManager&quot; id=&quot;txAdvice&quot;&gt;</span><br><span class=\"line\">    &lt;tx:attributes&gt;</span><br><span class=\"line\">        &lt;tx:method name=&quot;get*&quot; read-only=&quot;true&quot;/&gt;</span><br><span class=\"line\">        &lt;tx:method name=&quot;find*&quot; read-only=&quot;true&quot;/&gt;</span><br><span class=\"line\">        &lt;tx:method name=&quot;count*&quot; read-only=&quot;true&quot;/&gt;</span><br><span class=\"line\">        &lt;tx:method name=&quot;*&quot; /&gt;</span><br><span class=\"line\">    &lt;/tx:attributes&gt;</span><br><span class=\"line\">&lt;/tx:advice&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;aop:config&gt;</span><br><span class=\"line\">    &lt;aop:pointcut expression=&quot;execution(* xx.xx.service.*.*(..))&quot; id=&quot;txPointCut&quot;/&gt;</span><br><span class=\"line\">    &lt;aop:advisor advice-ref=&quot;txAdvice&quot; pointcut-ref=&quot;txPointCut&quot;/&gt;</span><br><span class=\"line\">&lt;/aop:config&gt;</span><br></pre></td></tr></table></figure>\n<p>参考阅读：hibernate线程问题<br><a href=\"http://blog.csdn.net/yinjian520/article/details/8666695\" target=\"_blank\" rel=\"noopener\">http://blog.csdn.net/yinjian520/article/details/8666695</a></p>\n"},{"_content":"# Hibernate4 No Session found for current thread原因\n\nHibernate4 与 spring3 集成之后， 如果在取得session 的地方使用了getCurrentSession, 可能会报一个错：“No Session found for current thread”, 这个错误的原因，网上有很多解决办法, 但具体原因的分析，却没有多少, 这里转载一个原理分析:\n\nSessionFactory的getCurrentSession并不能保证在没有当前Session的情况下会自动创建一个新的，这取决于CurrentSessionContext的实现，SessionFactory将调用CurrentSessionContext的currentSession()方法来获得Session。在Spring中，如果我们在没有配置TransactionManager并且没有事先调用SessionFactory.openSession()的情况直接调用getCurrentSession()，那么程序将抛出“No Session found for current thread”异常。如果配置了TranactionManager并且通过@Transactional或者声明的方式配置的事务边界，那么Spring会在开始事务之前通过AOP的方式为当前线程创建Session，此时调用getCurrentSession()将得到正确结果。\n\n然而，产生以上异常的原因在于Spring提供了自己的CurrentSessionContext实现，如果我们不打算使用Spring，而是自己直接从hibernate.cfg.xml创建SessionFactory，并且为在hibernate.cfg.xml\n中设置current_session_context_class为thread，也即使用了ThreadLocalSessionContext，那么我们在调用getCurrentSession()时，如果当前线程没有Session存在，则会创建一个绑定到当前线程。\n\nHibernate在默认情况下会使用JTASessionContext，Spring提供了自己SpringSessionContext，因此我们不用配置current_session_context_class，当Hibernate与Spring集成时，将使用该SessionContext，故此时调用getCurrentSession()的效果完全依赖于SpringSessionContext的实现。\n\n在没有Spring的情况下使用Hibernate，如果没有在hibernate.cfg.xml中配置current_session_context_class，有没有JTA的话，那么程序将抛出\"No CurrentSessionContext configured!\"异常。此时的解决办法是在hibernate.cfg.xml中将current_session_context_class配置成thread。\n\n在Spring中使用Hibernate，如果我们配置了TransactionManager，那么我们就不应该调用SessionFactory的openSession()来获得Sessioin，因为这样获得的Session并没有被事务管理。\n\n至于解决的办法，可以采用如下方式:\n1.  在spring 配置文件中加入\n\n```\n<tx:annotation-driven transaction-manager=\"transactionManager\"/>\n```\n\n并且在处理业务逻辑的类上采用注解\n```\n@Service\npublic class CustomerServiceImpl implements CustomerService {  \n    @Transactional\n    public void saveCustomer(Customer customer) {\n        customerDaoImpl.saveCustomer(customer);\n    }\n    ...\n}\n```\n\n另外在 hibernate 的配置文件中，也可以增加这样的配置来避免这个错误:\n\n```\n<property name=\"current_session_context_class\">thread</property>\n```\n\n转载自\nhttp://www.yihaomen.com/article/java/466.htm\n\n\n","source":"_posts/hibernate/current_thread.md","raw":"# Hibernate4 No Session found for current thread原因\n\nHibernate4 与 spring3 集成之后， 如果在取得session 的地方使用了getCurrentSession, 可能会报一个错：“No Session found for current thread”, 这个错误的原因，网上有很多解决办法, 但具体原因的分析，却没有多少, 这里转载一个原理分析:\n\nSessionFactory的getCurrentSession并不能保证在没有当前Session的情况下会自动创建一个新的，这取决于CurrentSessionContext的实现，SessionFactory将调用CurrentSessionContext的currentSession()方法来获得Session。在Spring中，如果我们在没有配置TransactionManager并且没有事先调用SessionFactory.openSession()的情况直接调用getCurrentSession()，那么程序将抛出“No Session found for current thread”异常。如果配置了TranactionManager并且通过@Transactional或者声明的方式配置的事务边界，那么Spring会在开始事务之前通过AOP的方式为当前线程创建Session，此时调用getCurrentSession()将得到正确结果。\n\n然而，产生以上异常的原因在于Spring提供了自己的CurrentSessionContext实现，如果我们不打算使用Spring，而是自己直接从hibernate.cfg.xml创建SessionFactory，并且为在hibernate.cfg.xml\n中设置current_session_context_class为thread，也即使用了ThreadLocalSessionContext，那么我们在调用getCurrentSession()时，如果当前线程没有Session存在，则会创建一个绑定到当前线程。\n\nHibernate在默认情况下会使用JTASessionContext，Spring提供了自己SpringSessionContext，因此我们不用配置current_session_context_class，当Hibernate与Spring集成时，将使用该SessionContext，故此时调用getCurrentSession()的效果完全依赖于SpringSessionContext的实现。\n\n在没有Spring的情况下使用Hibernate，如果没有在hibernate.cfg.xml中配置current_session_context_class，有没有JTA的话，那么程序将抛出\"No CurrentSessionContext configured!\"异常。此时的解决办法是在hibernate.cfg.xml中将current_session_context_class配置成thread。\n\n在Spring中使用Hibernate，如果我们配置了TransactionManager，那么我们就不应该调用SessionFactory的openSession()来获得Sessioin，因为这样获得的Session并没有被事务管理。\n\n至于解决的办法，可以采用如下方式:\n1.  在spring 配置文件中加入\n\n```\n<tx:annotation-driven transaction-manager=\"transactionManager\"/>\n```\n\n并且在处理业务逻辑的类上采用注解\n```\n@Service\npublic class CustomerServiceImpl implements CustomerService {  \n    @Transactional\n    public void saveCustomer(Customer customer) {\n        customerDaoImpl.saveCustomer(customer);\n    }\n    ...\n}\n```\n\n另外在 hibernate 的配置文件中，也可以增加这样的配置来避免这个错误:\n\n```\n<property name=\"current_session_context_class\">thread</property>\n```\n\n转载自\nhttp://www.yihaomen.com/article/java/466.htm\n\n\n","slug":"hibernate/current_thread","published":1,"date":"2018-11-20T14:55:26.974Z","updated":"2018-11-20T14:55:26.974Z","title":"","comments":1,"layout":"post","photos":[],"link":"","_id":"cjopxmsqp0001wfo874iw6613","content":"<h1><span id=\"hibernate4-no-session-found-for-current-thread原因\">Hibernate4 No Session found for current thread原因</span></h1><p>Hibernate4 与 spring3 集成之后， 如果在取得session 的地方使用了getCurrentSession, 可能会报一个错：“No Session found for current thread”, 这个错误的原因，网上有很多解决办法, 但具体原因的分析，却没有多少, 这里转载一个原理分析:</p>\n<p>SessionFactory的getCurrentSession并不能保证在没有当前Session的情况下会自动创建一个新的，这取决于CurrentSessionContext的实现，SessionFactory将调用CurrentSessionContext的currentSession()方法来获得Session。在Spring中，如果我们在没有配置TransactionManager并且没有事先调用SessionFactory.openSession()的情况直接调用getCurrentSession()，那么程序将抛出“No Session found for current thread”异常。如果配置了TranactionManager并且通过@Transactional或者声明的方式配置的事务边界，那么Spring会在开始事务之前通过AOP的方式为当前线程创建Session，此时调用getCurrentSession()将得到正确结果。</p>\n<p>然而，产生以上异常的原因在于Spring提供了自己的CurrentSessionContext实现，如果我们不打算使用Spring，而是自己直接从hibernate.cfg.xml创建SessionFactory，并且为在hibernate.cfg.xml<br>中设置current_session_context_class为thread，也即使用了ThreadLocalSessionContext，那么我们在调用getCurrentSession()时，如果当前线程没有Session存在，则会创建一个绑定到当前线程。</p>\n<p>Hibernate在默认情况下会使用JTASessionContext，Spring提供了自己SpringSessionContext，因此我们不用配置current_session_context_class，当Hibernate与Spring集成时，将使用该SessionContext，故此时调用getCurrentSession()的效果完全依赖于SpringSessionContext的实现。</p>\n<p>在没有Spring的情况下使用Hibernate，如果没有在hibernate.cfg.xml中配置current_session_context_class，有没有JTA的话，那么程序将抛出”No CurrentSessionContext configured!”异常。此时的解决办法是在hibernate.cfg.xml中将current_session_context_class配置成thread。</p>\n<p>在Spring中使用Hibernate，如果我们配置了TransactionManager，那么我们就不应该调用SessionFactory的openSession()来获得Sessioin，因为这样获得的Session并没有被事务管理。</p>\n<p>至于解决的办法，可以采用如下方式:</p>\n<ol>\n<li>在spring 配置文件中加入</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;tx:annotation-driven transaction-manager=&quot;transactionManager&quot;/&gt;</span><br></pre></td></tr></table></figure>\n<p>并且在处理业务逻辑的类上采用注解<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@Service</span><br><span class=\"line\">public class CustomerServiceImpl implements CustomerService &#123;  </span><br><span class=\"line\">    @Transactional</span><br><span class=\"line\">    public void saveCustomer(Customer customer) &#123;</span><br><span class=\"line\">        customerDaoImpl.saveCustomer(customer);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>另外在 hibernate 的配置文件中，也可以增加这样的配置来避免这个错误:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;property name=&quot;current_session_context_class&quot;&gt;thread&lt;/property&gt;</span><br></pre></td></tr></table></figure>\n<p>转载自<br><a href=\"http://www.yihaomen.com/article/java/466.htm\" target=\"_blank\" rel=\"noopener\">http://www.yihaomen.com/article/java/466.htm</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"Hibernate4-No-Session-found-for-current-thread原因\"><a href=\"#Hibernate4-No-Session-found-for-current-thread原因\" class=\"headerlink\" title=\"Hibernate4 No Session found for current thread原因\"></a>Hibernate4 No Session found for current thread原因</h1><p>Hibernate4 与 spring3 集成之后， 如果在取得session 的地方使用了getCurrentSession, 可能会报一个错：“No Session found for current thread”, 这个错误的原因，网上有很多解决办法, 但具体原因的分析，却没有多少, 这里转载一个原理分析:</p>\n<p>SessionFactory的getCurrentSession并不能保证在没有当前Session的情况下会自动创建一个新的，这取决于CurrentSessionContext的实现，SessionFactory将调用CurrentSessionContext的currentSession()方法来获得Session。在Spring中，如果我们在没有配置TransactionManager并且没有事先调用SessionFactory.openSession()的情况直接调用getCurrentSession()，那么程序将抛出“No Session found for current thread”异常。如果配置了TranactionManager并且通过@Transactional或者声明的方式配置的事务边界，那么Spring会在开始事务之前通过AOP的方式为当前线程创建Session，此时调用getCurrentSession()将得到正确结果。</p>\n<p>然而，产生以上异常的原因在于Spring提供了自己的CurrentSessionContext实现，如果我们不打算使用Spring，而是自己直接从hibernate.cfg.xml创建SessionFactory，并且为在hibernate.cfg.xml<br>中设置current_session_context_class为thread，也即使用了ThreadLocalSessionContext，那么我们在调用getCurrentSession()时，如果当前线程没有Session存在，则会创建一个绑定到当前线程。</p>\n<p>Hibernate在默认情况下会使用JTASessionContext，Spring提供了自己SpringSessionContext，因此我们不用配置current_session_context_class，当Hibernate与Spring集成时，将使用该SessionContext，故此时调用getCurrentSession()的效果完全依赖于SpringSessionContext的实现。</p>\n<p>在没有Spring的情况下使用Hibernate，如果没有在hibernate.cfg.xml中配置current_session_context_class，有没有JTA的话，那么程序将抛出”No CurrentSessionContext configured!”异常。此时的解决办法是在hibernate.cfg.xml中将current_session_context_class配置成thread。</p>\n<p>在Spring中使用Hibernate，如果我们配置了TransactionManager，那么我们就不应该调用SessionFactory的openSession()来获得Sessioin，因为这样获得的Session并没有被事务管理。</p>\n<p>至于解决的办法，可以采用如下方式:</p>\n<ol>\n<li>在spring 配置文件中加入</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;tx:annotation-driven transaction-manager=&quot;transactionManager&quot;/&gt;</span><br></pre></td></tr></table></figure>\n<p>并且在处理业务逻辑的类上采用注解<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@Service</span><br><span class=\"line\">public class CustomerServiceImpl implements CustomerService &#123;  </span><br><span class=\"line\">    @Transactional</span><br><span class=\"line\">    public void saveCustomer(Customer customer) &#123;</span><br><span class=\"line\">        customerDaoImpl.saveCustomer(customer);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>另外在 hibernate 的配置文件中，也可以增加这样的配置来避免这个错误:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;property name=&quot;current_session_context_class&quot;&gt;thread&lt;/property&gt;</span><br></pre></td></tr></table></figure>\n<p>转载自<br><a href=\"http://www.yihaomen.com/article/java/466.htm\" target=\"_blank\" rel=\"noopener\">http://www.yihaomen.com/article/java/466.htm</a></p>\n"},{"_content":"#  spring+hibernate+maven\n\n","source":"_posts/hibernate/maven.md","raw":"#  spring+hibernate+maven\n\n","slug":"hibernate/maven","published":1,"date":"2018-11-20T14:55:26.975Z","updated":"2018-11-20T15:04:39.263Z","title":"","comments":1,"layout":"post","photos":[],"link":"","_id":"cjopxmsqq0002wfo8pwim3b3e","content":"<h1><span id=\"springhibernatemaven\">spring+hibernate+maven</span></h1>","site":{"data":{}},"excerpt":"","more":"<h1 id=\"spring-hibernate-maven\"><a href=\"#spring-hibernate-maven\" class=\"headerlink\" title=\"spring+hibernate+maven\"></a>spring+hibernate+maven</h1>"},{"_content":"# Hibernate-sequence doesn't exist\n 学过hibernate的都知道hibernate支持n种主键生成策略。但有一种比较诡异，就是sequence。众所周知，oracle 表的主键生成策略是没有自增(identity或者autoIncrement)的，他是通过 sequence 来实现的。而mysql正好与oracle相反，mysql支持自增，恰好不支持 sequence。如果想要在mysql上应用sequence主键生成策略那就悲剧了。 \n \n其实最简单的办法就是用hibernate实体设置\n\n```\n@Id\n@GeneratedValue(strategy = GenerationType.AUTO)\n```\n\n网上很多描述主要关于这一点存在两种情况，一种是没设置对id\n一种是设置了id但是使用了错误的hibernate.xml配置\n\n","source":"_posts/hibernate/sequence.md","raw":"# Hibernate-sequence doesn't exist\n 学过hibernate的都知道hibernate支持n种主键生成策略。但有一种比较诡异，就是sequence。众所周知，oracle 表的主键生成策略是没有自增(identity或者autoIncrement)的，他是通过 sequence 来实现的。而mysql正好与oracle相反，mysql支持自增，恰好不支持 sequence。如果想要在mysql上应用sequence主键生成策略那就悲剧了。 \n \n其实最简单的办法就是用hibernate实体设置\n\n```\n@Id\n@GeneratedValue(strategy = GenerationType.AUTO)\n```\n\n网上很多描述主要关于这一点存在两种情况，一种是没设置对id\n一种是设置了id但是使用了错误的hibernate.xml配置\n\n","slug":"hibernate/sequence","published":1,"date":"2018-11-20T14:55:26.975Z","updated":"2018-11-20T14:55:26.975Z","title":"","comments":1,"layout":"post","photos":[],"link":"","_id":"cjopxmsqr0003wfo8fto7oku2","content":"<h1><span id=\"hibernate-sequence-doesnt-exist\">Hibernate-sequence doesn’t exist</span></h1><p> 学过hibernate的都知道hibernate支持n种主键生成策略。但有一种比较诡异，就是sequence。众所周知，oracle 表的主键生成策略是没有自增(identity或者autoIncrement)的，他是通过 sequence 来实现的。而mysql正好与oracle相反，mysql支持自增，恰好不支持 sequence。如果想要在mysql上应用sequence主键生成策略那就悲剧了。 </p>\n<p>其实最简单的办法就是用hibernate实体设置</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@Id</span><br><span class=\"line\">@GeneratedValue(strategy = GenerationType.AUTO)</span><br></pre></td></tr></table></figure>\n<p>网上很多描述主要关于这一点存在两种情况，一种是没设置对id<br>一种是设置了id但是使用了错误的hibernate.xml配置</p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"Hibernate-sequence-doesn’t-exist\"><a href=\"#Hibernate-sequence-doesn’t-exist\" class=\"headerlink\" title=\"Hibernate-sequence doesn’t exist\"></a>Hibernate-sequence doesn’t exist</h1><p> 学过hibernate的都知道hibernate支持n种主键生成策略。但有一种比较诡异，就是sequence。众所周知，oracle 表的主键生成策略是没有自增(identity或者autoIncrement)的，他是通过 sequence 来实现的。而mysql正好与oracle相反，mysql支持自增，恰好不支持 sequence。如果想要在mysql上应用sequence主键生成策略那就悲剧了。 </p>\n<p>其实最简单的办法就是用hibernate实体设置</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@Id</span><br><span class=\"line\">@GeneratedValue(strategy = GenerationType.AUTO)</span><br></pre></td></tr></table></figure>\n<p>网上很多描述主要关于这一点存在两种情况，一种是没设置对id<br>一种是设置了id但是使用了错误的hibernate.xml配置</p>\n"},{"_content":"# hibernate 序列化","source":"_posts/hibernate/serializable.md","raw":"# hibernate 序列化","slug":"hibernate/serializable","published":1,"date":"2018-11-20T14:55:26.975Z","updated":"2018-11-20T15:04:09.541Z","title":"","comments":1,"layout":"post","photos":[],"link":"","_id":"cjopxmsqr0004wfo808lvjl5z","content":"<h1><span id=\"hibernate-序列化\">hibernate 序列化</span></h1>","site":{"data":{}},"excerpt":"","more":"<h1 id=\"hibernate-序列化\"><a href=\"#hibernate-序列化\" class=\"headerlink\" title=\"hibernate 序列化\"></a>hibernate 序列化</h1>"},{"_content":"# hibernate session\nhttp://blog.csdn.net/shrek_xu/article/details/740991\nhttp://www.blogjava.net/yzzh9/archive/2008/10/07/233002.html\n\n","source":"_posts/hibernate/session.md","raw":"# hibernate session\nhttp://blog.csdn.net/shrek_xu/article/details/740991\nhttp://www.blogjava.net/yzzh9/archive/2008/10/07/233002.html\n\n","slug":"hibernate/session","published":1,"date":"2018-11-20T14:55:26.975Z","updated":"2018-11-20T15:03:26.270Z","title":"","comments":1,"layout":"post","photos":[],"link":"","_id":"cjopxmsqs0005wfo8zvx55m7f","content":"<h1><span id=\"hibernate-session\">hibernate session</span></h1><p><a href=\"http://blog.csdn.net/shrek_xu/article/details/740991\" target=\"_blank\" rel=\"noopener\">http://blog.csdn.net/shrek_xu/article/details/740991</a><br><a href=\"http://www.blogjava.net/yzzh9/archive/2008/10/07/233002.html\" target=\"_blank\" rel=\"noopener\">http://www.blogjava.net/yzzh9/archive/2008/10/07/233002.html</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"hibernate-session\"><a href=\"#hibernate-session\" class=\"headerlink\" title=\"hibernate session\"></a>hibernate session</h1><p><a href=\"http://blog.csdn.net/shrek_xu/article/details/740991\" target=\"_blank\" rel=\"noopener\">http://blog.csdn.net/shrek_xu/article/details/740991</a><br><a href=\"http://www.blogjava.net/yzzh9/archive/2008/10/07/233002.html\" target=\"_blank\" rel=\"noopener\">http://www.blogjava.net/yzzh9/archive/2008/10/07/233002.html</a></p>\n"},{"_content":"# ","source":"_posts/spring/ApplicationContext.md","raw":"# ","slug":"spring/ApplicationContext","published":1,"date":"2018-11-20T14:55:26.982Z","updated":"2018-11-20T14:55:26.983Z","title":"","comments":1,"layout":"post","photos":[],"link":"","_id":"cjopxmsqt0006wfo8q7ipdht4","content":"<p>#</p>\n","site":{"data":{}},"excerpt":"","more":"<p>#</p>\n"},{"_content":"# 面向切面\n\n### 什么是AOP\n\nAOP（Aspect-OrientedProgramming，面向方面编程），可以说是OOP（Object-Oriented Programing，面向对象编程）的补充和完善。OOP引入封装、继承和多态性等概念来建立一种对象层次结构，用以模拟公共行为的一个集合。当我们需要为分散的对象引入公共行为的时候，OOP则显得无能为力。也就是说，OOP允许你定义从上到下的关系，但并不适合定义从左到右的关系。例如日志功能。日志代码往往水平地散布在所有对象层次中，而与它所散布到的对象的核心功能毫无关系。对于其他类型的代码，如安全性、异常处理和透明的持续性也是如此。这种散布在各处的无关的代码被称为横切（cross-cutting）代码，在OOP设计中，它导致了大量代码的重复，而不利于各个模块的重用。\n \n而AOP技术则恰恰相反，它利用一种称为“横切”的技术，剖解开封装的对象内部，并将那些影响了多个类的公共行为封装到一个可重用模块，并将其名为“Aspect”，即方面。所谓“方面”，简单地说，就是将那些与业务无关，却为业务模块所共同调用的逻辑或责任封装起来，便于减少系统的重复代码，降低模块间的耦合度，并有利于未来的可操作性和可维护性。AOP代表的是一个横向的关系，如果说“对象”是一个空心的圆柱体，其中封装的是对象的属性和行为；那么面向方面编程的方法，就仿佛一把利刃，将这些空心圆柱体剖开，以获得其内部的消息。而剖开的切面，也就是所谓的“方面”了。然后它又以巧夺天功的妙手将这些剖开的切面复原，不留痕迹。\n \n使用“横切”技术，AOP把软件系统分为两个部分：核心关注点和横切关注点。业务处理的主要流程是核心关注点，与之关系不大的部分是横切关注点。横切关注点的一个特点是，他们经常发生在核心关注点的多处，而各处都基本相似。比如权限认证、日志、事务处理。Aop 的作用在于分离系统中的各种关注点，将核心关注点和横切关注点分离开来。正如Avanade公司的高级方案构架师Adam Magee所说，AOP的核心思想就是“将应用程序中的商业逻辑同对其提供支持的通用服务进行分离。”\n \n实现AOP的技术，主要分为两大类：一是采用动态代理技术，利用截取消息的方式，对该消息进行装饰，以取代原有对象行为的执行；二是采用静态织入的方式，引入特定的语法创建“方面”，从而使得编译器可以在编译期间织入有关“方面”的代码。\n\n### AOP使用场景\n\nAOP用来封装横切关注点，具体可以在下面的场景中使用:\n\n```\nAuthentication 权限\nCaching 缓存\nContext passing 内容传递\nError handling 错误处理\nLazy loading　懒加载\nDebugging　　调试\nlogging, tracing, profiling and monitoring　记录跟踪　优化　校准\nPerformance optimization　性能优化\nPersistence　　持久化\nResource pooling　资源池\nSynchronization　同步\nTransactions 事务\n```\n\n### AOP相关概念\n\n方面（Aspect）：一个关注点的模块化，这个关注点实现可能另外横切多个对象。事务管理是J2EE应用中一个很好的横切关注点例子。方面用Spring的 Advisor或拦截器实现。\n \n连接点（Joinpoint）: 程序执行过程中明确的点，如方法的调用或特定的异常被抛出。\n \n通知（Advice）: 在特定的连接点，AOP框架执行的动作。各种类型的通知包括“around”、“before”和“throws”通知。通知类型将在下面讨论。许多AOP框架包括Spring都是以拦截器做通知模型，维护一个“围绕”连接点的拦截器链。Spring中定义了四个advice: BeforeAdvice, AfterAdvice, ThrowAdvice和DynamicIntroductionAdvice\n \n切入点（Pointcut）: 指定一个通知将被引发的一系列连接点的集合。AOP框架必须允许开发者指定切入点：例如，使用正则表达式。 Spring定义了Pointcut接口，用来组合MethodMatcher和ClassFilter，可以通过名字很清楚的理解， MethodMatcher是用来检查目标类的方法是否可以被应用此通知，而ClassFilter是用来检查Pointcut是否应该应用到目标类上\n \n引入（Introduction）: 添加方法或字段到被通知的类。 Spring允许引入新的接口到任何被通知的对象。例如，你可以使用一个引入使任何对象实现 IsModified接口，来简化缓存。Spring中要使用Introduction, 可有通过DelegatingIntroductionInterceptor来实现通知，通过DefaultIntroductionAdvisor来配置Advice和代理类要实现的接口\n \n目标对象（Target Object）: 包含连接点的对象。也被称作被通知或被代理对象。POJO\n \nAOP代理（AOP Proxy）: AOP框架创建的对象，包含通知。 在Spring中，AOP代理可以是JDK动态代理或者CGLIB代理。\n \n织入（Weaving）: 组装方面来创建一个被通知对象。这可以在编译时完成（例如使用AspectJ编译器），也可以在运行时完成。Spring和其他纯Java AOP框架一样，在运行时完成织入。\n\nSpring AOP组件\n![alt](/img/aop/1.png)\n\n\n### 如何使用Spring AOP\n\n可以通过配置文件或者编程的方式来使用Spring AOP。\n \n配置可以通过xml文件来进行，大概有四种方式：\n\n* 配置ProxyFactoryBean，显式地设置advisors, advice, target等\n* 配置AutoProxyCreator，这种方式下，还是如以前一样使用定义的bean，但是从容器中获得的其实已经是代理对象\n* 通过<aop:config>来配置\n* 通过<aop:aspectj-autoproxy>来配置，使用AspectJ的注解来标识通知及切入点\n \n也可以直接使用ProxyFactory来以编程的方式使用Spring AOP，通过ProxyFactory提供的方法可以设置target对象, advisor等相关配置，最终通过 getProxy()方法来获取代理对象\n\n未完待续......\n\n\n","source":"_posts/spring/aop.md","raw":"# 面向切面\n\n### 什么是AOP\n\nAOP（Aspect-OrientedProgramming，面向方面编程），可以说是OOP（Object-Oriented Programing，面向对象编程）的补充和完善。OOP引入封装、继承和多态性等概念来建立一种对象层次结构，用以模拟公共行为的一个集合。当我们需要为分散的对象引入公共行为的时候，OOP则显得无能为力。也就是说，OOP允许你定义从上到下的关系，但并不适合定义从左到右的关系。例如日志功能。日志代码往往水平地散布在所有对象层次中，而与它所散布到的对象的核心功能毫无关系。对于其他类型的代码，如安全性、异常处理和透明的持续性也是如此。这种散布在各处的无关的代码被称为横切（cross-cutting）代码，在OOP设计中，它导致了大量代码的重复，而不利于各个模块的重用。\n \n而AOP技术则恰恰相反，它利用一种称为“横切”的技术，剖解开封装的对象内部，并将那些影响了多个类的公共行为封装到一个可重用模块，并将其名为“Aspect”，即方面。所谓“方面”，简单地说，就是将那些与业务无关，却为业务模块所共同调用的逻辑或责任封装起来，便于减少系统的重复代码，降低模块间的耦合度，并有利于未来的可操作性和可维护性。AOP代表的是一个横向的关系，如果说“对象”是一个空心的圆柱体，其中封装的是对象的属性和行为；那么面向方面编程的方法，就仿佛一把利刃，将这些空心圆柱体剖开，以获得其内部的消息。而剖开的切面，也就是所谓的“方面”了。然后它又以巧夺天功的妙手将这些剖开的切面复原，不留痕迹。\n \n使用“横切”技术，AOP把软件系统分为两个部分：核心关注点和横切关注点。业务处理的主要流程是核心关注点，与之关系不大的部分是横切关注点。横切关注点的一个特点是，他们经常发生在核心关注点的多处，而各处都基本相似。比如权限认证、日志、事务处理。Aop 的作用在于分离系统中的各种关注点，将核心关注点和横切关注点分离开来。正如Avanade公司的高级方案构架师Adam Magee所说，AOP的核心思想就是“将应用程序中的商业逻辑同对其提供支持的通用服务进行分离。”\n \n实现AOP的技术，主要分为两大类：一是采用动态代理技术，利用截取消息的方式，对该消息进行装饰，以取代原有对象行为的执行；二是采用静态织入的方式，引入特定的语法创建“方面”，从而使得编译器可以在编译期间织入有关“方面”的代码。\n\n### AOP使用场景\n\nAOP用来封装横切关注点，具体可以在下面的场景中使用:\n\n```\nAuthentication 权限\nCaching 缓存\nContext passing 内容传递\nError handling 错误处理\nLazy loading　懒加载\nDebugging　　调试\nlogging, tracing, profiling and monitoring　记录跟踪　优化　校准\nPerformance optimization　性能优化\nPersistence　　持久化\nResource pooling　资源池\nSynchronization　同步\nTransactions 事务\n```\n\n### AOP相关概念\n\n方面（Aspect）：一个关注点的模块化，这个关注点实现可能另外横切多个对象。事务管理是J2EE应用中一个很好的横切关注点例子。方面用Spring的 Advisor或拦截器实现。\n \n连接点（Joinpoint）: 程序执行过程中明确的点，如方法的调用或特定的异常被抛出。\n \n通知（Advice）: 在特定的连接点，AOP框架执行的动作。各种类型的通知包括“around”、“before”和“throws”通知。通知类型将在下面讨论。许多AOP框架包括Spring都是以拦截器做通知模型，维护一个“围绕”连接点的拦截器链。Spring中定义了四个advice: BeforeAdvice, AfterAdvice, ThrowAdvice和DynamicIntroductionAdvice\n \n切入点（Pointcut）: 指定一个通知将被引发的一系列连接点的集合。AOP框架必须允许开发者指定切入点：例如，使用正则表达式。 Spring定义了Pointcut接口，用来组合MethodMatcher和ClassFilter，可以通过名字很清楚的理解， MethodMatcher是用来检查目标类的方法是否可以被应用此通知，而ClassFilter是用来检查Pointcut是否应该应用到目标类上\n \n引入（Introduction）: 添加方法或字段到被通知的类。 Spring允许引入新的接口到任何被通知的对象。例如，你可以使用一个引入使任何对象实现 IsModified接口，来简化缓存。Spring中要使用Introduction, 可有通过DelegatingIntroductionInterceptor来实现通知，通过DefaultIntroductionAdvisor来配置Advice和代理类要实现的接口\n \n目标对象（Target Object）: 包含连接点的对象。也被称作被通知或被代理对象。POJO\n \nAOP代理（AOP Proxy）: AOP框架创建的对象，包含通知。 在Spring中，AOP代理可以是JDK动态代理或者CGLIB代理。\n \n织入（Weaving）: 组装方面来创建一个被通知对象。这可以在编译时完成（例如使用AspectJ编译器），也可以在运行时完成。Spring和其他纯Java AOP框架一样，在运行时完成织入。\n\nSpring AOP组件\n![alt](/img/aop/1.png)\n\n\n### 如何使用Spring AOP\n\n可以通过配置文件或者编程的方式来使用Spring AOP。\n \n配置可以通过xml文件来进行，大概有四种方式：\n\n* 配置ProxyFactoryBean，显式地设置advisors, advice, target等\n* 配置AutoProxyCreator，这种方式下，还是如以前一样使用定义的bean，但是从容器中获得的其实已经是代理对象\n* 通过<aop:config>来配置\n* 通过<aop:aspectj-autoproxy>来配置，使用AspectJ的注解来标识通知及切入点\n \n也可以直接使用ProxyFactory来以编程的方式使用Spring AOP，通过ProxyFactory提供的方法可以设置target对象, advisor等相关配置，最终通过 getProxy()方法来获取代理对象\n\n未完待续......\n\n\n","slug":"spring/aop","published":1,"date":"2018-11-20T14:55:26.984Z","updated":"2018-11-20T14:56:44.105Z","title":"","comments":1,"layout":"post","photos":[],"link":"","_id":"cjopxmsqt0007wfo8b8wvx8tw","content":"<h1><span id=\"面向切面\">面向切面</span></h1><h3><span id=\"什么是aop\">什么是AOP</span></h3><p>AOP（Aspect-OrientedProgramming，面向方面编程），可以说是OOP（Object-Oriented Programing，面向对象编程）的补充和完善。OOP引入封装、继承和多态性等概念来建立一种对象层次结构，用以模拟公共行为的一个集合。当我们需要为分散的对象引入公共行为的时候，OOP则显得无能为力。也就是说，OOP允许你定义从上到下的关系，但并不适合定义从左到右的关系。例如日志功能。日志代码往往水平地散布在所有对象层次中，而与它所散布到的对象的核心功能毫无关系。对于其他类型的代码，如安全性、异常处理和透明的持续性也是如此。这种散布在各处的无关的代码被称为横切（cross-cutting）代码，在OOP设计中，它导致了大量代码的重复，而不利于各个模块的重用。</p>\n<p>而AOP技术则恰恰相反，它利用一种称为“横切”的技术，剖解开封装的对象内部，并将那些影响了多个类的公共行为封装到一个可重用模块，并将其名为“Aspect”，即方面。所谓“方面”，简单地说，就是将那些与业务无关，却为业务模块所共同调用的逻辑或责任封装起来，便于减少系统的重复代码，降低模块间的耦合度，并有利于未来的可操作性和可维护性。AOP代表的是一个横向的关系，如果说“对象”是一个空心的圆柱体，其中封装的是对象的属性和行为；那么面向方面编程的方法，就仿佛一把利刃，将这些空心圆柱体剖开，以获得其内部的消息。而剖开的切面，也就是所谓的“方面”了。然后它又以巧夺天功的妙手将这些剖开的切面复原，不留痕迹。</p>\n<p>使用“横切”技术，AOP把软件系统分为两个部分：核心关注点和横切关注点。业务处理的主要流程是核心关注点，与之关系不大的部分是横切关注点。横切关注点的一个特点是，他们经常发生在核心关注点的多处，而各处都基本相似。比如权限认证、日志、事务处理。Aop 的作用在于分离系统中的各种关注点，将核心关注点和横切关注点分离开来。正如Avanade公司的高级方案构架师Adam Magee所说，AOP的核心思想就是“将应用程序中的商业逻辑同对其提供支持的通用服务进行分离。”</p>\n<p>实现AOP的技术，主要分为两大类：一是采用动态代理技术，利用截取消息的方式，对该消息进行装饰，以取代原有对象行为的执行；二是采用静态织入的方式，引入特定的语法创建“方面”，从而使得编译器可以在编译期间织入有关“方面”的代码。</p>\n<h3><span id=\"aop使用场景\">AOP使用场景</span></h3><p>AOP用来封装横切关注点，具体可以在下面的场景中使用:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Authentication 权限</span><br><span class=\"line\">Caching 缓存</span><br><span class=\"line\">Context passing 内容传递</span><br><span class=\"line\">Error handling 错误处理</span><br><span class=\"line\">Lazy loading　懒加载</span><br><span class=\"line\">Debugging　　调试</span><br><span class=\"line\">logging, tracing, profiling and monitoring　记录跟踪　优化　校准</span><br><span class=\"line\">Performance optimization　性能优化</span><br><span class=\"line\">Persistence　　持久化</span><br><span class=\"line\">Resource pooling　资源池</span><br><span class=\"line\">Synchronization　同步</span><br><span class=\"line\">Transactions 事务</span><br></pre></td></tr></table></figure>\n<h3><span id=\"aop相关概念\">AOP相关概念</span></h3><p>方面（Aspect）：一个关注点的模块化，这个关注点实现可能另外横切多个对象。事务管理是J2EE应用中一个很好的横切关注点例子。方面用Spring的 Advisor或拦截器实现。</p>\n<p>连接点（Joinpoint）: 程序执行过程中明确的点，如方法的调用或特定的异常被抛出。</p>\n<p>通知（Advice）: 在特定的连接点，AOP框架执行的动作。各种类型的通知包括“around”、“before”和“throws”通知。通知类型将在下面讨论。许多AOP框架包括Spring都是以拦截器做通知模型，维护一个“围绕”连接点的拦截器链。Spring中定义了四个advice: BeforeAdvice, AfterAdvice, ThrowAdvice和DynamicIntroductionAdvice</p>\n<p>切入点（Pointcut）: 指定一个通知将被引发的一系列连接点的集合。AOP框架必须允许开发者指定切入点：例如，使用正则表达式。 Spring定义了Pointcut接口，用来组合MethodMatcher和ClassFilter，可以通过名字很清楚的理解， MethodMatcher是用来检查目标类的方法是否可以被应用此通知，而ClassFilter是用来检查Pointcut是否应该应用到目标类上</p>\n<p>引入（Introduction）: 添加方法或字段到被通知的类。 Spring允许引入新的接口到任何被通知的对象。例如，你可以使用一个引入使任何对象实现 IsModified接口，来简化缓存。Spring中要使用Introduction, 可有通过DelegatingIntroductionInterceptor来实现通知，通过DefaultIntroductionAdvisor来配置Advice和代理类要实现的接口</p>\n<p>目标对象（Target Object）: 包含连接点的对象。也被称作被通知或被代理对象。POJO</p>\n<p>AOP代理（AOP Proxy）: AOP框架创建的对象，包含通知。 在Spring中，AOP代理可以是JDK动态代理或者CGLIB代理。</p>\n<p>织入（Weaving）: 组装方面来创建一个被通知对象。这可以在编译时完成（例如使用AspectJ编译器），也可以在运行时完成。Spring和其他纯Java AOP框架一样，在运行时完成织入。</p>\n<p>Spring AOP组件<br><img src=\"/img/aop/1.png\" alt=\"alt\"></p>\n<h3><span id=\"如何使用spring-aop\">如何使用Spring AOP</span></h3><p>可以通过配置文件或者编程的方式来使用Spring AOP。</p>\n<p>配置可以通过xml文件来进行，大概有四种方式：</p>\n<ul>\n<li>配置ProxyFactoryBean，显式地设置advisors, advice, target等</li>\n<li>配置AutoProxyCreator，这种方式下，还是如以前一样使用定义的bean，但是从容器中获得的其实已经是代理对象</li>\n<li>通过<a href=\"aop:config\" target=\"_blank\" rel=\"noopener\">aop:config</a>来配置</li>\n<li>通过<a href=\"aop:aspectj-autoproxy\" target=\"_blank\" rel=\"noopener\">aop:aspectj-autoproxy</a>来配置，使用AspectJ的注解来标识通知及切入点</li>\n</ul>\n<p>也可以直接使用ProxyFactory来以编程的方式使用Spring AOP，通过ProxyFactory提供的方法可以设置target对象, advisor等相关配置，最终通过 getProxy()方法来获取代理对象</p>\n<p>未完待续……</p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"面向切面\"><a href=\"#面向切面\" class=\"headerlink\" title=\"面向切面\"></a>面向切面</h1><h3 id=\"什么是AOP\"><a href=\"#什么是AOP\" class=\"headerlink\" title=\"什么是AOP\"></a>什么是AOP</h3><p>AOP（Aspect-OrientedProgramming，面向方面编程），可以说是OOP（Object-Oriented Programing，面向对象编程）的补充和完善。OOP引入封装、继承和多态性等概念来建立一种对象层次结构，用以模拟公共行为的一个集合。当我们需要为分散的对象引入公共行为的时候，OOP则显得无能为力。也就是说，OOP允许你定义从上到下的关系，但并不适合定义从左到右的关系。例如日志功能。日志代码往往水平地散布在所有对象层次中，而与它所散布到的对象的核心功能毫无关系。对于其他类型的代码，如安全性、异常处理和透明的持续性也是如此。这种散布在各处的无关的代码被称为横切（cross-cutting）代码，在OOP设计中，它导致了大量代码的重复，而不利于各个模块的重用。</p>\n<p>而AOP技术则恰恰相反，它利用一种称为“横切”的技术，剖解开封装的对象内部，并将那些影响了多个类的公共行为封装到一个可重用模块，并将其名为“Aspect”，即方面。所谓“方面”，简单地说，就是将那些与业务无关，却为业务模块所共同调用的逻辑或责任封装起来，便于减少系统的重复代码，降低模块间的耦合度，并有利于未来的可操作性和可维护性。AOP代表的是一个横向的关系，如果说“对象”是一个空心的圆柱体，其中封装的是对象的属性和行为；那么面向方面编程的方法，就仿佛一把利刃，将这些空心圆柱体剖开，以获得其内部的消息。而剖开的切面，也就是所谓的“方面”了。然后它又以巧夺天功的妙手将这些剖开的切面复原，不留痕迹。</p>\n<p>使用“横切”技术，AOP把软件系统分为两个部分：核心关注点和横切关注点。业务处理的主要流程是核心关注点，与之关系不大的部分是横切关注点。横切关注点的一个特点是，他们经常发生在核心关注点的多处，而各处都基本相似。比如权限认证、日志、事务处理。Aop 的作用在于分离系统中的各种关注点，将核心关注点和横切关注点分离开来。正如Avanade公司的高级方案构架师Adam Magee所说，AOP的核心思想就是“将应用程序中的商业逻辑同对其提供支持的通用服务进行分离。”</p>\n<p>实现AOP的技术，主要分为两大类：一是采用动态代理技术，利用截取消息的方式，对该消息进行装饰，以取代原有对象行为的执行；二是采用静态织入的方式，引入特定的语法创建“方面”，从而使得编译器可以在编译期间织入有关“方面”的代码。</p>\n<h3 id=\"AOP使用场景\"><a href=\"#AOP使用场景\" class=\"headerlink\" title=\"AOP使用场景\"></a>AOP使用场景</h3><p>AOP用来封装横切关注点，具体可以在下面的场景中使用:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Authentication 权限</span><br><span class=\"line\">Caching 缓存</span><br><span class=\"line\">Context passing 内容传递</span><br><span class=\"line\">Error handling 错误处理</span><br><span class=\"line\">Lazy loading　懒加载</span><br><span class=\"line\">Debugging　　调试</span><br><span class=\"line\">logging, tracing, profiling and monitoring　记录跟踪　优化　校准</span><br><span class=\"line\">Performance optimization　性能优化</span><br><span class=\"line\">Persistence　　持久化</span><br><span class=\"line\">Resource pooling　资源池</span><br><span class=\"line\">Synchronization　同步</span><br><span class=\"line\">Transactions 事务</span><br></pre></td></tr></table></figure>\n<h3 id=\"AOP相关概念\"><a href=\"#AOP相关概念\" class=\"headerlink\" title=\"AOP相关概念\"></a>AOP相关概念</h3><p>方面（Aspect）：一个关注点的模块化，这个关注点实现可能另外横切多个对象。事务管理是J2EE应用中一个很好的横切关注点例子。方面用Spring的 Advisor或拦截器实现。</p>\n<p>连接点（Joinpoint）: 程序执行过程中明确的点，如方法的调用或特定的异常被抛出。</p>\n<p>通知（Advice）: 在特定的连接点，AOP框架执行的动作。各种类型的通知包括“around”、“before”和“throws”通知。通知类型将在下面讨论。许多AOP框架包括Spring都是以拦截器做通知模型，维护一个“围绕”连接点的拦截器链。Spring中定义了四个advice: BeforeAdvice, AfterAdvice, ThrowAdvice和DynamicIntroductionAdvice</p>\n<p>切入点（Pointcut）: 指定一个通知将被引发的一系列连接点的集合。AOP框架必须允许开发者指定切入点：例如，使用正则表达式。 Spring定义了Pointcut接口，用来组合MethodMatcher和ClassFilter，可以通过名字很清楚的理解， MethodMatcher是用来检查目标类的方法是否可以被应用此通知，而ClassFilter是用来检查Pointcut是否应该应用到目标类上</p>\n<p>引入（Introduction）: 添加方法或字段到被通知的类。 Spring允许引入新的接口到任何被通知的对象。例如，你可以使用一个引入使任何对象实现 IsModified接口，来简化缓存。Spring中要使用Introduction, 可有通过DelegatingIntroductionInterceptor来实现通知，通过DefaultIntroductionAdvisor来配置Advice和代理类要实现的接口</p>\n<p>目标对象（Target Object）: 包含连接点的对象。也被称作被通知或被代理对象。POJO</p>\n<p>AOP代理（AOP Proxy）: AOP框架创建的对象，包含通知。 在Spring中，AOP代理可以是JDK动态代理或者CGLIB代理。</p>\n<p>织入（Weaving）: 组装方面来创建一个被通知对象。这可以在编译时完成（例如使用AspectJ编译器），也可以在运行时完成。Spring和其他纯Java AOP框架一样，在运行时完成织入。</p>\n<p>Spring AOP组件<br><img src=\"/img/aop/1.png\" alt=\"alt\"></p>\n<h3 id=\"如何使用Spring-AOP\"><a href=\"#如何使用Spring-AOP\" class=\"headerlink\" title=\"如何使用Spring AOP\"></a>如何使用Spring AOP</h3><p>可以通过配置文件或者编程的方式来使用Spring AOP。</p>\n<p>配置可以通过xml文件来进行，大概有四种方式：</p>\n<ul>\n<li>配置ProxyFactoryBean，显式地设置advisors, advice, target等</li>\n<li>配置AutoProxyCreator，这种方式下，还是如以前一样使用定义的bean，但是从容器中获得的其实已经是代理对象</li>\n<li>通过<a href=\"aop:config\" target=\"_blank\" rel=\"noopener\">aop:config</a>来配置</li>\n<li>通过<a href=\"aop:aspectj-autoproxy\" target=\"_blank\" rel=\"noopener\">aop:aspectj-autoproxy</a>来配置，使用AspectJ的注解来标识通知及切入点</li>\n</ul>\n<p>也可以直接使用ProxyFactory来以编程的方式使用Spring AOP，通过ProxyFactory提供的方法可以设置target对象, advisor等相关配置，最终通过 getProxy()方法来获取代理对象</p>\n<p>未完待续……</p>\n"},{"_content":"\t⁃\t# 构建Spring Framework\n\n### gradle 构建\n\n* 安装jdk，设置JAVA_HOME\n* 安装[gradle](http://www.gradle.org/downloads)\n* gradle init 初始化\n* 设置如下依赖\n\n```gradle\ndependencies {\n    compile 'org.springframework:spring-context:4.3.1.RELEASE'\n}\n```\n\n### maven 构建\n\n* 安装jdk，设置JAVA_HOME\n* 安装[maven](http://maven.apache.org/download.cgi) 设置M2_HOME\n* mvn 初始化\n\n```\nmvn archetype:generate -DgroupId=com.mailejifen.oauth -DartifactId=oauth -DarchetypeArtifactId=maven-archetype-webapp -DinteractiveMode=false\n\n```\n\n* mvn 增加Spring Framework依赖\n\n```xml\n<dependencies>\n    <dependency>\n        <groupId>org.springframework</groupId>\n        <artifactId>spring-context</artifactId>\n        <version>4.3.1.RELEASE</version>\n    </dependency>\n</dependencies>\n```\n\n\n","source":"_posts/spring/build-spring.md","raw":"\t⁃\t# 构建Spring Framework\n\n### gradle 构建\n\n* 安装jdk，设置JAVA_HOME\n* 安装[gradle](http://www.gradle.org/downloads)\n* gradle init 初始化\n* 设置如下依赖\n\n```gradle\ndependencies {\n    compile 'org.springframework:spring-context:4.3.1.RELEASE'\n}\n```\n\n### maven 构建\n\n* 安装jdk，设置JAVA_HOME\n* 安装[maven](http://maven.apache.org/download.cgi) 设置M2_HOME\n* mvn 初始化\n\n```\nmvn archetype:generate -DgroupId=com.mailejifen.oauth -DartifactId=oauth -DarchetypeArtifactId=maven-archetype-webapp -DinteractiveMode=false\n\n```\n\n* mvn 增加Spring Framework依赖\n\n```xml\n<dependencies>\n    <dependency>\n        <groupId>org.springframework</groupId>\n        <artifactId>spring-context</artifactId>\n        <version>4.3.1.RELEASE</version>\n    </dependency>\n</dependencies>\n```\n\n\n","slug":"spring/build-spring","published":1,"date":"2018-11-20T14:55:26.984Z","updated":"2018-11-20T14:56:53.239Z","title":"","comments":1,"layout":"post","photos":[],"link":"","_id":"cjopxmsqu0008wfo8y18xmk1a","content":"<p>⁃    # 构建Spring Framework</p>\n<h3><span id=\"gradle-构建\">gradle 构建</span></h3><ul>\n<li>安装jdk，设置JAVA_HOME</li>\n<li>安装<a href=\"http://www.gradle.org/downloads\" target=\"_blank\" rel=\"noopener\">gradle</a></li>\n<li>gradle init 初始化</li>\n<li>设置如下依赖</li>\n</ul>\n<figure class=\"highlight gradle\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">dependencies</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">compile</span> <span class=\"string\">'org.springframework:spring-context:4.3.1.RELEASE'</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3><span id=\"maven-构建\">maven 构建</span></h3><ul>\n<li>安装jdk，设置JAVA_HOME</li>\n<li>安装<a href=\"http://maven.apache.org/download.cgi\" target=\"_blank\" rel=\"noopener\">maven</a> 设置M2_HOME</li>\n<li>mvn 初始化</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mvn archetype:generate -DgroupId=com.mailejifen.oauth -DartifactId=oauth -DarchetypeArtifactId=maven-archetype-webapp -DinteractiveMode=false</span><br></pre></td></tr></table></figure>\n<ul>\n<li>mvn 增加Spring Framework依赖</li>\n</ul>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependencies</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-context<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>4.3.1.RELEASE<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<p>⁃    # 构建Spring Framework</p>\n<h3 id=\"gradle-构建\"><a href=\"#gradle-构建\" class=\"headerlink\" title=\"gradle 构建\"></a>gradle 构建</h3><ul>\n<li>安装jdk，设置JAVA_HOME</li>\n<li>安装<a href=\"http://www.gradle.org/downloads\" target=\"_blank\" rel=\"noopener\">gradle</a></li>\n<li>gradle init 初始化</li>\n<li>设置如下依赖</li>\n</ul>\n<figure class=\"highlight gradle\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">dependencies</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">compile</span> <span class=\"string\">'org.springframework:spring-context:4.3.1.RELEASE'</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"maven-构建\"><a href=\"#maven-构建\" class=\"headerlink\" title=\"maven 构建\"></a>maven 构建</h3><ul>\n<li>安装jdk，设置JAVA_HOME</li>\n<li>安装<a href=\"http://maven.apache.org/download.cgi\" target=\"_blank\" rel=\"noopener\">maven</a> 设置M2_HOME</li>\n<li>mvn 初始化</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mvn archetype:generate -DgroupId=com.mailejifen.oauth -DartifactId=oauth -DarchetypeArtifactId=maven-archetype-webapp -DinteractiveMode=false</span><br></pre></td></tr></table></figure>\n<ul>\n<li>mvn 增加Spring Framework依赖</li>\n</ul>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependencies</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-context<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>4.3.1.RELEASE<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure>\n"},{"_content":"# IoC && DI\n\n##前言\n学习过Spring框架的人一定都会听过Spring的IoC(控制反转) 、DI(依赖注入)这两个概念，对于初学Spring的人来说，总觉得IoC 、DI这两个概念是模糊不清的，是很难理解的，今天和大家分享网上的一些技术大牛们对Spring框架的IOC和DI的理解以及谈谈我对Ioc和DI的理解。\n\n* [开涛的分享](http://jinnianshilongnian.iteye.com/blog/1413846)\n\n## IOC\n### 是什么？\nIoc—Inversion of Control，即“控制反转”，不是什么技术，而是一种设计思想。在Java开发中，Ioc意味着将你设计好的对象交给容器控制，而不是传统的在你的对象内部直接控制。如何理解好Ioc呢？理解好Ioc的关键是要明确“谁控制谁，控制什么，为何是反转（有反转就应该有正转了），哪些方面反转了”，那我们来深入分析一下：\n\n* 谁控制谁，控制什么：传统Java SE程序设计，我们直接在对象内部通过new进行创建对象，是程序主动去创建依赖对象；而IoC是有专门一个容器来创建这些对象，即由Ioc容器来控制对 象的创建；谁控制谁？当然是IoC 容器控制了对象；控制什么？那就是主要控制了外部资源获取（不只是对象包括比如文件等）。\n\n* 为何是反转，哪些方面反转了：有反转就有正转，传统应用程序是由我们自己在对象中主动控制去直接获取依赖对象，也就是正转；而反转则是由容器来帮忙创建及注入依赖对象；为何是反转？因为由容器帮我们查找及注入依赖对象，对象只是被动的接受依赖对象，所以是反转；哪些方面反转了？依赖对象的获取被反转了。\n\n先看下传统程序设计，都是主动创建对象实例进行组装\n![alt](/img/ioc/1.jpg)\n\n当有了IoC/DI的容器后，在客户端类中不再主动去创建这些对象了\n![alt](/img/ioc/2.jpg)\n\n### 能做什么\n　IoC 不是一种技术，只是一种思想，一个重要的面向对象编程的法则，它能指导我们如何设计出松耦合、更优良的程序。传统应用程序都是由我们在类内部主动创建依赖对象，从而导致类与类之间高耦合，难于测试；有了IoC容器后，把创建和查找依赖对象的控制权交给了容器，由容器进行注入组合对象，所以对象与对象之间是 松散耦合，这样也方便测试，利于功能复用，更重要的是使得程序的整个体系结构变得非常灵活。\n\n　　其实IoC对编程带来的最大改变不是从代码上，而是从思想上，发生了“主从换位”的变化。应用程序原本是老大，要获取什么资源都是主动出击，但是在IoC/DI思想中，应用程序就变成被动的了，被动的等待IoC容器来创建并注入它所需要的资源了。\n\n　　IoC很好的体现了面向对象设计法则之一—— 好莱坞法则：“别找我们，我们找你”；即由IoC容器帮对象找相应的依赖对象并注入，而不是由对象主动去找。\n\n## DI\nDI—Dependency Injection，即“依赖注入”：组件之间依赖关系由容器在运行期决定，形象的说，即由容器动态的将某个依赖关系注入到组件之中。依赖注入的目的并非为软件系统带来更多功能，而是为了提升组件重用的频率，并为系统搭建一个灵活、可扩展的平台。通过依赖注入机制，我们只需要通过简单的配置，而无需任何代码就可指定目标需要的资源，完成自身的业务逻辑，而不需要关心具体的资源来自何处，由谁实现。\n\n理解DI的关键是：“谁依赖谁，为什么需要依赖，谁注入谁，注入了什么”，那我们来深入分析一下：\n \n●谁依赖于谁：当然是应用程序依赖于IoC容器；\n●为什么需要依赖：应用程序需要IoC容器来提供对象需要的外部资源；\n●谁注入谁：很明显是IoC容器注入应用程序某个对象，应用程序依赖的对象；\n●注入了什么：就是注入某个对象所需要的外部资源（包括对象、资源、常量数据）。\n\n## IOC和DI\n\nIoC和DI由什么关系呢？其实它们是同一个概念的不同角度描述，由于控制反转概念比较含糊（可能只是理解为容器控制对象这一个层面，很难让人想到谁来维护对象关系），所以2004年大师级人物Martin Fowler又给出了一个新的名字：“依赖注入”，相对IoC 而言，“依赖注入”明确描述了“被注入对象依赖IoC容器配置依赖对象”。\n\n\n## 我对IOC和DI的理解\n在日常的开发过程中，我们在实现某个业务场景时候，往往需要多个对象支撑业务构建，在没有使用IOC和DI的时候，我们需要在对象中使用合作对象，均通过new object()的方式动态创建出来，这个时候A要使用B就产生了强依赖，A和B产生了紧密耦合。\n在Spring中，这一切由spring帮助我们实现，我们只需要在A中告诉spring需要一个B的connection，至于它如何构造，何时构造，A不需要知道。在系统运行时候，spring会在适当时候制造一个Connection，注入到A中。\n这个时候所有的依赖关系都变了，全部依赖IOC容器，将以前创建对象的主动权和时机移交给IOC容器。\n\n\n## 附录\n注：如果想要更加深入的了解IoC和DI，请参考大师级人物Martin Fowler的一篇经典文章[《Inversion of Control Containers and the Dependency Injection pattern》](http://www.martinfowler.com/articles/injection.html)\n\n\n","source":"_posts/spring/ioc_di.md","raw":"# IoC && DI\n\n##前言\n学习过Spring框架的人一定都会听过Spring的IoC(控制反转) 、DI(依赖注入)这两个概念，对于初学Spring的人来说，总觉得IoC 、DI这两个概念是模糊不清的，是很难理解的，今天和大家分享网上的一些技术大牛们对Spring框架的IOC和DI的理解以及谈谈我对Ioc和DI的理解。\n\n* [开涛的分享](http://jinnianshilongnian.iteye.com/blog/1413846)\n\n## IOC\n### 是什么？\nIoc—Inversion of Control，即“控制反转”，不是什么技术，而是一种设计思想。在Java开发中，Ioc意味着将你设计好的对象交给容器控制，而不是传统的在你的对象内部直接控制。如何理解好Ioc呢？理解好Ioc的关键是要明确“谁控制谁，控制什么，为何是反转（有反转就应该有正转了），哪些方面反转了”，那我们来深入分析一下：\n\n* 谁控制谁，控制什么：传统Java SE程序设计，我们直接在对象内部通过new进行创建对象，是程序主动去创建依赖对象；而IoC是有专门一个容器来创建这些对象，即由Ioc容器来控制对 象的创建；谁控制谁？当然是IoC 容器控制了对象；控制什么？那就是主要控制了外部资源获取（不只是对象包括比如文件等）。\n\n* 为何是反转，哪些方面反转了：有反转就有正转，传统应用程序是由我们自己在对象中主动控制去直接获取依赖对象，也就是正转；而反转则是由容器来帮忙创建及注入依赖对象；为何是反转？因为由容器帮我们查找及注入依赖对象，对象只是被动的接受依赖对象，所以是反转；哪些方面反转了？依赖对象的获取被反转了。\n\n先看下传统程序设计，都是主动创建对象实例进行组装\n![alt](/img/ioc/1.jpg)\n\n当有了IoC/DI的容器后，在客户端类中不再主动去创建这些对象了\n![alt](/img/ioc/2.jpg)\n\n### 能做什么\n　IoC 不是一种技术，只是一种思想，一个重要的面向对象编程的法则，它能指导我们如何设计出松耦合、更优良的程序。传统应用程序都是由我们在类内部主动创建依赖对象，从而导致类与类之间高耦合，难于测试；有了IoC容器后，把创建和查找依赖对象的控制权交给了容器，由容器进行注入组合对象，所以对象与对象之间是 松散耦合，这样也方便测试，利于功能复用，更重要的是使得程序的整个体系结构变得非常灵活。\n\n　　其实IoC对编程带来的最大改变不是从代码上，而是从思想上，发生了“主从换位”的变化。应用程序原本是老大，要获取什么资源都是主动出击，但是在IoC/DI思想中，应用程序就变成被动的了，被动的等待IoC容器来创建并注入它所需要的资源了。\n\n　　IoC很好的体现了面向对象设计法则之一—— 好莱坞法则：“别找我们，我们找你”；即由IoC容器帮对象找相应的依赖对象并注入，而不是由对象主动去找。\n\n## DI\nDI—Dependency Injection，即“依赖注入”：组件之间依赖关系由容器在运行期决定，形象的说，即由容器动态的将某个依赖关系注入到组件之中。依赖注入的目的并非为软件系统带来更多功能，而是为了提升组件重用的频率，并为系统搭建一个灵活、可扩展的平台。通过依赖注入机制，我们只需要通过简单的配置，而无需任何代码就可指定目标需要的资源，完成自身的业务逻辑，而不需要关心具体的资源来自何处，由谁实现。\n\n理解DI的关键是：“谁依赖谁，为什么需要依赖，谁注入谁，注入了什么”，那我们来深入分析一下：\n \n●谁依赖于谁：当然是应用程序依赖于IoC容器；\n●为什么需要依赖：应用程序需要IoC容器来提供对象需要的外部资源；\n●谁注入谁：很明显是IoC容器注入应用程序某个对象，应用程序依赖的对象；\n●注入了什么：就是注入某个对象所需要的外部资源（包括对象、资源、常量数据）。\n\n## IOC和DI\n\nIoC和DI由什么关系呢？其实它们是同一个概念的不同角度描述，由于控制反转概念比较含糊（可能只是理解为容器控制对象这一个层面，很难让人想到谁来维护对象关系），所以2004年大师级人物Martin Fowler又给出了一个新的名字：“依赖注入”，相对IoC 而言，“依赖注入”明确描述了“被注入对象依赖IoC容器配置依赖对象”。\n\n\n## 我对IOC和DI的理解\n在日常的开发过程中，我们在实现某个业务场景时候，往往需要多个对象支撑业务构建，在没有使用IOC和DI的时候，我们需要在对象中使用合作对象，均通过new object()的方式动态创建出来，这个时候A要使用B就产生了强依赖，A和B产生了紧密耦合。\n在Spring中，这一切由spring帮助我们实现，我们只需要在A中告诉spring需要一个B的connection，至于它如何构造，何时构造，A不需要知道。在系统运行时候，spring会在适当时候制造一个Connection，注入到A中。\n这个时候所有的依赖关系都变了，全部依赖IOC容器，将以前创建对象的主动权和时机移交给IOC容器。\n\n\n## 附录\n注：如果想要更加深入的了解IoC和DI，请参考大师级人物Martin Fowler的一篇经典文章[《Inversion of Control Containers and the Dependency Injection pattern》](http://www.martinfowler.com/articles/injection.html)\n\n\n","slug":"spring/ioc_di","published":1,"date":"2018-11-20T14:55:26.989Z","updated":"2018-11-20T14:57:20.314Z","title":"","comments":1,"layout":"post","photos":[],"link":"","_id":"cjopxmsqv0009wfo8zv9v793l","content":"<h1><span id=\"ioc-ampamp-di\">IoC &amp;&amp; DI</span></h1><p>##前言<br>学习过Spring框架的人一定都会听过Spring的IoC(控制反转) 、DI(依赖注入)这两个概念，对于初学Spring的人来说，总觉得IoC 、DI这两个概念是模糊不清的，是很难理解的，今天和大家分享网上的一些技术大牛们对Spring框架的IOC和DI的理解以及谈谈我对Ioc和DI的理解。</p>\n<ul>\n<li><a href=\"http://jinnianshilongnian.iteye.com/blog/1413846\" target=\"_blank\" rel=\"noopener\">开涛的分享</a></li>\n</ul>\n<h2><span id=\"ioc\">IOC</span></h2><h3><span id=\"是什么\">是什么？</span></h3><p>Ioc—Inversion of Control，即“控制反转”，不是什么技术，而是一种设计思想。在Java开发中，Ioc意味着将你设计好的对象交给容器控制，而不是传统的在你的对象内部直接控制。如何理解好Ioc呢？理解好Ioc的关键是要明确“谁控制谁，控制什么，为何是反转（有反转就应该有正转了），哪些方面反转了”，那我们来深入分析一下：</p>\n<ul>\n<li><p>谁控制谁，控制什么：传统Java SE程序设计，我们直接在对象内部通过new进行创建对象，是程序主动去创建依赖对象；而IoC是有专门一个容器来创建这些对象，即由Ioc容器来控制对 象的创建；谁控制谁？当然是IoC 容器控制了对象；控制什么？那就是主要控制了外部资源获取（不只是对象包括比如文件等）。</p>\n</li>\n<li><p>为何是反转，哪些方面反转了：有反转就有正转，传统应用程序是由我们自己在对象中主动控制去直接获取依赖对象，也就是正转；而反转则是由容器来帮忙创建及注入依赖对象；为何是反转？因为由容器帮我们查找及注入依赖对象，对象只是被动的接受依赖对象，所以是反转；哪些方面反转了？依赖对象的获取被反转了。</p>\n</li>\n</ul>\n<p>先看下传统程序设计，都是主动创建对象实例进行组装<br><img src=\"/img/ioc/1.jpg\" alt=\"alt\"></p>\n<p>当有了IoC/DI的容器后，在客户端类中不再主动去创建这些对象了<br><img src=\"/img/ioc/2.jpg\" alt=\"alt\"></p>\n<h3><span id=\"能做什么\">能做什么</span></h3><p>　IoC 不是一种技术，只是一种思想，一个重要的面向对象编程的法则，它能指导我们如何设计出松耦合、更优良的程序。传统应用程序都是由我们在类内部主动创建依赖对象，从而导致类与类之间高耦合，难于测试；有了IoC容器后，把创建和查找依赖对象的控制权交给了容器，由容器进行注入组合对象，所以对象与对象之间是 松散耦合，这样也方便测试，利于功能复用，更重要的是使得程序的整个体系结构变得非常灵活。</p>\n<p>　　其实IoC对编程带来的最大改变不是从代码上，而是从思想上，发生了“主从换位”的变化。应用程序原本是老大，要获取什么资源都是主动出击，但是在IoC/DI思想中，应用程序就变成被动的了，被动的等待IoC容器来创建并注入它所需要的资源了。</p>\n<p>　　IoC很好的体现了面向对象设计法则之一—— 好莱坞法则：“别找我们，我们找你”；即由IoC容器帮对象找相应的依赖对象并注入，而不是由对象主动去找。</p>\n<h2><span id=\"di\">DI</span></h2><p>DI—Dependency Injection，即“依赖注入”：组件之间依赖关系由容器在运行期决定，形象的说，即由容器动态的将某个依赖关系注入到组件之中。依赖注入的目的并非为软件系统带来更多功能，而是为了提升组件重用的频率，并为系统搭建一个灵活、可扩展的平台。通过依赖注入机制，我们只需要通过简单的配置，而无需任何代码就可指定目标需要的资源，完成自身的业务逻辑，而不需要关心具体的资源来自何处，由谁实现。</p>\n<p>理解DI的关键是：“谁依赖谁，为什么需要依赖，谁注入谁，注入了什么”，那我们来深入分析一下：</p>\n<p>●谁依赖于谁：当然是应用程序依赖于IoC容器；<br>●为什么需要依赖：应用程序需要IoC容器来提供对象需要的外部资源；<br>●谁注入谁：很明显是IoC容器注入应用程序某个对象，应用程序依赖的对象；<br>●注入了什么：就是注入某个对象所需要的外部资源（包括对象、资源、常量数据）。</p>\n<h2><span id=\"ioc和di\">IOC和DI</span></h2><p>IoC和DI由什么关系呢？其实它们是同一个概念的不同角度描述，由于控制反转概念比较含糊（可能只是理解为容器控制对象这一个层面，很难让人想到谁来维护对象关系），所以2004年大师级人物Martin Fowler又给出了一个新的名字：“依赖注入”，相对IoC 而言，“依赖注入”明确描述了“被注入对象依赖IoC容器配置依赖对象”。</p>\n<h2><span id=\"我对ioc和di的理解\">我对IOC和DI的理解</span></h2><p>在日常的开发过程中，我们在实现某个业务场景时候，往往需要多个对象支撑业务构建，在没有使用IOC和DI的时候，我们需要在对象中使用合作对象，均通过new object()的方式动态创建出来，这个时候A要使用B就产生了强依赖，A和B产生了紧密耦合。<br>在Spring中，这一切由spring帮助我们实现，我们只需要在A中告诉spring需要一个B的connection，至于它如何构造，何时构造，A不需要知道。在系统运行时候，spring会在适当时候制造一个Connection，注入到A中。<br>这个时候所有的依赖关系都变了，全部依赖IOC容器，将以前创建对象的主动权和时机移交给IOC容器。</p>\n<h2><span id=\"附录\">附录</span></h2><p>注：如果想要更加深入的了解IoC和DI，请参考大师级人物Martin Fowler的一篇经典文章<a href=\"http://www.martinfowler.com/articles/injection.html\" target=\"_blank\" rel=\"noopener\">《Inversion of Control Containers and the Dependency Injection pattern》</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"IoC-amp-amp-DI\"><a href=\"#IoC-amp-amp-DI\" class=\"headerlink\" title=\"IoC &amp;&amp; DI\"></a>IoC &amp;&amp; DI</h1><p>##前言<br>学习过Spring框架的人一定都会听过Spring的IoC(控制反转) 、DI(依赖注入)这两个概念，对于初学Spring的人来说，总觉得IoC 、DI这两个概念是模糊不清的，是很难理解的，今天和大家分享网上的一些技术大牛们对Spring框架的IOC和DI的理解以及谈谈我对Ioc和DI的理解。</p>\n<ul>\n<li><a href=\"http://jinnianshilongnian.iteye.com/blog/1413846\" target=\"_blank\" rel=\"noopener\">开涛的分享</a></li>\n</ul>\n<h2 id=\"IOC\"><a href=\"#IOC\" class=\"headerlink\" title=\"IOC\"></a>IOC</h2><h3 id=\"是什么？\"><a href=\"#是什么？\" class=\"headerlink\" title=\"是什么？\"></a>是什么？</h3><p>Ioc—Inversion of Control，即“控制反转”，不是什么技术，而是一种设计思想。在Java开发中，Ioc意味着将你设计好的对象交给容器控制，而不是传统的在你的对象内部直接控制。如何理解好Ioc呢？理解好Ioc的关键是要明确“谁控制谁，控制什么，为何是反转（有反转就应该有正转了），哪些方面反转了”，那我们来深入分析一下：</p>\n<ul>\n<li><p>谁控制谁，控制什么：传统Java SE程序设计，我们直接在对象内部通过new进行创建对象，是程序主动去创建依赖对象；而IoC是有专门一个容器来创建这些对象，即由Ioc容器来控制对 象的创建；谁控制谁？当然是IoC 容器控制了对象；控制什么？那就是主要控制了外部资源获取（不只是对象包括比如文件等）。</p>\n</li>\n<li><p>为何是反转，哪些方面反转了：有反转就有正转，传统应用程序是由我们自己在对象中主动控制去直接获取依赖对象，也就是正转；而反转则是由容器来帮忙创建及注入依赖对象；为何是反转？因为由容器帮我们查找及注入依赖对象，对象只是被动的接受依赖对象，所以是反转；哪些方面反转了？依赖对象的获取被反转了。</p>\n</li>\n</ul>\n<p>先看下传统程序设计，都是主动创建对象实例进行组装<br><img src=\"/img/ioc/1.jpg\" alt=\"alt\"></p>\n<p>当有了IoC/DI的容器后，在客户端类中不再主动去创建这些对象了<br><img src=\"/img/ioc/2.jpg\" alt=\"alt\"></p>\n<h3 id=\"能做什么\"><a href=\"#能做什么\" class=\"headerlink\" title=\"能做什么\"></a>能做什么</h3><p>　IoC 不是一种技术，只是一种思想，一个重要的面向对象编程的法则，它能指导我们如何设计出松耦合、更优良的程序。传统应用程序都是由我们在类内部主动创建依赖对象，从而导致类与类之间高耦合，难于测试；有了IoC容器后，把创建和查找依赖对象的控制权交给了容器，由容器进行注入组合对象，所以对象与对象之间是 松散耦合，这样也方便测试，利于功能复用，更重要的是使得程序的整个体系结构变得非常灵活。</p>\n<p>　　其实IoC对编程带来的最大改变不是从代码上，而是从思想上，发生了“主从换位”的变化。应用程序原本是老大，要获取什么资源都是主动出击，但是在IoC/DI思想中，应用程序就变成被动的了，被动的等待IoC容器来创建并注入它所需要的资源了。</p>\n<p>　　IoC很好的体现了面向对象设计法则之一—— 好莱坞法则：“别找我们，我们找你”；即由IoC容器帮对象找相应的依赖对象并注入，而不是由对象主动去找。</p>\n<h2 id=\"DI\"><a href=\"#DI\" class=\"headerlink\" title=\"DI\"></a>DI</h2><p>DI—Dependency Injection，即“依赖注入”：组件之间依赖关系由容器在运行期决定，形象的说，即由容器动态的将某个依赖关系注入到组件之中。依赖注入的目的并非为软件系统带来更多功能，而是为了提升组件重用的频率，并为系统搭建一个灵活、可扩展的平台。通过依赖注入机制，我们只需要通过简单的配置，而无需任何代码就可指定目标需要的资源，完成自身的业务逻辑，而不需要关心具体的资源来自何处，由谁实现。</p>\n<p>理解DI的关键是：“谁依赖谁，为什么需要依赖，谁注入谁，注入了什么”，那我们来深入分析一下：</p>\n<p>●谁依赖于谁：当然是应用程序依赖于IoC容器；<br>●为什么需要依赖：应用程序需要IoC容器来提供对象需要的外部资源；<br>●谁注入谁：很明显是IoC容器注入应用程序某个对象，应用程序依赖的对象；<br>●注入了什么：就是注入某个对象所需要的外部资源（包括对象、资源、常量数据）。</p>\n<h2 id=\"IOC和DI\"><a href=\"#IOC和DI\" class=\"headerlink\" title=\"IOC和DI\"></a>IOC和DI</h2><p>IoC和DI由什么关系呢？其实它们是同一个概念的不同角度描述，由于控制反转概念比较含糊（可能只是理解为容器控制对象这一个层面，很难让人想到谁来维护对象关系），所以2004年大师级人物Martin Fowler又给出了一个新的名字：“依赖注入”，相对IoC 而言，“依赖注入”明确描述了“被注入对象依赖IoC容器配置依赖对象”。</p>\n<h2 id=\"我对IOC和DI的理解\"><a href=\"#我对IOC和DI的理解\" class=\"headerlink\" title=\"我对IOC和DI的理解\"></a>我对IOC和DI的理解</h2><p>在日常的开发过程中，我们在实现某个业务场景时候，往往需要多个对象支撑业务构建，在没有使用IOC和DI的时候，我们需要在对象中使用合作对象，均通过new object()的方式动态创建出来，这个时候A要使用B就产生了强依赖，A和B产生了紧密耦合。<br>在Spring中，这一切由spring帮助我们实现，我们只需要在A中告诉spring需要一个B的connection，至于它如何构造，何时构造，A不需要知道。在系统运行时候，spring会在适当时候制造一个Connection，注入到A中。<br>这个时候所有的依赖关系都变了，全部依赖IOC容器，将以前创建对象的主动权和时机移交给IOC容器。</p>\n<h2 id=\"附录\"><a href=\"#附录\" class=\"headerlink\" title=\"附录\"></a>附录</h2><p>注：如果想要更加深入的了解IoC和DI，请参考大师级人物Martin Fowler的一篇经典文章<a href=\"http://www.martinfowler.com/articles/injection.html\" target=\"_blank\" rel=\"noopener\">《Inversion of Control Containers and the Dependency Injection pattern》</a></p>\n"},{"_content":"# Spring Boot应用启动器基本的一共有44种，具体如下：\n\n1）spring-boot-starter \n这是Spring Boot的核心启动器，包含了自动配置、日志和YAML。\n\n2）spring-boot-starter-actuator \n帮助监控和管理应用。\n\n3）spring-boot-starter-amqp \n通过spring-rabbit来支持AMQP协议（Advanced Message Queuing Protocol）。\n\n4）spring-boot-starter-aop \n支持面向方面的编程即AOP，包括spring-aop和AspectJ。\n\n5）spring-boot-starter-artemis \n通过Apache Artemis支持JMS的API（Java Message Service API）。\n\n6）spring-boot-starter-batch \n支持Spring Batch，包括HSQLDB数据库。\n\n7）spring-boot-starter-cache \n支持Spring的Cache抽象。\n\n8）spring-boot-starter-cloud-connectors \n支持Spring Cloud Connectors，简化了在像Cloud Foundry或Heroku这样的云平台上连接服务。\n\n9）spring-boot-starter-data-elasticsearch \n支持ElasticSearch搜索和分析引擎，包括spring-data-elasticsearch。\n\n10）spring-boot-starter-data-gemfire \n支持GemFire分布式数据存储，包括spring-data-gemfire。\n\n11）spring-boot-starter-data-jpa \n支持JPA（Java Persistence API），包括spring-data-jpa、spring-orm、Hibernate。\n\n12）spring-boot-starter-data-mongodb \n支持MongoDB数据，包括spring-data-mongodb。\n\n13）spring-boot-starter-data-rest \n通过spring-data-rest-webmvc，支持通过REST暴露Spring Data数据仓库。\n\n14）spring-boot-starter-data-solr \n支持Apache Solr搜索平台，包括spring-data-solr。\n\n15）spring-boot-starter-freemarker \n支持FreeMarker模板引擎。\n\n16）spring-boot-starter-groovy-templates \n支持Groovy模板引擎。\n\n17）spring-boot-starter-hateoas \n通过spring-hateoas支持基于HATEOAS的RESTful Web服务。\n\n18）spring-boot-starter-hornetq \n通过HornetQ支持JMS。\n\n19）spring-boot-starter-integration \n支持通用的spring-integration模块。\n\n20）spring-boot-starter-jdbc \n支持JDBC数据库。\n\n21）spring-boot-starter-jersey \n支持Jersey RESTful Web服务框架。\n\n22）spring-boot-starter-jta-atomikos \n通过Atomikos支持JTA分布式事务处理。\n\n23）spring-boot-starter-jta-bitronix \n通过Bitronix支持JTA分布式事务处理。\n\n24）spring-boot-starter-mail \n支持javax.mail模块。\n\n25）spring-boot-starter-mobile \n支持spring-mobile。\n\n26）spring-boot-starter-mustache \n支持Mustache模板引擎。\n\n27）spring-boot-starter-redis \n支持Redis键值存储数据库，包括spring-redis。\n\n28）spring-boot-starter-security \n支持spring-security。\n\n29）spring-boot-starter-social-facebook \n支持spring-social-facebook\n\n30）spring-boot-starter-social-linkedin \n支持pring-social-linkedin\n\n31）spring-boot-starter-social-twitter \n支持pring-social-twitter\n\n32）spring-boot-starter-test \n支持常规的测试依赖，包括JUnit、Hamcrest、Mockito以及spring-test模块。\n\n33）spring-boot-starter-thymeleaf \n支持Thymeleaf模板引擎，包括与Spring的集成。\n\n34）spring-boot-starter-velocity \n支持Velocity模板引擎。\n\n35）spring-boot-starter-web \nS支持全栈式Web开发，包括Tomcat和spring-webmvc。\n\n36）spring-boot-starter-websocket \n支持WebSocket开发。\n\n37）spring-boot-starter-ws \n支持Spring Web Services。\n\nSpring Boot应用启动器面向生产环境的还有2种，具体如下：\n\n1）spring-boot-starter-actuator \n增加了面向产品上线相关的功能，比如测量和监控。\n\n2）spring-boot-starter-remote-shell \n增加了远程ssh shell的支持。\n\n最后，Spring Boot应用启动器还有一些替换技术的启动器，具体如下：\n\n1）spring-boot-starter-jetty \n引入了Jetty HTTP引擎（用于替换Tomcat）。\n\n2）spring-boot-starter-log4j \n支持Log4J日志框架。\n\n3）spring-boot-starter-logging \n引入了Spring Boot默认的日志框架Logback。\n\n4）spring-boot-starter-tomcat \n引入了Spring Boot默认的HTTP引擎Tomcat。\n\n5）spring-boot-starter-undertow \n引入了Undertow HTTP引擎（用于替换Tomcat）。\n\n# 启动器详解","source":"_posts/spring-boot/starter.md","raw":"# Spring Boot应用启动器基本的一共有44种，具体如下：\n\n1）spring-boot-starter \n这是Spring Boot的核心启动器，包含了自动配置、日志和YAML。\n\n2）spring-boot-starter-actuator \n帮助监控和管理应用。\n\n3）spring-boot-starter-amqp \n通过spring-rabbit来支持AMQP协议（Advanced Message Queuing Protocol）。\n\n4）spring-boot-starter-aop \n支持面向方面的编程即AOP，包括spring-aop和AspectJ。\n\n5）spring-boot-starter-artemis \n通过Apache Artemis支持JMS的API（Java Message Service API）。\n\n6）spring-boot-starter-batch \n支持Spring Batch，包括HSQLDB数据库。\n\n7）spring-boot-starter-cache \n支持Spring的Cache抽象。\n\n8）spring-boot-starter-cloud-connectors \n支持Spring Cloud Connectors，简化了在像Cloud Foundry或Heroku这样的云平台上连接服务。\n\n9）spring-boot-starter-data-elasticsearch \n支持ElasticSearch搜索和分析引擎，包括spring-data-elasticsearch。\n\n10）spring-boot-starter-data-gemfire \n支持GemFire分布式数据存储，包括spring-data-gemfire。\n\n11）spring-boot-starter-data-jpa \n支持JPA（Java Persistence API），包括spring-data-jpa、spring-orm、Hibernate。\n\n12）spring-boot-starter-data-mongodb \n支持MongoDB数据，包括spring-data-mongodb。\n\n13）spring-boot-starter-data-rest \n通过spring-data-rest-webmvc，支持通过REST暴露Spring Data数据仓库。\n\n14）spring-boot-starter-data-solr \n支持Apache Solr搜索平台，包括spring-data-solr。\n\n15）spring-boot-starter-freemarker \n支持FreeMarker模板引擎。\n\n16）spring-boot-starter-groovy-templates \n支持Groovy模板引擎。\n\n17）spring-boot-starter-hateoas \n通过spring-hateoas支持基于HATEOAS的RESTful Web服务。\n\n18）spring-boot-starter-hornetq \n通过HornetQ支持JMS。\n\n19）spring-boot-starter-integration \n支持通用的spring-integration模块。\n\n20）spring-boot-starter-jdbc \n支持JDBC数据库。\n\n21）spring-boot-starter-jersey \n支持Jersey RESTful Web服务框架。\n\n22）spring-boot-starter-jta-atomikos \n通过Atomikos支持JTA分布式事务处理。\n\n23）spring-boot-starter-jta-bitronix \n通过Bitronix支持JTA分布式事务处理。\n\n24）spring-boot-starter-mail \n支持javax.mail模块。\n\n25）spring-boot-starter-mobile \n支持spring-mobile。\n\n26）spring-boot-starter-mustache \n支持Mustache模板引擎。\n\n27）spring-boot-starter-redis \n支持Redis键值存储数据库，包括spring-redis。\n\n28）spring-boot-starter-security \n支持spring-security。\n\n29）spring-boot-starter-social-facebook \n支持spring-social-facebook\n\n30）spring-boot-starter-social-linkedin \n支持pring-social-linkedin\n\n31）spring-boot-starter-social-twitter \n支持pring-social-twitter\n\n32）spring-boot-starter-test \n支持常规的测试依赖，包括JUnit、Hamcrest、Mockito以及spring-test模块。\n\n33）spring-boot-starter-thymeleaf \n支持Thymeleaf模板引擎，包括与Spring的集成。\n\n34）spring-boot-starter-velocity \n支持Velocity模板引擎。\n\n35）spring-boot-starter-web \nS支持全栈式Web开发，包括Tomcat和spring-webmvc。\n\n36）spring-boot-starter-websocket \n支持WebSocket开发。\n\n37）spring-boot-starter-ws \n支持Spring Web Services。\n\nSpring Boot应用启动器面向生产环境的还有2种，具体如下：\n\n1）spring-boot-starter-actuator \n增加了面向产品上线相关的功能，比如测量和监控。\n\n2）spring-boot-starter-remote-shell \n增加了远程ssh shell的支持。\n\n最后，Spring Boot应用启动器还有一些替换技术的启动器，具体如下：\n\n1）spring-boot-starter-jetty \n引入了Jetty HTTP引擎（用于替换Tomcat）。\n\n2）spring-boot-starter-log4j \n支持Log4J日志框架。\n\n3）spring-boot-starter-logging \n引入了Spring Boot默认的日志框架Logback。\n\n4）spring-boot-starter-tomcat \n引入了Spring Boot默认的HTTP引擎Tomcat。\n\n5）spring-boot-starter-undertow \n引入了Undertow HTTP引擎（用于替换Tomcat）。\n\n# 启动器详解","slug":"spring-boot/starter","published":1,"date":"2018-11-20T14:55:26.981Z","updated":"2018-11-20T15:02:40.346Z","title":"","comments":1,"layout":"post","photos":[],"link":"","_id":"cjopxmsqw000awfo8rad806cy","content":"<h1><span id=\"spring-boot应用启动器基本的一共有44种具体如下\">Spring Boot应用启动器基本的一共有44种，具体如下：</span></h1><p>1）spring-boot-starter<br>这是Spring Boot的核心启动器，包含了自动配置、日志和YAML。</p>\n<p>2）spring-boot-starter-actuator<br>帮助监控和管理应用。</p>\n<p>3）spring-boot-starter-amqp<br>通过spring-rabbit来支持AMQP协议（Advanced Message Queuing Protocol）。</p>\n<p>4）spring-boot-starter-aop<br>支持面向方面的编程即AOP，包括spring-aop和AspectJ。</p>\n<p>5）spring-boot-starter-artemis<br>通过Apache Artemis支持JMS的API（Java Message Service API）。</p>\n<p>6）spring-boot-starter-batch<br>支持Spring Batch，包括HSQLDB数据库。</p>\n<p>7）spring-boot-starter-cache<br>支持Spring的Cache抽象。</p>\n<p>8）spring-boot-starter-cloud-connectors<br>支持Spring Cloud Connectors，简化了在像Cloud Foundry或Heroku这样的云平台上连接服务。</p>\n<p>9）spring-boot-starter-data-elasticsearch<br>支持ElasticSearch搜索和分析引擎，包括spring-data-elasticsearch。</p>\n<p>10）spring-boot-starter-data-gemfire<br>支持GemFire分布式数据存储，包括spring-data-gemfire。</p>\n<p>11）spring-boot-starter-data-jpa<br>支持JPA（Java Persistence API），包括spring-data-jpa、spring-orm、Hibernate。</p>\n<p>12）spring-boot-starter-data-mongodb<br>支持MongoDB数据，包括spring-data-mongodb。</p>\n<p>13）spring-boot-starter-data-rest<br>通过spring-data-rest-webmvc，支持通过REST暴露Spring Data数据仓库。</p>\n<p>14）spring-boot-starter-data-solr<br>支持Apache Solr搜索平台，包括spring-data-solr。</p>\n<p>15）spring-boot-starter-freemarker<br>支持FreeMarker模板引擎。</p>\n<p>16）spring-boot-starter-groovy-templates<br>支持Groovy模板引擎。</p>\n<p>17）spring-boot-starter-hateoas<br>通过spring-hateoas支持基于HATEOAS的RESTful Web服务。</p>\n<p>18）spring-boot-starter-hornetq<br>通过HornetQ支持JMS。</p>\n<p>19）spring-boot-starter-integration<br>支持通用的spring-integration模块。</p>\n<p>20）spring-boot-starter-jdbc<br>支持JDBC数据库。</p>\n<p>21）spring-boot-starter-jersey<br>支持Jersey RESTful Web服务框架。</p>\n<p>22）spring-boot-starter-jta-atomikos<br>通过Atomikos支持JTA分布式事务处理。</p>\n<p>23）spring-boot-starter-jta-bitronix<br>通过Bitronix支持JTA分布式事务处理。</p>\n<p>24）spring-boot-starter-mail<br>支持javax.mail模块。</p>\n<p>25）spring-boot-starter-mobile<br>支持spring-mobile。</p>\n<p>26）spring-boot-starter-mustache<br>支持Mustache模板引擎。</p>\n<p>27）spring-boot-starter-redis<br>支持Redis键值存储数据库，包括spring-redis。</p>\n<p>28）spring-boot-starter-security<br>支持spring-security。</p>\n<p>29）spring-boot-starter-social-facebook<br>支持spring-social-facebook</p>\n<p>30）spring-boot-starter-social-linkedin<br>支持pring-social-linkedin</p>\n<p>31）spring-boot-starter-social-twitter<br>支持pring-social-twitter</p>\n<p>32）spring-boot-starter-test<br>支持常规的测试依赖，包括JUnit、Hamcrest、Mockito以及spring-test模块。</p>\n<p>33）spring-boot-starter-thymeleaf<br>支持Thymeleaf模板引擎，包括与Spring的集成。</p>\n<p>34）spring-boot-starter-velocity<br>支持Velocity模板引擎。</p>\n<p>35）spring-boot-starter-web<br>S支持全栈式Web开发，包括Tomcat和spring-webmvc。</p>\n<p>36）spring-boot-starter-websocket<br>支持WebSocket开发。</p>\n<p>37）spring-boot-starter-ws<br>支持Spring Web Services。</p>\n<p>Spring Boot应用启动器面向生产环境的还有2种，具体如下：</p>\n<p>1）spring-boot-starter-actuator<br>增加了面向产品上线相关的功能，比如测量和监控。</p>\n<p>2）spring-boot-starter-remote-shell<br>增加了远程ssh shell的支持。</p>\n<p>最后，Spring Boot应用启动器还有一些替换技术的启动器，具体如下：</p>\n<p>1）spring-boot-starter-jetty<br>引入了Jetty HTTP引擎（用于替换Tomcat）。</p>\n<p>2）spring-boot-starter-log4j<br>支持Log4J日志框架。</p>\n<p>3）spring-boot-starter-logging<br>引入了Spring Boot默认的日志框架Logback。</p>\n<p>4）spring-boot-starter-tomcat<br>引入了Spring Boot默认的HTTP引擎Tomcat。</p>\n<p>5）spring-boot-starter-undertow<br>引入了Undertow HTTP引擎（用于替换Tomcat）。</p>\n<h1><span id=\"启动器详解\">启动器详解</span></h1>","site":{"data":{}},"excerpt":"","more":"<h1 id=\"Spring-Boot应用启动器基本的一共有44种，具体如下：\"><a href=\"#Spring-Boot应用启动器基本的一共有44种，具体如下：\" class=\"headerlink\" title=\"Spring Boot应用启动器基本的一共有44种，具体如下：\"></a>Spring Boot应用启动器基本的一共有44种，具体如下：</h1><p>1）spring-boot-starter<br>这是Spring Boot的核心启动器，包含了自动配置、日志和YAML。</p>\n<p>2）spring-boot-starter-actuator<br>帮助监控和管理应用。</p>\n<p>3）spring-boot-starter-amqp<br>通过spring-rabbit来支持AMQP协议（Advanced Message Queuing Protocol）。</p>\n<p>4）spring-boot-starter-aop<br>支持面向方面的编程即AOP，包括spring-aop和AspectJ。</p>\n<p>5）spring-boot-starter-artemis<br>通过Apache Artemis支持JMS的API（Java Message Service API）。</p>\n<p>6）spring-boot-starter-batch<br>支持Spring Batch，包括HSQLDB数据库。</p>\n<p>7）spring-boot-starter-cache<br>支持Spring的Cache抽象。</p>\n<p>8）spring-boot-starter-cloud-connectors<br>支持Spring Cloud Connectors，简化了在像Cloud Foundry或Heroku这样的云平台上连接服务。</p>\n<p>9）spring-boot-starter-data-elasticsearch<br>支持ElasticSearch搜索和分析引擎，包括spring-data-elasticsearch。</p>\n<p>10）spring-boot-starter-data-gemfire<br>支持GemFire分布式数据存储，包括spring-data-gemfire。</p>\n<p>11）spring-boot-starter-data-jpa<br>支持JPA（Java Persistence API），包括spring-data-jpa、spring-orm、Hibernate。</p>\n<p>12）spring-boot-starter-data-mongodb<br>支持MongoDB数据，包括spring-data-mongodb。</p>\n<p>13）spring-boot-starter-data-rest<br>通过spring-data-rest-webmvc，支持通过REST暴露Spring Data数据仓库。</p>\n<p>14）spring-boot-starter-data-solr<br>支持Apache Solr搜索平台，包括spring-data-solr。</p>\n<p>15）spring-boot-starter-freemarker<br>支持FreeMarker模板引擎。</p>\n<p>16）spring-boot-starter-groovy-templates<br>支持Groovy模板引擎。</p>\n<p>17）spring-boot-starter-hateoas<br>通过spring-hateoas支持基于HATEOAS的RESTful Web服务。</p>\n<p>18）spring-boot-starter-hornetq<br>通过HornetQ支持JMS。</p>\n<p>19）spring-boot-starter-integration<br>支持通用的spring-integration模块。</p>\n<p>20）spring-boot-starter-jdbc<br>支持JDBC数据库。</p>\n<p>21）spring-boot-starter-jersey<br>支持Jersey RESTful Web服务框架。</p>\n<p>22）spring-boot-starter-jta-atomikos<br>通过Atomikos支持JTA分布式事务处理。</p>\n<p>23）spring-boot-starter-jta-bitronix<br>通过Bitronix支持JTA分布式事务处理。</p>\n<p>24）spring-boot-starter-mail<br>支持javax.mail模块。</p>\n<p>25）spring-boot-starter-mobile<br>支持spring-mobile。</p>\n<p>26）spring-boot-starter-mustache<br>支持Mustache模板引擎。</p>\n<p>27）spring-boot-starter-redis<br>支持Redis键值存储数据库，包括spring-redis。</p>\n<p>28）spring-boot-starter-security<br>支持spring-security。</p>\n<p>29）spring-boot-starter-social-facebook<br>支持spring-social-facebook</p>\n<p>30）spring-boot-starter-social-linkedin<br>支持pring-social-linkedin</p>\n<p>31）spring-boot-starter-social-twitter<br>支持pring-social-twitter</p>\n<p>32）spring-boot-starter-test<br>支持常规的测试依赖，包括JUnit、Hamcrest、Mockito以及spring-test模块。</p>\n<p>33）spring-boot-starter-thymeleaf<br>支持Thymeleaf模板引擎，包括与Spring的集成。</p>\n<p>34）spring-boot-starter-velocity<br>支持Velocity模板引擎。</p>\n<p>35）spring-boot-starter-web<br>S支持全栈式Web开发，包括Tomcat和spring-webmvc。</p>\n<p>36）spring-boot-starter-websocket<br>支持WebSocket开发。</p>\n<p>37）spring-boot-starter-ws<br>支持Spring Web Services。</p>\n<p>Spring Boot应用启动器面向生产环境的还有2种，具体如下：</p>\n<p>1）spring-boot-starter-actuator<br>增加了面向产品上线相关的功能，比如测量和监控。</p>\n<p>2）spring-boot-starter-remote-shell<br>增加了远程ssh shell的支持。</p>\n<p>最后，Spring Boot应用启动器还有一些替换技术的启动器，具体如下：</p>\n<p>1）spring-boot-starter-jetty<br>引入了Jetty HTTP引擎（用于替换Tomcat）。</p>\n<p>2）spring-boot-starter-log4j<br>支持Log4J日志框架。</p>\n<p>3）spring-boot-starter-logging<br>引入了Spring Boot默认的日志框架Logback。</p>\n<p>4）spring-boot-starter-tomcat<br>引入了Spring Boot默认的HTTP引擎Tomcat。</p>\n<p>5）spring-boot-starter-undertow<br>引入了Undertow HTTP引擎（用于替换Tomcat）。</p>\n<h1 id=\"启动器详解\"><a href=\"#启动器详解\" class=\"headerlink\" title=\"启动器详解\"></a>启动器详解</h1>"},{"_content":"# getCurrentSession说明\n此设置的作用如下：\nWhat does sessionFactory.getCurrentSession() do? First, you can call it\nas many times and anywhere you\nlike, once you get hold of your SessionFactory (easy thanks to\nHibernateUtil). The getCurrentSession()\nmethod always returns the \"current\" unit of work. Remember that we\nswitched the configuration option for this\nmechanism to \"thread\" in hibernate.cfg.xml? Hence, the scope of the\ncurrent unit of work is the current Java\nthread that executes our application. However, this is not the full\ntruth. A Session begins when it is first\nneeded, when the first call to getCurrentSession() is made. It is then\nbound by Hibernate to the current\nthread. When the transaction ends, either committed or rolled back,\nHibernate also unbinds the Session from\nthe thread and closes it for you. If you call getCurrentSession() again,\nyou get a new Session and can start a\nnew unit of work. This thread-bound programming model is the most\npopular way of using Hibernate.\n\n意思是说：\n\nsessionFactory.getCurrentSession()可以完成一系列的工作，当调用时，\nhibernate将session绑定到当前线程，事务结束后，hibernate\n将session从当前线程中释放，并且关闭session。当再次调用getCurrentSession\n()时，将得到一个新的session，并重新开始这一系列工作。\n这样调用方法如下：\n\nSession session = HibernateUtil.getSessionFactory().getCurrentSession();\nsession.beginTransaction();\nEvent theEvent = new Event();\ntheEvent.setTitle(title);\ntheEvent.setDate(theDate);\nsession.save(theEvent);\nsession.getTransaction().commit();\n\n不需要close session了，但必须在支持事务的上下文中，因为实在事务提交或回滚时关闭的。\n\n \n\n前提是改值设置为了thread.\n\n1 getCurrentSession创建的session会和绑定到当前线程,而openSession不会。\n\n2 getCurrentSession创建的线程会在事务回滚或事物提交后自动关闭,而openSession必须手动关闭\n\n这里getCurrentSession本地事务(本地事务:jdbc)时 要在配置文件里进行如下设置\n\n    * 如果使用的是本地事务（jdbc事务）\n <property name=\"hibernate.current_session_context_class\">thread</property>\n * 如果使用的是全局事务（jta事务）\n <property name=\"hibernate.current_session_context_class\">jta</property> \n\n getCurrentSession () 使用当前的session\nopenSession()         重新建立一个新的session\n\n在一个应用程序中，如果DAO 层使用Spring 的hibernate 模板，通过Spring 来控制session 的生命周期，则首选getCurrentSession ()。\n\n使用Hibernate的大多数应用程序需要某种形式的“上下文相关的” session，特定的session在整个特定的上下文范围内始终有效。然而，对不同类型的应用程序而言，要为什么是组成这种“上下文”下一个定义通常是困难的；不同的上下文对“当前”这个概念定义了不同的范围。在3.0版本之前，使用Hibernate的程序要么采用自行编写的基于 ThreadLocal的上下文session，要么采用HibernateUtil这样的辅助类，要么采用第三方框架（比如Spring或Pico)，它们提供了基于代理(proxy)或者基于拦截器(interception)的上下文相关session。\n\n从3.0.1版本开始，Hibernate增加了SessionFactory.getCurrentSession()方法。一开始，它假定了采用JTA事务，JTA事务定义了当前session的范围和上下文(scope and context)。Hibernate开发团队坚信，因为有好几个独立的JTA TransactionManager实现稳定可用，不论是否被部署到一个J2EE容器中，大多数(假若不是所有的）应用程序都应该采用JTA事务管理。基于这一点，采用JTA的上下文相关session可以满足你一切需要。\n\n更好的是，从3.1开始，SessionFactory.getCurrentSession()的后台实现是可拔插的。因此，我们引入了新的扩展接口 (org.hibernate.context.CurrentSessionContext)和新的配置参数 (hibernate.current_session_context_class)，以便对什么是“当前session”的范围和上下文(scope and context)的定义进行拔插。\n\n请参阅 org.hibernate.context.CurrentSessionContext接口的Javadoc,那里有关于它的契约的详细讨论。它定义了单一的方法，currentSession()，特定的实现用它来负责跟踪当前的上下文session。Hibernate内置了此接口的两种实现。\n\norg.hibernate.context.JTASessionContext - 当前session根据JTA来跟踪和界定。这和以前的仅支持JTA的方法是完全一样的。详情请参阅Javadoc。\n\norg.hibernate.context.ThreadLocalSessionContext - 当前session通过当前执行的线程来跟踪和界定。详情也请参阅Javadoc。\n\n这两种实现都提供了“每数据库事务对应一个session”的编程模型，也称作每次请求一个session。Hibernate session的起始和终结由数据库事务的生存来控制。假若你采用自行编写代码来管理事务（比如，在纯粹的J2SE,或者 JTA/UserTransaction/BMT），建议你使用Hibernate Transaction API来把底层事务实现从你的代码中隐藏掉。如果你在支持CMT的EJB容器中执行，事务边界是声明式定义的，你不需要在代码中进行任何事务或 session管理操作。请参阅第 11 章 事务和并发一节来阅读更多的内容和示例代码。\n\nhibernate.current_session_context_class 配置参数定义了应该采用哪个org.hibernate.context.CurrentSessionContext实现。注意，为了向下兼容，如果未配置此参数，但是存在org.hibernate.transaction.TransactionManagerLookup的配置，Hibernate会采用org.hibernate.context.JTASessionContext。一般而言，此参数的值指明了要使用的实现类的全名，但那两个内置的实现可以使用简写，即\"jta\"和\"thread\"。\n\n1、getCurrentSession()与openSession()的区别？\n* 采用getCurrentSession()创建的session会绑定到当前线程中，而采用openSession()\n创建的session则不会\n* 采用getCurrentSession()创建的session在commit或rollback时会自动关闭，而采用openSession()\n创建的session必须手动关闭\n2、使用getCurrentSession()需要在hibernate.cfg.xml文件中加入如下配置：\n* 如果使用的是本地事务（jdbc事务）\n<property name=\"hibernate.current_session_context_class\">thread</property>\n* 如果使用的是全局事务（jta事务）\n\n<property name=\"hibernate.current_session_context_class\">jta</property>\n\n利于ThreadLocal模式管理Session\n   早在Java1.2推出之时，Java平台中就引入了一个新的支持：java.lang.ThreadLocal，给我们在编写多线程程序\n   时提供了一种新的选择。ThreadLocal是什么呢？其实ThreadLocal并非是一个线程的本地实现版本，它并不是一个Thread，\n   而是thread local variable(线程局部变量)。也许把它命名为ThreadLocalVar更加合适。线程局部变量(ThreadLocal)\n   其实的功用非常简单，就是为每一个使用某变量的线程都提供一个该变量值的副本，是每一个线程都可以独立地改变自己的副本，\n   而不会和其它线程的副本冲突。从线程的角度看，就好像每一个线程都完全拥有一个该变量。\n   ThreadLocal是如何做到为每一个线程维护变量的副本的呢？其实实现的思路很简单，在ThreadLocal类中有一个Map，\n   用于存储每一个线程的变量的副本。比如下面的示例实现(为了简单，没有考虑集合的泛型)：\npublic class HibernateUtil {\n\npublic static final ThreadLocal session =new ThreadLocal();\n\npublic static final SessionFactory sessionFactory;\n   static {\n      try {\n        sessionFactory = new Configuration().configure().buildSessionFactory();\n      } catch (Throwable ex) {\n           throw new ExceptionInInitializerError(ex);\n      }    \n}\n\n     public static Session currentSession () throws HibernateException {\n        Session s = session.get ();\n        if(s == null) {\n          s = sessionFactory.openSession ();\n          session.set(s);\n           }\n         return s;\n       }\n\n    public static void closeSession() throws HibernateException {\n           Session s = session.get ();\n        if(s != null) {\n            s.close();\n        }\n        session.set(null);\n    }\n}\n\nopenSession() 与 getCurrentSession() 有何不同和关联呢？\n\n \n\n在 SessionFactory 启动的时候， Hibernate 会根据配置创建相应的 CurrentSessionContext ，在 getCurrentSession() 被调用的时候，实际被执行的方法是 CurrentSessionContext.currentSession() 。在 currentSession() 执行时，如果当前 Session 为空， currentSession 会调用 SessionFactory 的 openSession 。所以 getCurrentSession() 对于 Java EE 来说是更好的获取 Session 的方法。\n\n转载自：http://wenku.baidu.com/link?url=OimQ-55pxZvbAF6EB24aNP4XEJxzfPQEE1Q8gixNlbzPS8coXpuNoekV08ij4aIkQU3P3WC0v0FteFXqgYQuyGHD9lzigQGJuhObHIQ9fH3\n\n\n","source":"_posts/hibernate/getCurrentSession.md","raw":"# getCurrentSession说明\n此设置的作用如下：\nWhat does sessionFactory.getCurrentSession() do? First, you can call it\nas many times and anywhere you\nlike, once you get hold of your SessionFactory (easy thanks to\nHibernateUtil). The getCurrentSession()\nmethod always returns the \"current\" unit of work. Remember that we\nswitched the configuration option for this\nmechanism to \"thread\" in hibernate.cfg.xml? Hence, the scope of the\ncurrent unit of work is the current Java\nthread that executes our application. However, this is not the full\ntruth. A Session begins when it is first\nneeded, when the first call to getCurrentSession() is made. It is then\nbound by Hibernate to the current\nthread. When the transaction ends, either committed or rolled back,\nHibernate also unbinds the Session from\nthe thread and closes it for you. If you call getCurrentSession() again,\nyou get a new Session and can start a\nnew unit of work. This thread-bound programming model is the most\npopular way of using Hibernate.\n\n意思是说：\n\nsessionFactory.getCurrentSession()可以完成一系列的工作，当调用时，\nhibernate将session绑定到当前线程，事务结束后，hibernate\n将session从当前线程中释放，并且关闭session。当再次调用getCurrentSession\n()时，将得到一个新的session，并重新开始这一系列工作。\n这样调用方法如下：\n\nSession session = HibernateUtil.getSessionFactory().getCurrentSession();\nsession.beginTransaction();\nEvent theEvent = new Event();\ntheEvent.setTitle(title);\ntheEvent.setDate(theDate);\nsession.save(theEvent);\nsession.getTransaction().commit();\n\n不需要close session了，但必须在支持事务的上下文中，因为实在事务提交或回滚时关闭的。\n\n \n\n前提是改值设置为了thread.\n\n1 getCurrentSession创建的session会和绑定到当前线程,而openSession不会。\n\n2 getCurrentSession创建的线程会在事务回滚或事物提交后自动关闭,而openSession必须手动关闭\n\n这里getCurrentSession本地事务(本地事务:jdbc)时 要在配置文件里进行如下设置\n\n    * 如果使用的是本地事务（jdbc事务）\n <property name=\"hibernate.current_session_context_class\">thread</property>\n * 如果使用的是全局事务（jta事务）\n <property name=\"hibernate.current_session_context_class\">jta</property> \n\n getCurrentSession () 使用当前的session\nopenSession()         重新建立一个新的session\n\n在一个应用程序中，如果DAO 层使用Spring 的hibernate 模板，通过Spring 来控制session 的生命周期，则首选getCurrentSession ()。\n\n使用Hibernate的大多数应用程序需要某种形式的“上下文相关的” session，特定的session在整个特定的上下文范围内始终有效。然而，对不同类型的应用程序而言，要为什么是组成这种“上下文”下一个定义通常是困难的；不同的上下文对“当前”这个概念定义了不同的范围。在3.0版本之前，使用Hibernate的程序要么采用自行编写的基于 ThreadLocal的上下文session，要么采用HibernateUtil这样的辅助类，要么采用第三方框架（比如Spring或Pico)，它们提供了基于代理(proxy)或者基于拦截器(interception)的上下文相关session。\n\n从3.0.1版本开始，Hibernate增加了SessionFactory.getCurrentSession()方法。一开始，它假定了采用JTA事务，JTA事务定义了当前session的范围和上下文(scope and context)。Hibernate开发团队坚信，因为有好几个独立的JTA TransactionManager实现稳定可用，不论是否被部署到一个J2EE容器中，大多数(假若不是所有的）应用程序都应该采用JTA事务管理。基于这一点，采用JTA的上下文相关session可以满足你一切需要。\n\n更好的是，从3.1开始，SessionFactory.getCurrentSession()的后台实现是可拔插的。因此，我们引入了新的扩展接口 (org.hibernate.context.CurrentSessionContext)和新的配置参数 (hibernate.current_session_context_class)，以便对什么是“当前session”的范围和上下文(scope and context)的定义进行拔插。\n\n请参阅 org.hibernate.context.CurrentSessionContext接口的Javadoc,那里有关于它的契约的详细讨论。它定义了单一的方法，currentSession()，特定的实现用它来负责跟踪当前的上下文session。Hibernate内置了此接口的两种实现。\n\norg.hibernate.context.JTASessionContext - 当前session根据JTA来跟踪和界定。这和以前的仅支持JTA的方法是完全一样的。详情请参阅Javadoc。\n\norg.hibernate.context.ThreadLocalSessionContext - 当前session通过当前执行的线程来跟踪和界定。详情也请参阅Javadoc。\n\n这两种实现都提供了“每数据库事务对应一个session”的编程模型，也称作每次请求一个session。Hibernate session的起始和终结由数据库事务的生存来控制。假若你采用自行编写代码来管理事务（比如，在纯粹的J2SE,或者 JTA/UserTransaction/BMT），建议你使用Hibernate Transaction API来把底层事务实现从你的代码中隐藏掉。如果你在支持CMT的EJB容器中执行，事务边界是声明式定义的，你不需要在代码中进行任何事务或 session管理操作。请参阅第 11 章 事务和并发一节来阅读更多的内容和示例代码。\n\nhibernate.current_session_context_class 配置参数定义了应该采用哪个org.hibernate.context.CurrentSessionContext实现。注意，为了向下兼容，如果未配置此参数，但是存在org.hibernate.transaction.TransactionManagerLookup的配置，Hibernate会采用org.hibernate.context.JTASessionContext。一般而言，此参数的值指明了要使用的实现类的全名，但那两个内置的实现可以使用简写，即\"jta\"和\"thread\"。\n\n1、getCurrentSession()与openSession()的区别？\n* 采用getCurrentSession()创建的session会绑定到当前线程中，而采用openSession()\n创建的session则不会\n* 采用getCurrentSession()创建的session在commit或rollback时会自动关闭，而采用openSession()\n创建的session必须手动关闭\n2、使用getCurrentSession()需要在hibernate.cfg.xml文件中加入如下配置：\n* 如果使用的是本地事务（jdbc事务）\n<property name=\"hibernate.current_session_context_class\">thread</property>\n* 如果使用的是全局事务（jta事务）\n\n<property name=\"hibernate.current_session_context_class\">jta</property>\n\n利于ThreadLocal模式管理Session\n   早在Java1.2推出之时，Java平台中就引入了一个新的支持：java.lang.ThreadLocal，给我们在编写多线程程序\n   时提供了一种新的选择。ThreadLocal是什么呢？其实ThreadLocal并非是一个线程的本地实现版本，它并不是一个Thread，\n   而是thread local variable(线程局部变量)。也许把它命名为ThreadLocalVar更加合适。线程局部变量(ThreadLocal)\n   其实的功用非常简单，就是为每一个使用某变量的线程都提供一个该变量值的副本，是每一个线程都可以独立地改变自己的副本，\n   而不会和其它线程的副本冲突。从线程的角度看，就好像每一个线程都完全拥有一个该变量。\n   ThreadLocal是如何做到为每一个线程维护变量的副本的呢？其实实现的思路很简单，在ThreadLocal类中有一个Map，\n   用于存储每一个线程的变量的副本。比如下面的示例实现(为了简单，没有考虑集合的泛型)：\npublic class HibernateUtil {\n\npublic static final ThreadLocal session =new ThreadLocal();\n\npublic static final SessionFactory sessionFactory;\n   static {\n      try {\n        sessionFactory = new Configuration().configure().buildSessionFactory();\n      } catch (Throwable ex) {\n           throw new ExceptionInInitializerError(ex);\n      }    \n}\n\n     public static Session currentSession () throws HibernateException {\n        Session s = session.get ();\n        if(s == null) {\n          s = sessionFactory.openSession ();\n          session.set(s);\n           }\n         return s;\n       }\n\n    public static void closeSession() throws HibernateException {\n           Session s = session.get ();\n        if(s != null) {\n            s.close();\n        }\n        session.set(null);\n    }\n}\n\nopenSession() 与 getCurrentSession() 有何不同和关联呢？\n\n \n\n在 SessionFactory 启动的时候， Hibernate 会根据配置创建相应的 CurrentSessionContext ，在 getCurrentSession() 被调用的时候，实际被执行的方法是 CurrentSessionContext.currentSession() 。在 currentSession() 执行时，如果当前 Session 为空， currentSession 会调用 SessionFactory 的 openSession 。所以 getCurrentSession() 对于 Java EE 来说是更好的获取 Session 的方法。\n\n转载自：http://wenku.baidu.com/link?url=OimQ-55pxZvbAF6EB24aNP4XEJxzfPQEE1Q8gixNlbzPS8coXpuNoekV08ij4aIkQU3P3WC0v0FteFXqgYQuyGHD9lzigQGJuhObHIQ9fH3\n\n\n","slug":"hibernate/getCurrentSession","published":1,"date":"2018-11-20T14:55:26.974Z","updated":"2018-11-20T15:04:10.119Z","title":"","comments":1,"layout":"post","photos":[],"link":"","_id":"cjopxmsqy000bwfo8a3kaz8gm","content":"<h1><span id=\"getcurrentsession说明\">getCurrentSession说明</span></h1><p>此设置的作用如下：<br>What does sessionFactory.getCurrentSession() do? First, you can call it<br>as many times and anywhere you<br>like, once you get hold of your SessionFactory (easy thanks to<br>HibernateUtil). The getCurrentSession()<br>method always returns the “current” unit of work. Remember that we<br>switched the configuration option for this<br>mechanism to “thread” in hibernate.cfg.xml? Hence, the scope of the<br>current unit of work is the current Java<br>thread that executes our application. However, this is not the full<br>truth. A Session begins when it is first<br>needed, when the first call to getCurrentSession() is made. It is then<br>bound by Hibernate to the current<br>thread. When the transaction ends, either committed or rolled back,<br>Hibernate also unbinds the Session from<br>the thread and closes it for you. If you call getCurrentSession() again,<br>you get a new Session and can start a<br>new unit of work. This thread-bound programming model is the most<br>popular way of using Hibernate.</p>\n<p>意思是说：</p>\n<p>sessionFactory.getCurrentSession()可以完成一系列的工作，当调用时，<br>hibernate将session绑定到当前线程，事务结束后，hibernate<br>将session从当前线程中释放，并且关闭session。当再次调用getCurrentSession<br>()时，将得到一个新的session，并重新开始这一系列工作。<br>这样调用方法如下：</p>\n<p>Session session = HibernateUtil.getSessionFactory().getCurrentSession();<br>session.beginTransaction();<br>Event theEvent = new Event();<br>theEvent.setTitle(title);<br>theEvent.setDate(theDate);<br>session.save(theEvent);<br>session.getTransaction().commit();</p>\n<p>不需要close session了，但必须在支持事务的上下文中，因为实在事务提交或回滚时关闭的。</p>\n<p>前提是改值设置为了thread.</p>\n<p>1 getCurrentSession创建的session会和绑定到当前线程,而openSession不会。</p>\n<p>2 getCurrentSession创建的线程会在事务回滚或事物提交后自动关闭,而openSession必须手动关闭</p>\n<p>这里getCurrentSession本地事务(本地事务:jdbc)时 要在配置文件里进行如下设置</p>\n<pre><code>* 如果使用的是本地事务（jdbc事务）\n</code></pre> <property name=\"hibernate.current_session_context_class\">thread</property><br> * 如果使用的是全局事务（jta事务）<br> <property name=\"hibernate.current_session_context_class\">jta</property> \n\n<p> getCurrentSession () 使用当前的session<br>openSession()         重新建立一个新的session</p>\n<p>在一个应用程序中，如果DAO 层使用Spring 的hibernate 模板，通过Spring 来控制session 的生命周期，则首选getCurrentSession ()。</p>\n<p>使用Hibernate的大多数应用程序需要某种形式的“上下文相关的” session，特定的session在整个特定的上下文范围内始终有效。然而，对不同类型的应用程序而言，要为什么是组成这种“上下文”下一个定义通常是困难的；不同的上下文对“当前”这个概念定义了不同的范围。在3.0版本之前，使用Hibernate的程序要么采用自行编写的基于 ThreadLocal的上下文session，要么采用HibernateUtil这样的辅助类，要么采用第三方框架（比如Spring或Pico)，它们提供了基于代理(proxy)或者基于拦截器(interception)的上下文相关session。</p>\n<p>从3.0.1版本开始，Hibernate增加了SessionFactory.getCurrentSession()方法。一开始，它假定了采用JTA事务，JTA事务定义了当前session的范围和上下文(scope and context)。Hibernate开发团队坚信，因为有好几个独立的JTA TransactionManager实现稳定可用，不论是否被部署到一个J2EE容器中，大多数(假若不是所有的）应用程序都应该采用JTA事务管理。基于这一点，采用JTA的上下文相关session可以满足你一切需要。</p>\n<p>更好的是，从3.1开始，SessionFactory.getCurrentSession()的后台实现是可拔插的。因此，我们引入了新的扩展接口 (org.hibernate.context.CurrentSessionContext)和新的配置参数 (hibernate.current_session_context_class)，以便对什么是“当前session”的范围和上下文(scope and context)的定义进行拔插。</p>\n<p>请参阅 org.hibernate.context.CurrentSessionContext接口的Javadoc,那里有关于它的契约的详细讨论。它定义了单一的方法，currentSession()，特定的实现用它来负责跟踪当前的上下文session。Hibernate内置了此接口的两种实现。</p>\n<p>org.hibernate.context.JTASessionContext - 当前session根据JTA来跟踪和界定。这和以前的仅支持JTA的方法是完全一样的。详情请参阅Javadoc。</p>\n<p>org.hibernate.context.ThreadLocalSessionContext - 当前session通过当前执行的线程来跟踪和界定。详情也请参阅Javadoc。</p>\n<p>这两种实现都提供了“每数据库事务对应一个session”的编程模型，也称作每次请求一个session。Hibernate session的起始和终结由数据库事务的生存来控制。假若你采用自行编写代码来管理事务（比如，在纯粹的J2SE,或者 JTA/UserTransaction/BMT），建议你使用Hibernate Transaction API来把底层事务实现从你的代码中隐藏掉。如果你在支持CMT的EJB容器中执行，事务边界是声明式定义的，你不需要在代码中进行任何事务或 session管理操作。请参阅第 11 章 事务和并发一节来阅读更多的内容和示例代码。</p>\n<p>hibernate.current_session_context_class 配置参数定义了应该采用哪个org.hibernate.context.CurrentSessionContext实现。注意，为了向下兼容，如果未配置此参数，但是存在org.hibernate.transaction.TransactionManagerLookup的配置，Hibernate会采用org.hibernate.context.JTASessionContext。一般而言，此参数的值指明了要使用的实现类的全名，但那两个内置的实现可以使用简写，即”jta”和”thread”。</p>\n<p>1、getCurrentSession()与openSession()的区别？</p>\n<ul>\n<li>采用getCurrentSession()创建的session会绑定到当前线程中，而采用openSession()<br>创建的session则不会</li>\n<li>采用getCurrentSession()创建的session在commit或rollback时会自动关闭，而采用openSession()<br>创建的session必须手动关闭<br>2、使用getCurrentSession()需要在hibernate.cfg.xml文件中加入如下配置：</li>\n<li>如果使用的是本地事务（jdbc事务）<property name=\"hibernate.current_session_context_class\">thread</property></li>\n<li>如果使用的是全局事务（jta事务）</li>\n</ul>\n<property name=\"hibernate.current_session_context_class\">jta</property>\n\n<p>利于ThreadLocal模式管理Session<br>   早在Java1.2推出之时，Java平台中就引入了一个新的支持：java.lang.ThreadLocal，给我们在编写多线程程序<br>   时提供了一种新的选择。ThreadLocal是什么呢？其实ThreadLocal并非是一个线程的本地实现版本，它并不是一个Thread，<br>   而是thread local variable(线程局部变量)。也许把它命名为ThreadLocalVar更加合适。线程局部变量(ThreadLocal)<br>   其实的功用非常简单，就是为每一个使用某变量的线程都提供一个该变量值的副本，是每一个线程都可以独立地改变自己的副本，<br>   而不会和其它线程的副本冲突。从线程的角度看，就好像每一个线程都完全拥有一个该变量。<br>   ThreadLocal是如何做到为每一个线程维护变量的副本的呢？其实实现的思路很简单，在ThreadLocal类中有一个Map，<br>   用于存储每一个线程的变量的副本。比如下面的示例实现(为了简单，没有考虑集合的泛型)：<br>public class HibernateUtil {</p>\n<p>public static final ThreadLocal session =new ThreadLocal();</p>\n<p>public static final SessionFactory sessionFactory;<br>   static {<br>      try {<br>        sessionFactory = new Configuration().configure().buildSessionFactory();<br>      } catch (Throwable ex) {<br>           throw new ExceptionInInitializerError(ex);<br>      }<br>}</p>\n<pre><code> public static Session currentSession () throws HibernateException {\n    Session s = session.get ();\n    if(s == null) {\n      s = sessionFactory.openSession ();\n      session.set(s);\n       }\n     return s;\n   }\n\npublic static void closeSession() throws HibernateException {\n       Session s = session.get ();\n    if(s != null) {\n        s.close();\n    }\n    session.set(null);\n}\n</code></pre><p>}</p>\n<p>openSession() 与 getCurrentSession() 有何不同和关联呢？</p>\n<p>在 SessionFactory 启动的时候， Hibernate 会根据配置创建相应的 CurrentSessionContext ，在 getCurrentSession() 被调用的时候，实际被执行的方法是 CurrentSessionContext.currentSession() 。在 currentSession() 执行时，如果当前 Session 为空， currentSession 会调用 SessionFactory 的 openSession 。所以 getCurrentSession() 对于 Java EE 来说是更好的获取 Session 的方法。</p>\n<p>转载自：<a href=\"http://wenku.baidu.com/link?url=OimQ-55pxZvbAF6EB24aNP4XEJxzfPQEE1Q8gixNlbzPS8coXpuNoekV08ij4aIkQU3P3WC0v0FteFXqgYQuyGHD9lzigQGJuhObHIQ9fH3\" target=\"_blank\" rel=\"noopener\">http://wenku.baidu.com/link?url=OimQ-55pxZvbAF6EB24aNP4XEJxzfPQEE1Q8gixNlbzPS8coXpuNoekV08ij4aIkQU3P3WC0v0FteFXqgYQuyGHD9lzigQGJuhObHIQ9fH3</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"getCurrentSession说明\"><a href=\"#getCurrentSession说明\" class=\"headerlink\" title=\"getCurrentSession说明\"></a>getCurrentSession说明</h1><p>此设置的作用如下：<br>What does sessionFactory.getCurrentSession() do? First, you can call it<br>as many times and anywhere you<br>like, once you get hold of your SessionFactory (easy thanks to<br>HibernateUtil). The getCurrentSession()<br>method always returns the “current” unit of work. Remember that we<br>switched the configuration option for this<br>mechanism to “thread” in hibernate.cfg.xml? Hence, the scope of the<br>current unit of work is the current Java<br>thread that executes our application. However, this is not the full<br>truth. A Session begins when it is first<br>needed, when the first call to getCurrentSession() is made. It is then<br>bound by Hibernate to the current<br>thread. When the transaction ends, either committed or rolled back,<br>Hibernate also unbinds the Session from<br>the thread and closes it for you. If you call getCurrentSession() again,<br>you get a new Session and can start a<br>new unit of work. This thread-bound programming model is the most<br>popular way of using Hibernate.</p>\n<p>意思是说：</p>\n<p>sessionFactory.getCurrentSession()可以完成一系列的工作，当调用时，<br>hibernate将session绑定到当前线程，事务结束后，hibernate<br>将session从当前线程中释放，并且关闭session。当再次调用getCurrentSession<br>()时，将得到一个新的session，并重新开始这一系列工作。<br>这样调用方法如下：</p>\n<p>Session session = HibernateUtil.getSessionFactory().getCurrentSession();<br>session.beginTransaction();<br>Event theEvent = new Event();<br>theEvent.setTitle(title);<br>theEvent.setDate(theDate);<br>session.save(theEvent);<br>session.getTransaction().commit();</p>\n<p>不需要close session了，但必须在支持事务的上下文中，因为实在事务提交或回滚时关闭的。</p>\n<p>前提是改值设置为了thread.</p>\n<p>1 getCurrentSession创建的session会和绑定到当前线程,而openSession不会。</p>\n<p>2 getCurrentSession创建的线程会在事务回滚或事物提交后自动关闭,而openSession必须手动关闭</p>\n<p>这里getCurrentSession本地事务(本地事务:jdbc)时 要在配置文件里进行如下设置</p>\n<pre><code>* 如果使用的是本地事务（jdbc事务）\n</code></pre> <property name=\"hibernate.current_session_context_class\">thread</property><br> * 如果使用的是全局事务（jta事务）<br> <property name=\"hibernate.current_session_context_class\">jta</property> \n\n<p> getCurrentSession () 使用当前的session<br>openSession()         重新建立一个新的session</p>\n<p>在一个应用程序中，如果DAO 层使用Spring 的hibernate 模板，通过Spring 来控制session 的生命周期，则首选getCurrentSession ()。</p>\n<p>使用Hibernate的大多数应用程序需要某种形式的“上下文相关的” session，特定的session在整个特定的上下文范围内始终有效。然而，对不同类型的应用程序而言，要为什么是组成这种“上下文”下一个定义通常是困难的；不同的上下文对“当前”这个概念定义了不同的范围。在3.0版本之前，使用Hibernate的程序要么采用自行编写的基于 ThreadLocal的上下文session，要么采用HibernateUtil这样的辅助类，要么采用第三方框架（比如Spring或Pico)，它们提供了基于代理(proxy)或者基于拦截器(interception)的上下文相关session。</p>\n<p>从3.0.1版本开始，Hibernate增加了SessionFactory.getCurrentSession()方法。一开始，它假定了采用JTA事务，JTA事务定义了当前session的范围和上下文(scope and context)。Hibernate开发团队坚信，因为有好几个独立的JTA TransactionManager实现稳定可用，不论是否被部署到一个J2EE容器中，大多数(假若不是所有的）应用程序都应该采用JTA事务管理。基于这一点，采用JTA的上下文相关session可以满足你一切需要。</p>\n<p>更好的是，从3.1开始，SessionFactory.getCurrentSession()的后台实现是可拔插的。因此，我们引入了新的扩展接口 (org.hibernate.context.CurrentSessionContext)和新的配置参数 (hibernate.current_session_context_class)，以便对什么是“当前session”的范围和上下文(scope and context)的定义进行拔插。</p>\n<p>请参阅 org.hibernate.context.CurrentSessionContext接口的Javadoc,那里有关于它的契约的详细讨论。它定义了单一的方法，currentSession()，特定的实现用它来负责跟踪当前的上下文session。Hibernate内置了此接口的两种实现。</p>\n<p>org.hibernate.context.JTASessionContext - 当前session根据JTA来跟踪和界定。这和以前的仅支持JTA的方法是完全一样的。详情请参阅Javadoc。</p>\n<p>org.hibernate.context.ThreadLocalSessionContext - 当前session通过当前执行的线程来跟踪和界定。详情也请参阅Javadoc。</p>\n<p>这两种实现都提供了“每数据库事务对应一个session”的编程模型，也称作每次请求一个session。Hibernate session的起始和终结由数据库事务的生存来控制。假若你采用自行编写代码来管理事务（比如，在纯粹的J2SE,或者 JTA/UserTransaction/BMT），建议你使用Hibernate Transaction API来把底层事务实现从你的代码中隐藏掉。如果你在支持CMT的EJB容器中执行，事务边界是声明式定义的，你不需要在代码中进行任何事务或 session管理操作。请参阅第 11 章 事务和并发一节来阅读更多的内容和示例代码。</p>\n<p>hibernate.current_session_context_class 配置参数定义了应该采用哪个org.hibernate.context.CurrentSessionContext实现。注意，为了向下兼容，如果未配置此参数，但是存在org.hibernate.transaction.TransactionManagerLookup的配置，Hibernate会采用org.hibernate.context.JTASessionContext。一般而言，此参数的值指明了要使用的实现类的全名，但那两个内置的实现可以使用简写，即”jta”和”thread”。</p>\n<p>1、getCurrentSession()与openSession()的区别？</p>\n<ul>\n<li>采用getCurrentSession()创建的session会绑定到当前线程中，而采用openSession()<br>创建的session则不会</li>\n<li>采用getCurrentSession()创建的session在commit或rollback时会自动关闭，而采用openSession()<br>创建的session必须手动关闭<br>2、使用getCurrentSession()需要在hibernate.cfg.xml文件中加入如下配置：</li>\n<li>如果使用的是本地事务（jdbc事务）<property name=\"hibernate.current_session_context_class\">thread</property></li>\n<li>如果使用的是全局事务（jta事务）</li>\n</ul>\n<property name=\"hibernate.current_session_context_class\">jta</property>\n\n<p>利于ThreadLocal模式管理Session<br>   早在Java1.2推出之时，Java平台中就引入了一个新的支持：java.lang.ThreadLocal，给我们在编写多线程程序<br>   时提供了一种新的选择。ThreadLocal是什么呢？其实ThreadLocal并非是一个线程的本地实现版本，它并不是一个Thread，<br>   而是thread local variable(线程局部变量)。也许把它命名为ThreadLocalVar更加合适。线程局部变量(ThreadLocal)<br>   其实的功用非常简单，就是为每一个使用某变量的线程都提供一个该变量值的副本，是每一个线程都可以独立地改变自己的副本，<br>   而不会和其它线程的副本冲突。从线程的角度看，就好像每一个线程都完全拥有一个该变量。<br>   ThreadLocal是如何做到为每一个线程维护变量的副本的呢？其实实现的思路很简单，在ThreadLocal类中有一个Map，<br>   用于存储每一个线程的变量的副本。比如下面的示例实现(为了简单，没有考虑集合的泛型)：<br>public class HibernateUtil {</p>\n<p>public static final ThreadLocal session =new ThreadLocal();</p>\n<p>public static final SessionFactory sessionFactory;<br>   static {<br>      try {<br>        sessionFactory = new Configuration().configure().buildSessionFactory();<br>      } catch (Throwable ex) {<br>           throw new ExceptionInInitializerError(ex);<br>      }<br>}</p>\n<pre><code> public static Session currentSession () throws HibernateException {\n    Session s = session.get ();\n    if(s == null) {\n      s = sessionFactory.openSession ();\n      session.set(s);\n       }\n     return s;\n   }\n\npublic static void closeSession() throws HibernateException {\n       Session s = session.get ();\n    if(s != null) {\n        s.close();\n    }\n    session.set(null);\n}\n</code></pre><p>}</p>\n<p>openSession() 与 getCurrentSession() 有何不同和关联呢？</p>\n<p>在 SessionFactory 启动的时候， Hibernate 会根据配置创建相应的 CurrentSessionContext ，在 getCurrentSession() 被调用的时候，实际被执行的方法是 CurrentSessionContext.currentSession() 。在 currentSession() 执行时，如果当前 Session 为空， currentSession 会调用 SessionFactory 的 openSession 。所以 getCurrentSession() 对于 Java EE 来说是更好的获取 Session 的方法。</p>\n<p>转载自：<a href=\"http://wenku.baidu.com/link?url=OimQ-55pxZvbAF6EB24aNP4XEJxzfPQEE1Q8gixNlbzPS8coXpuNoekV08ij4aIkQU3P3WC0v0FteFXqgYQuyGHD9lzigQGJuhObHIQ9fH3\" target=\"_blank\" rel=\"noopener\">http://wenku.baidu.com/link?url=OimQ-55pxZvbAF6EB24aNP4XEJxzfPQEE1Q8gixNlbzPS8coXpuNoekV08ij4aIkQU3P3WC0v0FteFXqgYQuyGHD9lzigQGJuhObHIQ9fH3</a></p>\n"},{"_content":"#  hibernate--HQL语法与详细解释\nHQL查询：\nCriteria查询对查询条件进行了面向对象封装，符合编程人员的思维方式，不过HQL(Hibernate Query Lanaguage)查询提供了更加丰富的和灵活的查询特性，因此\nHibernate将HQL查询方式立为官方推荐的标准查询方式，HQL查询在涵盖Criteria查询的所有功能的前提下，提供了类似标准SQL语句的查询方式，同时也提供了更\n加面向对象的封装。完整的HQL语句形势如下：\nSelect/update/delete…… from …… where …… group by …… having …… order by …… asc/desc\n其中的update/delete为Hibernate3中所新添加的功能，可见HQL查询非常类似于标准SQL查询。由于HQL查询在整个Hibernate实体操作体系中的核心地位，这一节我\n将专门围绕HQL操作的具体技术细节进行讲解。\n \n\n### 实体查询：\n有关实体查询技术，其实我们在先前已经有多次涉及，比如下面的例子：\n\n```\nString hql=”from User user ”;\nList list=session.CreateQuery(hql).list();\n```\n上面的代码执行结果是，查询出User实体对象所对应的所有数据，而且将数据封装成User实体对象，并且放入List中返回。这里需要注意的是，Hibernate的实体查\n询存在着对继承关系的判定，比如我们前面讨论映射实体继承关系中的Employee实体对象，它有两个子类分别是HourlyEmployee，SalariedEmployee,如果有这样的\nHQL语句：“from Employee”,当执行检索时Hibernate会检索出所有Employee类型实体对象所对应的数据（包括它的子类HourlyEmployee，SalariedEmployee对应\n的数据）。\n因为HQL语句与标准SQL语句相似，所以我们也可以在HQL语句中使用where字句，并且可以在where字句中使用各种表达式，比较操作符以及使用“and”,”or”连接\n不同的查询条件的组合。看下面的一些简单的例子：\n\n```\nfrom User user where user.age=20;\nfrom User user where user.age between 20 and 30;\nfrom User user where user.age in(20,30);\nfrom User user where user.name is null;\nfrom User user where user.name like ‘%zx%’;\nfrom User user where (user.age%2)=1;\nfrom User user where user.age=20 and user.name like ‘%zx%’;\n```\n\n### 实体的更新和删除：\n   在继续讲解HQL其他更为强大的查询功能前，我们先来讲解以下利用HQL进行实体更新和删除的技术。这项技术功能是Hibernate3的新加入的功能，在Hibernate2\n中是不具备的。比如在Hibernate2中，如果我们想将数据库中所有18岁的用户的年龄全部改为20岁，那么我们要首先将年龄在18岁的用户检索出来，然后将他们的\n年龄修改为20岁，最后调用Session.update()语句进行更新。在Hibernate3中对这个问题提供了更加灵活和更具效率的解决办法，如下面的代码：\n\n```\nTransaction trans=session.beginTransaction();\nString hql=”update User user set user.age=20 where user.age=18”;\nQuery queryupdate=session.createQuery(hql);\nint ret=queryupdate.executeUpdate();（执行HQL查询批量数据更新，单个对象更新使用session.update(object)）\ntrans.commit();\n```\n\n通过这种方式我们可以在Hibernate3中，一次性完成批量数据的更新，对性能的提高是相当的可观。同样也可以通过类似的方式来完成delete操作，如下面的代码：\n\n```\nTransaction trans=session.beginTransaction();\nString hql=”delete from User user where user.age=18”;\nQuery queryupdate=session.createQuery(hql);\nint ret=queryupdate.executeUpdate();\ntrans.commit();\n```\n\n如果你是逐个章节阅读的化，那么你一定会记起我在第二部分中有关批量数据操作的相关论述中，讨论过这种操作方式，这种操作方式在Hibernate3中称为bulk\ndelete/update，这种方式能够在很大程度上提高操作的灵活性和运行效率，但是采用这种方式极有可能引起缓存同步上的问题(请参考相关论述)。\n\n###属性查询：\n   很多时候我们在检索数据时，并不需要获得实体对象所对应的全部数据，而只需要检索实体对象的部分属性所对应的数据。这时候就可以利用HQL属性查询技术\n，如下面程序示例：\n\n```\nList list=session.createQuery(“select user.name from User user ”).list();\nfor(int i=0;i<list.size();i++){\n System.out.println(list.get(i));\n}\n```\n\n我们只检索了User实体的name属性对应的数据，此时返回的包含结果集的list中每个条目都是String类型的name属性对应的数据。我们也可以一次检索多个属性，\n如下面程序：\n\n```\nList list=session.createQuery(“select user.name,user.age from User user ”).list();\nfor(int i=0;i<list.size();i++){\n Object[] obj=(Object[])list.get(i);\n System.out.println(obj[0]);\n System.out.println(obj[1]);\n}\n```\n\n此时返回的结果集list中，所包含的每个条目都是一个Object[]类型，其中包含对应的属性数据值。作为当今我们这一代深受面向对象思想影响的开发人员，可能\n会觉得上面返回Object[]不够符合面向对象风格，这时我们可以利用HQL提供的动态构造实例的功能对这些平面数据进行封装，如下面的程序代码：\n\n```\nList list=session.createQuery(“select new User(user.name,user.age) from User user ”).list();\nfor(int i=0;i<list.size();i++){\n User user=(User)list.get(i);\n System.out.println(user.getName());\n System.out.println(user.getAge());\n}\n```\n\n这里我们通过动态构造实例对象，对返回结果进行了封装，使我们的程序更加符合面向对象风格，但是这里有一个问题必须注意，那就是这时所返回的User对象，\n仅仅只是一个普通的Java对象而以，除了查询结果值之外，其它的属性值都为null（包括主键值id），也就是说不能通过Session对象对此对象执行持久化的更新操\n作。如下面的代码：\n\n```\nList list=session.createQuery(“select new User(user.name,user.age) from User user ”).list();\nfor(int i=0;i<list.size();i++){\n User user=(User)list.get(i);\n user.setName(“gam”);\n session.saveOrUpdate(user);//这里将会实际执行一个save操作，而不会执行update操作，因为这个User对象的id属性为null，Hibernate会把它作为一个自由对\n象（请参考持久化对象状态部分的论述），因此会对它执行save操作。\n}\n\n```\n\n\n###分组与排序\nA、Order by子句：\n    与SQL语句相似，HQL查询也可以通过order by子句对查询结果集进行排序，并且可以通过asc或者desc关键字指定排序方式，如下面的代码：\nfrom User user order by user.name asc,user.age desc;\n上面HQL查询语句，会以name属性进行升序排序，以age属性进行降序排序，而且与SQL语句一样，默认的排序方式为asc,即升序排序。\nB、Group by子句与统计查询：\n在HQL语句中同样支持使用group by子句分组查询，还支持group by子句结合聚集函数的分组统计查询，大部分标准的SQL聚集函数都可以在HQL语句中使用，比如：\n\n```\ncount(),sum(),max(),min(),avg()等。如下面的程序代码：\nString hql=”select count(user),user.age from User user group by user.age having count(user)>10 ”;\nList list=session.createQuery(hql).list();\n```\n\nC、优化统计查询：\n假设我们现在有两张数据库表，分别是customer表和order表，它们的结构如下：\n\n```\ncustomer \nID varchar2(14) \nage number(10) \nname varchar2(20)\n\norder \nID varchar2(14) \norder_number number(10) \ncustomer_ID varchar2(14)\n现在有两条HQL查询语句，分别如下：\nfrom Customer c inner join c.orders o group by c.age;(1)\n \nselect c.ID,c.name,c.age,o.ID,o.order_number,o.customer_ID\nfrom Customer c inner join c.orders c group by c.age;(2)\n\n```\n\n这两条语句使用了HQL语句的内连接查询（我们将在HQL语句的连接查询部分专门讨论），现在我们可以看出这两条查询语句最后所返回的结果是一样的，但是它们\n其实是有明显区别的，语句（1）检索的结果会返回Customer与Order持久化对象，而且它们会被置于Hibernate的Session缓存之中，并且Session会负责它们在缓存\n中的唯一性以及与后台数据库数据的同步，只有事务提交后它们才会从缓存中被清除（之前直接改数据库表内容，没有重新发布，查询出来的值就是改之前的值.PS:查询时没有提交事务）；而语句（2）返回的是关系数据而并非是持久化对象，因此它们不会占用\nHibernate的Session缓存，只要在检索之后应用程序不在访问它们，它们所占用的内存就有可能被JVM的垃圾回收器回收，而且Hibernate不会同步对它们的修改。\n在我们的系统开发中，尤其是Mis系统，不可避免的要进行统计查询的开发，这类功能有两个特点：第一数据量大；第二一般情况下都是只读操作而不会涉及到对统\n计数据进行修改，那么如果采用第一种查询方式，必然会导致大量持久化对象位于Hibernate的Session缓存中，而且Hibernate的Session缓存还要负责它们与数据\n库数据的同步。而如果采用第二种查询方式，显然就会提高查询性能，因为不需要Hibernate的Session缓存的管理开销，而且只要应用程序不在使用这些数据，它\n们所占用的内存空间就会被回收释放。\n因此在开发统计查询系统时，尽量使用通过select语句写出需要查询的属性的方式来返回关系数据，而避免使用第一种查询方式返回持久化对象（这种方式是在有\n修改需求时使用比较适合），这样可以提高运行效率并且减少内存消耗。㊣真正的高手并不是精通一切，而是精通在合适的场合使用合适的手段。\n \n###参数绑定：\n　　Hibernate中对动态查询参数绑定提供了丰富的支持，那么什么是查询参数动态绑定呢？其实如果我们熟悉传统JDBC编程的话，我们就不难理解查询参数动态绑定，如下代码传统JDBC的参数绑定：\n\n```\n　　PrepareStatement pre=connection.prepare(“select * from User where user.name=?”);\n　　pre.setString(1,”zhaoxin”);\n　　ResultSet rs=pre.executeQuery();\n```\n\n　　在Hibernate中也提供了类似这种的查询参数绑定功能，而且在Hibernate中对这个功能还提供了比传统JDBC操作丰富的多的特性，在Hibernate中共存在4种参数绑定的方式，下面我们将分别介绍：\n　　A、 按参数名称绑定：\n　　在HQL语句中定义命名参数要用”:”开头，形式如下：\n\n```\n　　Query query=session.createQuery(“from User user where user.name=:customername anduser:customerage=:age ”);\n　　query.setString(“customername”,name);\n　　query.setInteger(“customerage”,age);\n```\n　　\n　　上面代码中用:customername和:customerage分别定义了命名参数customername和customerage，然后用Query接口的setXXX()方法设定名参数值，setXXX()方法包含两个参数，分别是命名参数名称和命名参数实际值。\n　　B、 按参数位置邦定：\n　　在HQL查询语句中用”?”来定义参数位置，形式如下：\n\n```\n　　Query query=session.createQuery(“from User user where user.name=? and user.age =? ”);\n　　query.setString(0,name);\n　　query.setInteger(1,age);\n```\n　　同样使用setXXX()方法设定绑定参数，只不过这时setXXX()方法的第一个参数代表邦定参数在HQL语句中出现的位置编号（由0开始编号），第二个参数仍然代表参数实际值。\n　　注：在实际开发中，提倡使用按名称邦定命名参数，因为这不但可以提供非常好的程序可读性，而且也提高了程序的易维护性，因为当查询参数的位置发生改变时，按名称邦定名参数的方式中是不需要调整程序代码的。\n　　C、 setParameter()方法：\n　　在Hibernate的HQL查询中可以通过setParameter()方法邦定任意类型的参数，如下代码：\n\n```\n　　String hql=”from User user where user.name=:customername ”;\n　　Query query=session.createQuery(hql);\n　　query.setParameter(“customername”,name,Hibernate.STRING);\n```\n　　如上面代码所示，setParameter()方法包含三个参数，分别是命名参数名称，命名参数实际值，以及命名参数映射类型。对于某些参数类型setParameter()方法可以根据参数值的Java类型，猜测出对应的映射类型，因此这时不需要显示写出映射类型，像上面的例子，可以直接这样写：\n　　query.setParameter(“customername”,name);但是对于一些类型就必须写明映射类型，比如java.util.Date类型，因为它会对应Hibernate的多种映射类型，比如Hibernate.DATA或者Hibernate.TIMESTAMP。\n　　D、 setProperties()方法：(setEntity())\n　　在Hibernate中可以使用setProperties()方法，将命名参数与一个对象的属性值绑定在一起，如下程序代码：\n　　\n```\n　　Customer customer=new Customer();\n　　customer.setName(“pansl”);\n　　customer.setAge(80);\n　　Query query=session.createQuery(“from Customer c where c.name=:name and c.age=:age ”);\n　　query.setProperties(customer);\n```　　\n\n　　setProperties()方法会自动将customer对象实例的属性值匹配到命名参数上，但是要求命名参数名称必须要与实体对象相应的属性同名。\n　　这里还有一个特殊的setEntity()方法，它会把命名参数与一个持久化对象相关联，如下面代码所示：\n\n```\n　　Customer customer=(Customer)session.load(Customer.class,”1”);\n　　Query query=session.createQuery(“from Order order where order.customer=:customer ”);\n　　query. setEntity(“customer”,customer);\n　　List list=query.list();\n```\n　　\n　　上面的代码会生成类似如下的SQL语句：\n\n```\n　　Select * from order where customer_ID=’1’;\n```\n　　E、 使用绑定参数的优势：\n　　我们为什么要使用绑定命名参数？任何一个事物的存在都是有其价值的，具体到绑定参数对于HQL查询来说，主要有以下两个主要优势：\n　　①、 可以利用数据库实施性能优化，因为对Hibernate来说在底层使用的是PrepareStatement来完成查询，因此对于语法相同参数不同的SQL语句，可以充分利用预编译SQL语句缓存，从而提升查询效率。\n　　②、 可以防止SQL Injection安全漏洞的产生：\n　　SQL Injection是一种专门针对SQL语句拼装的攻击方式，比如对于我们常见的用户登录，在登录界面上，用户输入用户名和口令，这时登录验证程序可能会生成如下的HQL语句：\n\n```\n　　“from User user where user.name=’”+name+”’ and user.password=’”+password+”’ ”\n```\n\n　　这个HQL语句从逻辑上来说是没有任何问题的，这个登录验证功能在一般情况下也是会正确完成的，但是如果在登录时在用户名中输入”zhaoxin or ‘x’=’x”,这时如果使用简单的HQL语句的字符串拼装，就会生成如下的HQL语句：\n\n```\n　　“from User user where user.name=’zhaoxin’ or ‘x’=’x’ and user.password=’admin’ ”;\n```\n　　显然这条HQL语句的where字句将会永远为真，而使用户口令的作用失去意义，这就是SQL Injection攻击的基本原理。\n　　而使用绑定参数方式，就可以妥善处理这问题,当使用绑定参数时，会得到下面的HQL语句：\n\n```\n　　from User user where user.name=’’zhaoxin’’ or ‘’x=’’x’’ ‘ and user.password=’admin’;\n```\n　　\n由此可见使用绑定参数会将用户名中输入的单引号解析成字符串（如果想在字符串中包含单引号，应使用重复单引号形式），所以参数绑定能够有效防止SQL Injection安全漏洞。\n\t\n转载自：http://blog.csdn.net/zjkstone/article/details/7884875\n\n\n","source":"_posts/hibernate/hql.md","raw":"#  hibernate--HQL语法与详细解释\nHQL查询：\nCriteria查询对查询条件进行了面向对象封装，符合编程人员的思维方式，不过HQL(Hibernate Query Lanaguage)查询提供了更加丰富的和灵活的查询特性，因此\nHibernate将HQL查询方式立为官方推荐的标准查询方式，HQL查询在涵盖Criteria查询的所有功能的前提下，提供了类似标准SQL语句的查询方式，同时也提供了更\n加面向对象的封装。完整的HQL语句形势如下：\nSelect/update/delete…… from …… where …… group by …… having …… order by …… asc/desc\n其中的update/delete为Hibernate3中所新添加的功能，可见HQL查询非常类似于标准SQL查询。由于HQL查询在整个Hibernate实体操作体系中的核心地位，这一节我\n将专门围绕HQL操作的具体技术细节进行讲解。\n \n\n### 实体查询：\n有关实体查询技术，其实我们在先前已经有多次涉及，比如下面的例子：\n\n```\nString hql=”from User user ”;\nList list=session.CreateQuery(hql).list();\n```\n上面的代码执行结果是，查询出User实体对象所对应的所有数据，而且将数据封装成User实体对象，并且放入List中返回。这里需要注意的是，Hibernate的实体查\n询存在着对继承关系的判定，比如我们前面讨论映射实体继承关系中的Employee实体对象，它有两个子类分别是HourlyEmployee，SalariedEmployee,如果有这样的\nHQL语句：“from Employee”,当执行检索时Hibernate会检索出所有Employee类型实体对象所对应的数据（包括它的子类HourlyEmployee，SalariedEmployee对应\n的数据）。\n因为HQL语句与标准SQL语句相似，所以我们也可以在HQL语句中使用where字句，并且可以在where字句中使用各种表达式，比较操作符以及使用“and”,”or”连接\n不同的查询条件的组合。看下面的一些简单的例子：\n\n```\nfrom User user where user.age=20;\nfrom User user where user.age between 20 and 30;\nfrom User user where user.age in(20,30);\nfrom User user where user.name is null;\nfrom User user where user.name like ‘%zx%’;\nfrom User user where (user.age%2)=1;\nfrom User user where user.age=20 and user.name like ‘%zx%’;\n```\n\n### 实体的更新和删除：\n   在继续讲解HQL其他更为强大的查询功能前，我们先来讲解以下利用HQL进行实体更新和删除的技术。这项技术功能是Hibernate3的新加入的功能，在Hibernate2\n中是不具备的。比如在Hibernate2中，如果我们想将数据库中所有18岁的用户的年龄全部改为20岁，那么我们要首先将年龄在18岁的用户检索出来，然后将他们的\n年龄修改为20岁，最后调用Session.update()语句进行更新。在Hibernate3中对这个问题提供了更加灵活和更具效率的解决办法，如下面的代码：\n\n```\nTransaction trans=session.beginTransaction();\nString hql=”update User user set user.age=20 where user.age=18”;\nQuery queryupdate=session.createQuery(hql);\nint ret=queryupdate.executeUpdate();（执行HQL查询批量数据更新，单个对象更新使用session.update(object)）\ntrans.commit();\n```\n\n通过这种方式我们可以在Hibernate3中，一次性完成批量数据的更新，对性能的提高是相当的可观。同样也可以通过类似的方式来完成delete操作，如下面的代码：\n\n```\nTransaction trans=session.beginTransaction();\nString hql=”delete from User user where user.age=18”;\nQuery queryupdate=session.createQuery(hql);\nint ret=queryupdate.executeUpdate();\ntrans.commit();\n```\n\n如果你是逐个章节阅读的化，那么你一定会记起我在第二部分中有关批量数据操作的相关论述中，讨论过这种操作方式，这种操作方式在Hibernate3中称为bulk\ndelete/update，这种方式能够在很大程度上提高操作的灵活性和运行效率，但是采用这种方式极有可能引起缓存同步上的问题(请参考相关论述)。\n\n###属性查询：\n   很多时候我们在检索数据时，并不需要获得实体对象所对应的全部数据，而只需要检索实体对象的部分属性所对应的数据。这时候就可以利用HQL属性查询技术\n，如下面程序示例：\n\n```\nList list=session.createQuery(“select user.name from User user ”).list();\nfor(int i=0;i<list.size();i++){\n System.out.println(list.get(i));\n}\n```\n\n我们只检索了User实体的name属性对应的数据，此时返回的包含结果集的list中每个条目都是String类型的name属性对应的数据。我们也可以一次检索多个属性，\n如下面程序：\n\n```\nList list=session.createQuery(“select user.name,user.age from User user ”).list();\nfor(int i=0;i<list.size();i++){\n Object[] obj=(Object[])list.get(i);\n System.out.println(obj[0]);\n System.out.println(obj[1]);\n}\n```\n\n此时返回的结果集list中，所包含的每个条目都是一个Object[]类型，其中包含对应的属性数据值。作为当今我们这一代深受面向对象思想影响的开发人员，可能\n会觉得上面返回Object[]不够符合面向对象风格，这时我们可以利用HQL提供的动态构造实例的功能对这些平面数据进行封装，如下面的程序代码：\n\n```\nList list=session.createQuery(“select new User(user.name,user.age) from User user ”).list();\nfor(int i=0;i<list.size();i++){\n User user=(User)list.get(i);\n System.out.println(user.getName());\n System.out.println(user.getAge());\n}\n```\n\n这里我们通过动态构造实例对象，对返回结果进行了封装，使我们的程序更加符合面向对象风格，但是这里有一个问题必须注意，那就是这时所返回的User对象，\n仅仅只是一个普通的Java对象而以，除了查询结果值之外，其它的属性值都为null（包括主键值id），也就是说不能通过Session对象对此对象执行持久化的更新操\n作。如下面的代码：\n\n```\nList list=session.createQuery(“select new User(user.name,user.age) from User user ”).list();\nfor(int i=0;i<list.size();i++){\n User user=(User)list.get(i);\n user.setName(“gam”);\n session.saveOrUpdate(user);//这里将会实际执行一个save操作，而不会执行update操作，因为这个User对象的id属性为null，Hibernate会把它作为一个自由对\n象（请参考持久化对象状态部分的论述），因此会对它执行save操作。\n}\n\n```\n\n\n###分组与排序\nA、Order by子句：\n    与SQL语句相似，HQL查询也可以通过order by子句对查询结果集进行排序，并且可以通过asc或者desc关键字指定排序方式，如下面的代码：\nfrom User user order by user.name asc,user.age desc;\n上面HQL查询语句，会以name属性进行升序排序，以age属性进行降序排序，而且与SQL语句一样，默认的排序方式为asc,即升序排序。\nB、Group by子句与统计查询：\n在HQL语句中同样支持使用group by子句分组查询，还支持group by子句结合聚集函数的分组统计查询，大部分标准的SQL聚集函数都可以在HQL语句中使用，比如：\n\n```\ncount(),sum(),max(),min(),avg()等。如下面的程序代码：\nString hql=”select count(user),user.age from User user group by user.age having count(user)>10 ”;\nList list=session.createQuery(hql).list();\n```\n\nC、优化统计查询：\n假设我们现在有两张数据库表，分别是customer表和order表，它们的结构如下：\n\n```\ncustomer \nID varchar2(14) \nage number(10) \nname varchar2(20)\n\norder \nID varchar2(14) \norder_number number(10) \ncustomer_ID varchar2(14)\n现在有两条HQL查询语句，分别如下：\nfrom Customer c inner join c.orders o group by c.age;(1)\n \nselect c.ID,c.name,c.age,o.ID,o.order_number,o.customer_ID\nfrom Customer c inner join c.orders c group by c.age;(2)\n\n```\n\n这两条语句使用了HQL语句的内连接查询（我们将在HQL语句的连接查询部分专门讨论），现在我们可以看出这两条查询语句最后所返回的结果是一样的，但是它们\n其实是有明显区别的，语句（1）检索的结果会返回Customer与Order持久化对象，而且它们会被置于Hibernate的Session缓存之中，并且Session会负责它们在缓存\n中的唯一性以及与后台数据库数据的同步，只有事务提交后它们才会从缓存中被清除（之前直接改数据库表内容，没有重新发布，查询出来的值就是改之前的值.PS:查询时没有提交事务）；而语句（2）返回的是关系数据而并非是持久化对象，因此它们不会占用\nHibernate的Session缓存，只要在检索之后应用程序不在访问它们，它们所占用的内存就有可能被JVM的垃圾回收器回收，而且Hibernate不会同步对它们的修改。\n在我们的系统开发中，尤其是Mis系统，不可避免的要进行统计查询的开发，这类功能有两个特点：第一数据量大；第二一般情况下都是只读操作而不会涉及到对统\n计数据进行修改，那么如果采用第一种查询方式，必然会导致大量持久化对象位于Hibernate的Session缓存中，而且Hibernate的Session缓存还要负责它们与数据\n库数据的同步。而如果采用第二种查询方式，显然就会提高查询性能，因为不需要Hibernate的Session缓存的管理开销，而且只要应用程序不在使用这些数据，它\n们所占用的内存空间就会被回收释放。\n因此在开发统计查询系统时，尽量使用通过select语句写出需要查询的属性的方式来返回关系数据，而避免使用第一种查询方式返回持久化对象（这种方式是在有\n修改需求时使用比较适合），这样可以提高运行效率并且减少内存消耗。㊣真正的高手并不是精通一切，而是精通在合适的场合使用合适的手段。\n \n###参数绑定：\n　　Hibernate中对动态查询参数绑定提供了丰富的支持，那么什么是查询参数动态绑定呢？其实如果我们熟悉传统JDBC编程的话，我们就不难理解查询参数动态绑定，如下代码传统JDBC的参数绑定：\n\n```\n　　PrepareStatement pre=connection.prepare(“select * from User where user.name=?”);\n　　pre.setString(1,”zhaoxin”);\n　　ResultSet rs=pre.executeQuery();\n```\n\n　　在Hibernate中也提供了类似这种的查询参数绑定功能，而且在Hibernate中对这个功能还提供了比传统JDBC操作丰富的多的特性，在Hibernate中共存在4种参数绑定的方式，下面我们将分别介绍：\n　　A、 按参数名称绑定：\n　　在HQL语句中定义命名参数要用”:”开头，形式如下：\n\n```\n　　Query query=session.createQuery(“from User user where user.name=:customername anduser:customerage=:age ”);\n　　query.setString(“customername”,name);\n　　query.setInteger(“customerage”,age);\n```\n　　\n　　上面代码中用:customername和:customerage分别定义了命名参数customername和customerage，然后用Query接口的setXXX()方法设定名参数值，setXXX()方法包含两个参数，分别是命名参数名称和命名参数实际值。\n　　B、 按参数位置邦定：\n　　在HQL查询语句中用”?”来定义参数位置，形式如下：\n\n```\n　　Query query=session.createQuery(“from User user where user.name=? and user.age =? ”);\n　　query.setString(0,name);\n　　query.setInteger(1,age);\n```\n　　同样使用setXXX()方法设定绑定参数，只不过这时setXXX()方法的第一个参数代表邦定参数在HQL语句中出现的位置编号（由0开始编号），第二个参数仍然代表参数实际值。\n　　注：在实际开发中，提倡使用按名称邦定命名参数，因为这不但可以提供非常好的程序可读性，而且也提高了程序的易维护性，因为当查询参数的位置发生改变时，按名称邦定名参数的方式中是不需要调整程序代码的。\n　　C、 setParameter()方法：\n　　在Hibernate的HQL查询中可以通过setParameter()方法邦定任意类型的参数，如下代码：\n\n```\n　　String hql=”from User user where user.name=:customername ”;\n　　Query query=session.createQuery(hql);\n　　query.setParameter(“customername”,name,Hibernate.STRING);\n```\n　　如上面代码所示，setParameter()方法包含三个参数，分别是命名参数名称，命名参数实际值，以及命名参数映射类型。对于某些参数类型setParameter()方法可以根据参数值的Java类型，猜测出对应的映射类型，因此这时不需要显示写出映射类型，像上面的例子，可以直接这样写：\n　　query.setParameter(“customername”,name);但是对于一些类型就必须写明映射类型，比如java.util.Date类型，因为它会对应Hibernate的多种映射类型，比如Hibernate.DATA或者Hibernate.TIMESTAMP。\n　　D、 setProperties()方法：(setEntity())\n　　在Hibernate中可以使用setProperties()方法，将命名参数与一个对象的属性值绑定在一起，如下程序代码：\n　　\n```\n　　Customer customer=new Customer();\n　　customer.setName(“pansl”);\n　　customer.setAge(80);\n　　Query query=session.createQuery(“from Customer c where c.name=:name and c.age=:age ”);\n　　query.setProperties(customer);\n```　　\n\n　　setProperties()方法会自动将customer对象实例的属性值匹配到命名参数上，但是要求命名参数名称必须要与实体对象相应的属性同名。\n　　这里还有一个特殊的setEntity()方法，它会把命名参数与一个持久化对象相关联，如下面代码所示：\n\n```\n　　Customer customer=(Customer)session.load(Customer.class,”1”);\n　　Query query=session.createQuery(“from Order order where order.customer=:customer ”);\n　　query. setEntity(“customer”,customer);\n　　List list=query.list();\n```\n　　\n　　上面的代码会生成类似如下的SQL语句：\n\n```\n　　Select * from order where customer_ID=’1’;\n```\n　　E、 使用绑定参数的优势：\n　　我们为什么要使用绑定命名参数？任何一个事物的存在都是有其价值的，具体到绑定参数对于HQL查询来说，主要有以下两个主要优势：\n　　①、 可以利用数据库实施性能优化，因为对Hibernate来说在底层使用的是PrepareStatement来完成查询，因此对于语法相同参数不同的SQL语句，可以充分利用预编译SQL语句缓存，从而提升查询效率。\n　　②、 可以防止SQL Injection安全漏洞的产生：\n　　SQL Injection是一种专门针对SQL语句拼装的攻击方式，比如对于我们常见的用户登录，在登录界面上，用户输入用户名和口令，这时登录验证程序可能会生成如下的HQL语句：\n\n```\n　　“from User user where user.name=’”+name+”’ and user.password=’”+password+”’ ”\n```\n\n　　这个HQL语句从逻辑上来说是没有任何问题的，这个登录验证功能在一般情况下也是会正确完成的，但是如果在登录时在用户名中输入”zhaoxin or ‘x’=’x”,这时如果使用简单的HQL语句的字符串拼装，就会生成如下的HQL语句：\n\n```\n　　“from User user where user.name=’zhaoxin’ or ‘x’=’x’ and user.password=’admin’ ”;\n```\n　　显然这条HQL语句的where字句将会永远为真，而使用户口令的作用失去意义，这就是SQL Injection攻击的基本原理。\n　　而使用绑定参数方式，就可以妥善处理这问题,当使用绑定参数时，会得到下面的HQL语句：\n\n```\n　　from User user where user.name=’’zhaoxin’’ or ‘’x=’’x’’ ‘ and user.password=’admin’;\n```\n　　\n由此可见使用绑定参数会将用户名中输入的单引号解析成字符串（如果想在字符串中包含单引号，应使用重复单引号形式），所以参数绑定能够有效防止SQL Injection安全漏洞。\n\t\n转载自：http://blog.csdn.net/zjkstone/article/details/7884875\n\n\n","slug":"hibernate/hql","published":1,"date":"2018-11-20T14:55:26.974Z","updated":"2018-11-20T14:55:26.975Z","title":"","comments":1,"layout":"post","photos":[],"link":"","_id":"cjopxmsqz000cwfo8vunjgzrf","content":"<h1><span id=\"hibernatehql语法与详细解释\">hibernate–HQL语法与详细解释</span></h1><p>HQL查询：<br>Criteria查询对查询条件进行了面向对象封装，符合编程人员的思维方式，不过HQL(Hibernate Query Lanaguage)查询提供了更加丰富的和灵活的查询特性，因此<br>Hibernate将HQL查询方式立为官方推荐的标准查询方式，HQL查询在涵盖Criteria查询的所有功能的前提下，提供了类似标准SQL语句的查询方式，同时也提供了更<br>加面向对象的封装。完整的HQL语句形势如下：<br>Select/update/delete…… from …… where …… group by …… having …… order by …… asc/desc<br>其中的update/delete为Hibernate3中所新添加的功能，可见HQL查询非常类似于标准SQL查询。由于HQL查询在整个Hibernate实体操作体系中的核心地位，这一节我<br>将专门围绕HQL操作的具体技术细节进行讲解。</p>\n<h3><span id=\"实体查询\">实体查询：</span></h3><p>有关实体查询技术，其实我们在先前已经有多次涉及，比如下面的例子：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">String hql=”from User user ”;</span><br><span class=\"line\">List list=session.CreateQuery(hql).list();</span><br></pre></td></tr></table></figure>\n<p>上面的代码执行结果是，查询出User实体对象所对应的所有数据，而且将数据封装成User实体对象，并且放入List中返回。这里需要注意的是，Hibernate的实体查<br>询存在着对继承关系的判定，比如我们前面讨论映射实体继承关系中的Employee实体对象，它有两个子类分别是HourlyEmployee，SalariedEmployee,如果有这样的<br>HQL语句：“from Employee”,当执行检索时Hibernate会检索出所有Employee类型实体对象所对应的数据（包括它的子类HourlyEmployee，SalariedEmployee对应<br>的数据）。<br>因为HQL语句与标准SQL语句相似，所以我们也可以在HQL语句中使用where字句，并且可以在where字句中使用各种表达式，比较操作符以及使用“and”,”or”连接<br>不同的查询条件的组合。看下面的一些简单的例子：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">from User user where user.age=20;</span><br><span class=\"line\">from User user where user.age between 20 and 30;</span><br><span class=\"line\">from User user where user.age in(20,30);</span><br><span class=\"line\">from User user where user.name is null;</span><br><span class=\"line\">from User user where user.name like ‘%zx%’;</span><br><span class=\"line\">from User user where (user.age%2)=1;</span><br><span class=\"line\">from User user where user.age=20 and user.name like ‘%zx%’;</span><br></pre></td></tr></table></figure>\n<h3><span id=\"实体的更新和删除\">实体的更新和删除：</span></h3><p>   在继续讲解HQL其他更为强大的查询功能前，我们先来讲解以下利用HQL进行实体更新和删除的技术。这项技术功能是Hibernate3的新加入的功能，在Hibernate2<br>中是不具备的。比如在Hibernate2中，如果我们想将数据库中所有18岁的用户的年龄全部改为20岁，那么我们要首先将年龄在18岁的用户检索出来，然后将他们的<br>年龄修改为20岁，最后调用Session.update()语句进行更新。在Hibernate3中对这个问题提供了更加灵活和更具效率的解决办法，如下面的代码：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Transaction trans=session.beginTransaction();</span><br><span class=\"line\">String hql=”update User user set user.age=20 where user.age=18”;</span><br><span class=\"line\">Query queryupdate=session.createQuery(hql);</span><br><span class=\"line\">int ret=queryupdate.executeUpdate();（执行HQL查询批量数据更新，单个对象更新使用session.update(object)）</span><br><span class=\"line\">trans.commit();</span><br></pre></td></tr></table></figure>\n<p>通过这种方式我们可以在Hibernate3中，一次性完成批量数据的更新，对性能的提高是相当的可观。同样也可以通过类似的方式来完成delete操作，如下面的代码：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Transaction trans=session.beginTransaction();</span><br><span class=\"line\">String hql=”delete from User user where user.age=18”;</span><br><span class=\"line\">Query queryupdate=session.createQuery(hql);</span><br><span class=\"line\">int ret=queryupdate.executeUpdate();</span><br><span class=\"line\">trans.commit();</span><br></pre></td></tr></table></figure>\n<p>如果你是逐个章节阅读的化，那么你一定会记起我在第二部分中有关批量数据操作的相关论述中，讨论过这种操作方式，这种操作方式在Hibernate3中称为bulk<br>delete/update，这种方式能够在很大程度上提高操作的灵活性和运行效率，但是采用这种方式极有可能引起缓存同步上的问题(请参考相关论述)。</p>\n<p>###属性查询：<br>   很多时候我们在检索数据时，并不需要获得实体对象所对应的全部数据，而只需要检索实体对象的部分属性所对应的数据。这时候就可以利用HQL属性查询技术<br>，如下面程序示例：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">List list=session.createQuery(“select user.name from User user ”).list();</span><br><span class=\"line\">for(int i=0;i&lt;list.size();i++)&#123;</span><br><span class=\"line\"> System.out.println(list.get(i));</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>我们只检索了User实体的name属性对应的数据，此时返回的包含结果集的list中每个条目都是String类型的name属性对应的数据。我们也可以一次检索多个属性，<br>如下面程序：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">List list=session.createQuery(“select user.name,user.age from User user ”).list();</span><br><span class=\"line\">for(int i=0;i&lt;list.size();i++)&#123;</span><br><span class=\"line\"> Object[] obj=(Object[])list.get(i);</span><br><span class=\"line\"> System.out.println(obj[0]);</span><br><span class=\"line\"> System.out.println(obj[1]);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>此时返回的结果集list中，所包含的每个条目都是一个Object[]类型，其中包含对应的属性数据值。作为当今我们这一代深受面向对象思想影响的开发人员，可能<br>会觉得上面返回Object[]不够符合面向对象风格，这时我们可以利用HQL提供的动态构造实例的功能对这些平面数据进行封装，如下面的程序代码：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">List list=session.createQuery(“select new User(user.name,user.age) from User user ”).list();</span><br><span class=\"line\">for(int i=0;i&lt;list.size();i++)&#123;</span><br><span class=\"line\"> User user=(User)list.get(i);</span><br><span class=\"line\"> System.out.println(user.getName());</span><br><span class=\"line\"> System.out.println(user.getAge());</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这里我们通过动态构造实例对象，对返回结果进行了封装，使我们的程序更加符合面向对象风格，但是这里有一个问题必须注意，那就是这时所返回的User对象，<br>仅仅只是一个普通的Java对象而以，除了查询结果值之外，其它的属性值都为null（包括主键值id），也就是说不能通过Session对象对此对象执行持久化的更新操<br>作。如下面的代码：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">List list=session.createQuery(“select new User(user.name,user.age) from User user ”).list();</span><br><span class=\"line\">for(int i=0;i&lt;list.size();i++)&#123;</span><br><span class=\"line\"> User user=(User)list.get(i);</span><br><span class=\"line\"> user.setName(“gam”);</span><br><span class=\"line\"> session.saveOrUpdate(user);//这里将会实际执行一个save操作，而不会执行update操作，因为这个User对象的id属性为null，Hibernate会把它作为一个自由对</span><br><span class=\"line\">象（请参考持久化对象状态部分的论述），因此会对它执行save操作。</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>###分组与排序<br>A、Order by子句：<br>    与SQL语句相似，HQL查询也可以通过order by子句对查询结果集进行排序，并且可以通过asc或者desc关键字指定排序方式，如下面的代码：<br>from User user order by user.name asc,user.age desc;<br>上面HQL查询语句，会以name属性进行升序排序，以age属性进行降序排序，而且与SQL语句一样，默认的排序方式为asc,即升序排序。<br>B、Group by子句与统计查询：<br>在HQL语句中同样支持使用group by子句分组查询，还支持group by子句结合聚集函数的分组统计查询，大部分标准的SQL聚集函数都可以在HQL语句中使用，比如：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">count(),sum(),max(),min(),avg()等。如下面的程序代码：</span><br><span class=\"line\">String hql=”select count(user),user.age from User user group by user.age having count(user)&gt;10 ”;</span><br><span class=\"line\">List list=session.createQuery(hql).list();</span><br></pre></td></tr></table></figure>\n<p>C、优化统计查询：<br>假设我们现在有两张数据库表，分别是customer表和order表，它们的结构如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">customer </span><br><span class=\"line\">ID varchar2(14) </span><br><span class=\"line\">age number(10) </span><br><span class=\"line\">name varchar2(20)</span><br><span class=\"line\"></span><br><span class=\"line\">order </span><br><span class=\"line\">ID varchar2(14) </span><br><span class=\"line\">order_number number(10) </span><br><span class=\"line\">customer_ID varchar2(14)</span><br><span class=\"line\">现在有两条HQL查询语句，分别如下：</span><br><span class=\"line\">from Customer c inner join c.orders o group by c.age;(1)</span><br><span class=\"line\"> </span><br><span class=\"line\">select c.ID,c.name,c.age,o.ID,o.order_number,o.customer_ID</span><br><span class=\"line\">from Customer c inner join c.orders c group by c.age;(2)</span><br></pre></td></tr></table></figure>\n<p>这两条语句使用了HQL语句的内连接查询（我们将在HQL语句的连接查询部分专门讨论），现在我们可以看出这两条查询语句最后所返回的结果是一样的，但是它们<br>其实是有明显区别的，语句（1）检索的结果会返回Customer与Order持久化对象，而且它们会被置于Hibernate的Session缓存之中，并且Session会负责它们在缓存<br>中的唯一性以及与后台数据库数据的同步，只有事务提交后它们才会从缓存中被清除（之前直接改数据库表内容，没有重新发布，查询出来的值就是改之前的值.PS:查询时没有提交事务）；而语句（2）返回的是关系数据而并非是持久化对象，因此它们不会占用<br>Hibernate的Session缓存，只要在检索之后应用程序不在访问它们，它们所占用的内存就有可能被JVM的垃圾回收器回收，而且Hibernate不会同步对它们的修改。<br>在我们的系统开发中，尤其是Mis系统，不可避免的要进行统计查询的开发，这类功能有两个特点：第一数据量大；第二一般情况下都是只读操作而不会涉及到对统<br>计数据进行修改，那么如果采用第一种查询方式，必然会导致大量持久化对象位于Hibernate的Session缓存中，而且Hibernate的Session缓存还要负责它们与数据<br>库数据的同步。而如果采用第二种查询方式，显然就会提高查询性能，因为不需要Hibernate的Session缓存的管理开销，而且只要应用程序不在使用这些数据，它<br>们所占用的内存空间就会被回收释放。<br>因此在开发统计查询系统时，尽量使用通过select语句写出需要查询的属性的方式来返回关系数据，而避免使用第一种查询方式返回持久化对象（这种方式是在有<br>修改需求时使用比较适合），这样可以提高运行效率并且减少内存消耗。㊣真正的高手并不是精通一切，而是精通在合适的场合使用合适的手段。</p>\n<p>###参数绑定：<br>　　Hibernate中对动态查询参数绑定提供了丰富的支持，那么什么是查询参数动态绑定呢？其实如果我们熟悉传统JDBC编程的话，我们就不难理解查询参数动态绑定，如下代码传统JDBC的参数绑定：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">　　PrepareStatement pre=connection.prepare(“select * from User where user.name=?”);</span><br><span class=\"line\">　　pre.setString(1,”zhaoxin”);</span><br><span class=\"line\">　　ResultSet rs=pre.executeQuery();</span><br></pre></td></tr></table></figure>\n<p>　　在Hibernate中也提供了类似这种的查询参数绑定功能，而且在Hibernate中对这个功能还提供了比传统JDBC操作丰富的多的特性，在Hibernate中共存在4种参数绑定的方式，下面我们将分别介绍：<br>　　A、 按参数名称绑定：<br>　　在HQL语句中定义命名参数要用”:”开头，形式如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">　　Query query=session.createQuery(“from User user where user.name=:customername anduser:customerage=:age ”);</span><br><span class=\"line\">　　query.setString(“customername”,name);</span><br><span class=\"line\">　　query.setInteger(“customerage”,age);</span><br></pre></td></tr></table></figure>\n<p>　　<br>　　上面代码中用:customername和:customerage分别定义了命名参数customername和customerage，然后用Query接口的setXXX()方法设定名参数值，setXXX()方法包含两个参数，分别是命名参数名称和命名参数实际值。<br>　　B、 按参数位置邦定：<br>　　在HQL查询语句中用”?”来定义参数位置，形式如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">　　Query query=session.createQuery(“from User user where user.name=? and user.age =? ”);</span><br><span class=\"line\">　　query.setString(0,name);</span><br><span class=\"line\">　　query.setInteger(1,age);</span><br></pre></td></tr></table></figure>\n<p>　　同样使用setXXX()方法设定绑定参数，只不过这时setXXX()方法的第一个参数代表邦定参数在HQL语句中出现的位置编号（由0开始编号），第二个参数仍然代表参数实际值。<br>　　注：在实际开发中，提倡使用按名称邦定命名参数，因为这不但可以提供非常好的程序可读性，而且也提高了程序的易维护性，因为当查询参数的位置发生改变时，按名称邦定名参数的方式中是不需要调整程序代码的。<br>　　C、 setParameter()方法：<br>　　在Hibernate的HQL查询中可以通过setParameter()方法邦定任意类型的参数，如下代码：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">　　String hql=”from User user where user.name=:customername ”;</span><br><span class=\"line\">　　Query query=session.createQuery(hql);</span><br><span class=\"line\">　　query.setParameter(“customername”,name,Hibernate.STRING);</span><br></pre></td></tr></table></figure>\n<p>　　如上面代码所示，setParameter()方法包含三个参数，分别是命名参数名称，命名参数实际值，以及命名参数映射类型。对于某些参数类型setParameter()方法可以根据参数值的Java类型，猜测出对应的映射类型，因此这时不需要显示写出映射类型，像上面的例子，可以直接这样写：<br>　　query.setParameter(“customername”,name);但是对于一些类型就必须写明映射类型，比如java.util.Date类型，因为它会对应Hibernate的多种映射类型，比如Hibernate.DATA或者Hibernate.TIMESTAMP。<br>　　D、 setProperties()方法：(setEntity())<br>　　在Hibernate中可以使用setProperties()方法，将命名参数与一个对象的属性值绑定在一起，如下程序代码：<br>　　<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">　　Customer customer=new Customer();</span><br><span class=\"line\">　　customer.setName(“pansl”);</span><br><span class=\"line\">　　customer.setAge(80);</span><br><span class=\"line\">　　Query query=session.createQuery(“from Customer c where c.name=:name and c.age=:age ”);</span><br><span class=\"line\">　　query.setProperties(customer);</span><br><span class=\"line\">```　　</span><br><span class=\"line\"></span><br><span class=\"line\">　　setProperties()方法会自动将customer对象实例的属性值匹配到命名参数上，但是要求命名参数名称必须要与实体对象相应的属性同名。</span><br><span class=\"line\">　　这里还有一个特殊的setEntity()方法，它会把命名参数与一个持久化对象相关联，如下面代码所示：</span><br></pre></td></tr></table></figure></p>\n<p>　　Customer customer=(Customer)session.load(Customer.class,”1”);<br>　　Query query=session.createQuery(“from Order order where order.customer=:customer ”);<br>　　query. setEntity(“customer”,customer);<br>　　List list=query.list();<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">　　</span><br><span class=\"line\">　　上面的代码会生成类似如下的SQL语句：</span><br></pre></td></tr></table></figure></p>\n<p>　　Select * from order where customer_ID=’1’;<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">　　E、 使用绑定参数的优势：</span><br><span class=\"line\">　　我们为什么要使用绑定命名参数？任何一个事物的存在都是有其价值的，具体到绑定参数对于HQL查询来说，主要有以下两个主要优势：</span><br><span class=\"line\">　　①、 可以利用数据库实施性能优化，因为对Hibernate来说在底层使用的是PrepareStatement来完成查询，因此对于语法相同参数不同的SQL语句，可以充分利用预编译SQL语句缓存，从而提升查询效率。</span><br><span class=\"line\">　　②、 可以防止SQL Injection安全漏洞的产生：</span><br><span class=\"line\">　　SQL Injection是一种专门针对SQL语句拼装的攻击方式，比如对于我们常见的用户登录，在登录界面上，用户输入用户名和口令，这时登录验证程序可能会生成如下的HQL语句：</span><br></pre></td></tr></table></figure></p>\n<p>　　“from User user where user.name=’”+name+”’ and user.password=’”+password+”’ ”<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">　　这个HQL语句从逻辑上来说是没有任何问题的，这个登录验证功能在一般情况下也是会正确完成的，但是如果在登录时在用户名中输入”zhaoxin or ‘x’=’x”,这时如果使用简单的HQL语句的字符串拼装，就会生成如下的HQL语句：</span><br></pre></td></tr></table></figure></p>\n<p>　　“from User user where user.name=’zhaoxin’ or ‘x’=’x’ and user.password=’admin’ ”;<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">　　显然这条HQL语句的where字句将会永远为真，而使用户口令的作用失去意义，这就是SQL Injection攻击的基本原理。</span><br><span class=\"line\">　　而使用绑定参数方式，就可以妥善处理这问题,当使用绑定参数时，会得到下面的HQL语句：</span><br></pre></td></tr></table></figure></p>\n<p>　　from User user where user.name=’’zhaoxin’’ or ‘’x=’’x’’ ‘ and user.password=’admin’;<br><code>`</code><br>　　<br>由此可见使用绑定参数会将用户名中输入的单引号解析成字符串（如果想在字符串中包含单引号，应使用重复单引号形式），所以参数绑定能够有效防止SQL Injection安全漏洞。</p>\n<p>转载自：<a href=\"http://blog.csdn.net/zjkstone/article/details/7884875\" target=\"_blank\" rel=\"noopener\">http://blog.csdn.net/zjkstone/article/details/7884875</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"hibernate–HQL语法与详细解释\"><a href=\"#hibernate–HQL语法与详细解释\" class=\"headerlink\" title=\"hibernate–HQL语法与详细解释\"></a>hibernate–HQL语法与详细解释</h1><p>HQL查询：<br>Criteria查询对查询条件进行了面向对象封装，符合编程人员的思维方式，不过HQL(Hibernate Query Lanaguage)查询提供了更加丰富的和灵活的查询特性，因此<br>Hibernate将HQL查询方式立为官方推荐的标准查询方式，HQL查询在涵盖Criteria查询的所有功能的前提下，提供了类似标准SQL语句的查询方式，同时也提供了更<br>加面向对象的封装。完整的HQL语句形势如下：<br>Select/update/delete…… from …… where …… group by …… having …… order by …… asc/desc<br>其中的update/delete为Hibernate3中所新添加的功能，可见HQL查询非常类似于标准SQL查询。由于HQL查询在整个Hibernate实体操作体系中的核心地位，这一节我<br>将专门围绕HQL操作的具体技术细节进行讲解。</p>\n<h3 id=\"实体查询：\"><a href=\"#实体查询：\" class=\"headerlink\" title=\"实体查询：\"></a>实体查询：</h3><p>有关实体查询技术，其实我们在先前已经有多次涉及，比如下面的例子：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">String hql=”from User user ”;</span><br><span class=\"line\">List list=session.CreateQuery(hql).list();</span><br></pre></td></tr></table></figure>\n<p>上面的代码执行结果是，查询出User实体对象所对应的所有数据，而且将数据封装成User实体对象，并且放入List中返回。这里需要注意的是，Hibernate的实体查<br>询存在着对继承关系的判定，比如我们前面讨论映射实体继承关系中的Employee实体对象，它有两个子类分别是HourlyEmployee，SalariedEmployee,如果有这样的<br>HQL语句：“from Employee”,当执行检索时Hibernate会检索出所有Employee类型实体对象所对应的数据（包括它的子类HourlyEmployee，SalariedEmployee对应<br>的数据）。<br>因为HQL语句与标准SQL语句相似，所以我们也可以在HQL语句中使用where字句，并且可以在where字句中使用各种表达式，比较操作符以及使用“and”,”or”连接<br>不同的查询条件的组合。看下面的一些简单的例子：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">from User user where user.age=20;</span><br><span class=\"line\">from User user where user.age between 20 and 30;</span><br><span class=\"line\">from User user where user.age in(20,30);</span><br><span class=\"line\">from User user where user.name is null;</span><br><span class=\"line\">from User user where user.name like ‘%zx%’;</span><br><span class=\"line\">from User user where (user.age%2)=1;</span><br><span class=\"line\">from User user where user.age=20 and user.name like ‘%zx%’;</span><br></pre></td></tr></table></figure>\n<h3 id=\"实体的更新和删除：\"><a href=\"#实体的更新和删除：\" class=\"headerlink\" title=\"实体的更新和删除：\"></a>实体的更新和删除：</h3><p>   在继续讲解HQL其他更为强大的查询功能前，我们先来讲解以下利用HQL进行实体更新和删除的技术。这项技术功能是Hibernate3的新加入的功能，在Hibernate2<br>中是不具备的。比如在Hibernate2中，如果我们想将数据库中所有18岁的用户的年龄全部改为20岁，那么我们要首先将年龄在18岁的用户检索出来，然后将他们的<br>年龄修改为20岁，最后调用Session.update()语句进行更新。在Hibernate3中对这个问题提供了更加灵活和更具效率的解决办法，如下面的代码：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Transaction trans=session.beginTransaction();</span><br><span class=\"line\">String hql=”update User user set user.age=20 where user.age=18”;</span><br><span class=\"line\">Query queryupdate=session.createQuery(hql);</span><br><span class=\"line\">int ret=queryupdate.executeUpdate();（执行HQL查询批量数据更新，单个对象更新使用session.update(object)）</span><br><span class=\"line\">trans.commit();</span><br></pre></td></tr></table></figure>\n<p>通过这种方式我们可以在Hibernate3中，一次性完成批量数据的更新，对性能的提高是相当的可观。同样也可以通过类似的方式来完成delete操作，如下面的代码：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Transaction trans=session.beginTransaction();</span><br><span class=\"line\">String hql=”delete from User user where user.age=18”;</span><br><span class=\"line\">Query queryupdate=session.createQuery(hql);</span><br><span class=\"line\">int ret=queryupdate.executeUpdate();</span><br><span class=\"line\">trans.commit();</span><br></pre></td></tr></table></figure>\n<p>如果你是逐个章节阅读的化，那么你一定会记起我在第二部分中有关批量数据操作的相关论述中，讨论过这种操作方式，这种操作方式在Hibernate3中称为bulk<br>delete/update，这种方式能够在很大程度上提高操作的灵活性和运行效率，但是采用这种方式极有可能引起缓存同步上的问题(请参考相关论述)。</p>\n<p>###属性查询：<br>   很多时候我们在检索数据时，并不需要获得实体对象所对应的全部数据，而只需要检索实体对象的部分属性所对应的数据。这时候就可以利用HQL属性查询技术<br>，如下面程序示例：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">List list=session.createQuery(“select user.name from User user ”).list();</span><br><span class=\"line\">for(int i=0;i&lt;list.size();i++)&#123;</span><br><span class=\"line\"> System.out.println(list.get(i));</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>我们只检索了User实体的name属性对应的数据，此时返回的包含结果集的list中每个条目都是String类型的name属性对应的数据。我们也可以一次检索多个属性，<br>如下面程序：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">List list=session.createQuery(“select user.name,user.age from User user ”).list();</span><br><span class=\"line\">for(int i=0;i&lt;list.size();i++)&#123;</span><br><span class=\"line\"> Object[] obj=(Object[])list.get(i);</span><br><span class=\"line\"> System.out.println(obj[0]);</span><br><span class=\"line\"> System.out.println(obj[1]);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>此时返回的结果集list中，所包含的每个条目都是一个Object[]类型，其中包含对应的属性数据值。作为当今我们这一代深受面向对象思想影响的开发人员，可能<br>会觉得上面返回Object[]不够符合面向对象风格，这时我们可以利用HQL提供的动态构造实例的功能对这些平面数据进行封装，如下面的程序代码：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">List list=session.createQuery(“select new User(user.name,user.age) from User user ”).list();</span><br><span class=\"line\">for(int i=0;i&lt;list.size();i++)&#123;</span><br><span class=\"line\"> User user=(User)list.get(i);</span><br><span class=\"line\"> System.out.println(user.getName());</span><br><span class=\"line\"> System.out.println(user.getAge());</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这里我们通过动态构造实例对象，对返回结果进行了封装，使我们的程序更加符合面向对象风格，但是这里有一个问题必须注意，那就是这时所返回的User对象，<br>仅仅只是一个普通的Java对象而以，除了查询结果值之外，其它的属性值都为null（包括主键值id），也就是说不能通过Session对象对此对象执行持久化的更新操<br>作。如下面的代码：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">List list=session.createQuery(“select new User(user.name,user.age) from User user ”).list();</span><br><span class=\"line\">for(int i=0;i&lt;list.size();i++)&#123;</span><br><span class=\"line\"> User user=(User)list.get(i);</span><br><span class=\"line\"> user.setName(“gam”);</span><br><span class=\"line\"> session.saveOrUpdate(user);//这里将会实际执行一个save操作，而不会执行update操作，因为这个User对象的id属性为null，Hibernate会把它作为一个自由对</span><br><span class=\"line\">象（请参考持久化对象状态部分的论述），因此会对它执行save操作。</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>###分组与排序<br>A、Order by子句：<br>    与SQL语句相似，HQL查询也可以通过order by子句对查询结果集进行排序，并且可以通过asc或者desc关键字指定排序方式，如下面的代码：<br>from User user order by user.name asc,user.age desc;<br>上面HQL查询语句，会以name属性进行升序排序，以age属性进行降序排序，而且与SQL语句一样，默认的排序方式为asc,即升序排序。<br>B、Group by子句与统计查询：<br>在HQL语句中同样支持使用group by子句分组查询，还支持group by子句结合聚集函数的分组统计查询，大部分标准的SQL聚集函数都可以在HQL语句中使用，比如：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">count(),sum(),max(),min(),avg()等。如下面的程序代码：</span><br><span class=\"line\">String hql=”select count(user),user.age from User user group by user.age having count(user)&gt;10 ”;</span><br><span class=\"line\">List list=session.createQuery(hql).list();</span><br></pre></td></tr></table></figure>\n<p>C、优化统计查询：<br>假设我们现在有两张数据库表，分别是customer表和order表，它们的结构如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">customer </span><br><span class=\"line\">ID varchar2(14) </span><br><span class=\"line\">age number(10) </span><br><span class=\"line\">name varchar2(20)</span><br><span class=\"line\"></span><br><span class=\"line\">order </span><br><span class=\"line\">ID varchar2(14) </span><br><span class=\"line\">order_number number(10) </span><br><span class=\"line\">customer_ID varchar2(14)</span><br><span class=\"line\">现在有两条HQL查询语句，分别如下：</span><br><span class=\"line\">from Customer c inner join c.orders o group by c.age;(1)</span><br><span class=\"line\"> </span><br><span class=\"line\">select c.ID,c.name,c.age,o.ID,o.order_number,o.customer_ID</span><br><span class=\"line\">from Customer c inner join c.orders c group by c.age;(2)</span><br></pre></td></tr></table></figure>\n<p>这两条语句使用了HQL语句的内连接查询（我们将在HQL语句的连接查询部分专门讨论），现在我们可以看出这两条查询语句最后所返回的结果是一样的，但是它们<br>其实是有明显区别的，语句（1）检索的结果会返回Customer与Order持久化对象，而且它们会被置于Hibernate的Session缓存之中，并且Session会负责它们在缓存<br>中的唯一性以及与后台数据库数据的同步，只有事务提交后它们才会从缓存中被清除（之前直接改数据库表内容，没有重新发布，查询出来的值就是改之前的值.PS:查询时没有提交事务）；而语句（2）返回的是关系数据而并非是持久化对象，因此它们不会占用<br>Hibernate的Session缓存，只要在检索之后应用程序不在访问它们，它们所占用的内存就有可能被JVM的垃圾回收器回收，而且Hibernate不会同步对它们的修改。<br>在我们的系统开发中，尤其是Mis系统，不可避免的要进行统计查询的开发，这类功能有两个特点：第一数据量大；第二一般情况下都是只读操作而不会涉及到对统<br>计数据进行修改，那么如果采用第一种查询方式，必然会导致大量持久化对象位于Hibernate的Session缓存中，而且Hibernate的Session缓存还要负责它们与数据<br>库数据的同步。而如果采用第二种查询方式，显然就会提高查询性能，因为不需要Hibernate的Session缓存的管理开销，而且只要应用程序不在使用这些数据，它<br>们所占用的内存空间就会被回收释放。<br>因此在开发统计查询系统时，尽量使用通过select语句写出需要查询的属性的方式来返回关系数据，而避免使用第一种查询方式返回持久化对象（这种方式是在有<br>修改需求时使用比较适合），这样可以提高运行效率并且减少内存消耗。㊣真正的高手并不是精通一切，而是精通在合适的场合使用合适的手段。</p>\n<p>###参数绑定：<br>　　Hibernate中对动态查询参数绑定提供了丰富的支持，那么什么是查询参数动态绑定呢？其实如果我们熟悉传统JDBC编程的话，我们就不难理解查询参数动态绑定，如下代码传统JDBC的参数绑定：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">　　PrepareStatement pre=connection.prepare(“select * from User where user.name=?”);</span><br><span class=\"line\">　　pre.setString(1,”zhaoxin”);</span><br><span class=\"line\">　　ResultSet rs=pre.executeQuery();</span><br></pre></td></tr></table></figure>\n<p>　　在Hibernate中也提供了类似这种的查询参数绑定功能，而且在Hibernate中对这个功能还提供了比传统JDBC操作丰富的多的特性，在Hibernate中共存在4种参数绑定的方式，下面我们将分别介绍：<br>　　A、 按参数名称绑定：<br>　　在HQL语句中定义命名参数要用”:”开头，形式如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">　　Query query=session.createQuery(“from User user where user.name=:customername anduser:customerage=:age ”);</span><br><span class=\"line\">　　query.setString(“customername”,name);</span><br><span class=\"line\">　　query.setInteger(“customerage”,age);</span><br></pre></td></tr></table></figure>\n<p>　　<br>　　上面代码中用:customername和:customerage分别定义了命名参数customername和customerage，然后用Query接口的setXXX()方法设定名参数值，setXXX()方法包含两个参数，分别是命名参数名称和命名参数实际值。<br>　　B、 按参数位置邦定：<br>　　在HQL查询语句中用”?”来定义参数位置，形式如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">　　Query query=session.createQuery(“from User user where user.name=? and user.age =? ”);</span><br><span class=\"line\">　　query.setString(0,name);</span><br><span class=\"line\">　　query.setInteger(1,age);</span><br></pre></td></tr></table></figure>\n<p>　　同样使用setXXX()方法设定绑定参数，只不过这时setXXX()方法的第一个参数代表邦定参数在HQL语句中出现的位置编号（由0开始编号），第二个参数仍然代表参数实际值。<br>　　注：在实际开发中，提倡使用按名称邦定命名参数，因为这不但可以提供非常好的程序可读性，而且也提高了程序的易维护性，因为当查询参数的位置发生改变时，按名称邦定名参数的方式中是不需要调整程序代码的。<br>　　C、 setParameter()方法：<br>　　在Hibernate的HQL查询中可以通过setParameter()方法邦定任意类型的参数，如下代码：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">　　String hql=”from User user where user.name=:customername ”;</span><br><span class=\"line\">　　Query query=session.createQuery(hql);</span><br><span class=\"line\">　　query.setParameter(“customername”,name,Hibernate.STRING);</span><br></pre></td></tr></table></figure>\n<p>　　如上面代码所示，setParameter()方法包含三个参数，分别是命名参数名称，命名参数实际值，以及命名参数映射类型。对于某些参数类型setParameter()方法可以根据参数值的Java类型，猜测出对应的映射类型，因此这时不需要显示写出映射类型，像上面的例子，可以直接这样写：<br>　　query.setParameter(“customername”,name);但是对于一些类型就必须写明映射类型，比如java.util.Date类型，因为它会对应Hibernate的多种映射类型，比如Hibernate.DATA或者Hibernate.TIMESTAMP。<br>　　D、 setProperties()方法：(setEntity())<br>　　在Hibernate中可以使用setProperties()方法，将命名参数与一个对象的属性值绑定在一起，如下程序代码：<br>　　<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">　　Customer customer=new Customer();</span><br><span class=\"line\">　　customer.setName(“pansl”);</span><br><span class=\"line\">　　customer.setAge(80);</span><br><span class=\"line\">　　Query query=session.createQuery(“from Customer c where c.name=:name and c.age=:age ”);</span><br><span class=\"line\">　　query.setProperties(customer);</span><br><span class=\"line\">```　　</span><br><span class=\"line\"></span><br><span class=\"line\">　　setProperties()方法会自动将customer对象实例的属性值匹配到命名参数上，但是要求命名参数名称必须要与实体对象相应的属性同名。</span><br><span class=\"line\">　　这里还有一个特殊的setEntity()方法，它会把命名参数与一个持久化对象相关联，如下面代码所示：</span><br></pre></td></tr></table></figure></p>\n<p>　　Customer customer=(Customer)session.load(Customer.class,”1”);<br>　　Query query=session.createQuery(“from Order order where order.customer=:customer ”);<br>　　query. setEntity(“customer”,customer);<br>　　List list=query.list();<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">　　</span><br><span class=\"line\">　　上面的代码会生成类似如下的SQL语句：</span><br></pre></td></tr></table></figure></p>\n<p>　　Select * from order where customer_ID=’1’;<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">　　E、 使用绑定参数的优势：</span><br><span class=\"line\">　　我们为什么要使用绑定命名参数？任何一个事物的存在都是有其价值的，具体到绑定参数对于HQL查询来说，主要有以下两个主要优势：</span><br><span class=\"line\">　　①、 可以利用数据库实施性能优化，因为对Hibernate来说在底层使用的是PrepareStatement来完成查询，因此对于语法相同参数不同的SQL语句，可以充分利用预编译SQL语句缓存，从而提升查询效率。</span><br><span class=\"line\">　　②、 可以防止SQL Injection安全漏洞的产生：</span><br><span class=\"line\">　　SQL Injection是一种专门针对SQL语句拼装的攻击方式，比如对于我们常见的用户登录，在登录界面上，用户输入用户名和口令，这时登录验证程序可能会生成如下的HQL语句：</span><br></pre></td></tr></table></figure></p>\n<p>　　“from User user where user.name=’”+name+”’ and user.password=’”+password+”’ ”<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">　　这个HQL语句从逻辑上来说是没有任何问题的，这个登录验证功能在一般情况下也是会正确完成的，但是如果在登录时在用户名中输入”zhaoxin or ‘x’=’x”,这时如果使用简单的HQL语句的字符串拼装，就会生成如下的HQL语句：</span><br></pre></td></tr></table></figure></p>\n<p>　　“from User user where user.name=’zhaoxin’ or ‘x’=’x’ and user.password=’admin’ ”;<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">　　显然这条HQL语句的where字句将会永远为真，而使用户口令的作用失去意义，这就是SQL Injection攻击的基本原理。</span><br><span class=\"line\">　　而使用绑定参数方式，就可以妥善处理这问题,当使用绑定参数时，会得到下面的HQL语句：</span><br></pre></td></tr></table></figure></p>\n<p>　　from User user where user.name=’’zhaoxin’’ or ‘’x=’’x’’ ‘ and user.password=’admin’;<br><code>`</code><br>　　<br>由此可见使用绑定参数会将用户名中输入的单引号解析成字符串（如果想在字符串中包含单引号，应使用重复单引号形式），所以参数绑定能够有效防止SQL Injection安全漏洞。</p>\n<p>转载自：<a href=\"http://blog.csdn.net/zjkstone/article/details/7884875\" target=\"_blank\" rel=\"noopener\">http://blog.csdn.net/zjkstone/article/details/7884875</a></p>\n"},{"_content":"# 何为aop\n\n　　aop全称Aspect Oriented Programming，面向切面，AOP主要实现的目的是针对业务处理过程中的切面进行提取，它所面对的是处理过程中的某个步骤或阶段，以获得逻辑过程中各部分之间低耦合性的隔离效果。其与设计模式完成的任务差不多，是提供另一种角度来思考程序的结构，来弥补面向对象编程的不足。\n\n　　通俗点讲就是提供一个为一个业务实现提供切面注入的机制，通过这种方式，在业务运行中将定义好的切面通过切入点绑定到业务中，以实现将一些特殊的逻辑绑定到此业务中。\n\n　　比如，若是需要一个记录日志的功能，首先想到的是在方法中通过log4j或其他框架来进行记录日志，但写下来发现一个问题，在整个业务中其实核心的业务代码并没有多少，都是一些记录日志或其他辅助性的一些代码。而且很多业务有需要相同的功能，比如都需要记录日志，这时候又需要将这些记录日志的功能复制一遍，即使是封装成框架，也是需要调用之类的。在此处使用复杂的设计模式又得不偿失。\n\n## aop名词\n　　先介绍一些aop的名词，其实这些名词对使用aop没什么影响，但为了更好的理解最好知道一些\n\n* 切面（Aspect）：一个关注点的模块化，这个关注点可能会横切多个对象。事务管理是J2EE应用中一个关于横切关注点的很好的例子。\n\n* 连接点（Joinpoint）：在程序执行过程中某个特定的点，比如某方法调用的时候或者处理异常的时候。在Spring AOP中，一个连接点总是表示一个方法的执行。\n\n* 通知（Advice）：在切面的某个特定的连接点上执行的动作。其中包括了“around”、“before”和“after”等不同类型的通知（通知的类型将在后面部分进行讨论）。许多AOP框架（包括Spring）都是以拦截器做通知模型，并维护一个以连接点为中心的拦截器链。\n\n* 切入点（Pointcut）：匹配连接点的断言。通知和一个切入点表达式关联，并在满足这个切入点的连接点上运行（例如，当执行某个特定名称的方法时）。切入点表达式如何和连接点匹配是AOP的核心：Spring缺省使用AspectJ切入点语法。\n\n* 引入（Introduction）：用来给一个类型声明额外的方法或属性（也被称为连接类型声明（inter-type declaration））。Spring允许引入新的接口（以及一个对应的实现）到任何被代理的对象。例如，你可以使用引入来使一个bean实现IsModified接口，以便简化缓存机制。\n\n* 目标对象（Target Object）：被一个或者多个切面所通知的对象。也被称做被通知（advised）对象。既然Spring AOP是通过运行时代理实现的，这个对象永远是一个被代理（proxied）对象。\n\n* AOP代理（AOP Proxy）：AOP框架创建的对象，用来实现切面契约（例如通知方法执行等等）。在Spring中，AOP代理可以是JDK动态代理或者CGLIB代理。\n\n* 织入（Weaving）：把切面连接到其它的应用程序类型或者对象上，并创建一个被通知的对象。这些可以在编译时（例如使用AspectJ编译器），类加载时和运行时完成。Spring和其他纯Java AOP框架一样，在运行时完成织入。\n\n其中重要的名词有：切面，切入点\n\n## 注解\n\n* @Aspect:描述一个切面类，定义切面类的时候需要打上这个注解\n\n* @Configuration：spring-boot配置类\n\n* @Pointcut：声明一个切入点，切入点决定了连接点关注的内容，使得我们可以控制通知什么时候执行。Spring AOP只支持Spring bean的方法执行连接点。所以你可以把切入点看做是Spring bean上方法执行的匹配。一个切入点声明有两个部分：一个包含名字和任意参数的签名，还有一个切入点表达式，该表达式决定了我们关注那个方法的执行。\n\n　注：作为切入点签名的方法必须返回void 类型\n\n## Spring AOP支持在切入点表达式中使用如下的切入点指示符：　　　　\n\n* execution - 匹配方法执行的连接点，这是你将会用到的Spring的最主要的切入点指示符。\n\n* within - 限定匹配特定类型的连接点（在使用Spring AOP的时候，在匹配的类型中定义的方法的执行）。\n\n* this - 限定匹配特定的连接点（使用Spring AOP的时候方法的执行），其中bean reference（Spring AOP 代理）是指定类型的实例。\n\n* target - 限定匹配特定的连接点（使用Spring AOP的时候方法的执行），其中目标对象（被代理的应用对象）是指定类型的实例。\n\n* args - 限定匹配特定的连接点（使用Spring AOP的时候方法的执行），其中参数是指定类型的实例。\n\n* @target - 限定匹配特定的连接点（使用Spring AOP的时候方法的执行），其中正执行对象的类持有指定类型的注解。\n\n* @args - 限定匹配特定的连接点（使用Spring AOP的时候方法的执行），其中实际传入参数的运行时类型持有指定类型的注解。\n\n* @within - 限定匹配特定的连接点，其中连接点所在类型已指定注解（在使用Spring AOP的时候，所执行的方法所在类型已指定注解）。\n\n* @annotation - 限定匹配特定的连接点（使用Spring AOP的时候方法的执行），其中连接点的主题持有指定的注解。\n\n>其中execution使用最频繁，即某方法执行时进行切入。定义切入点中有一个重要的知识，即切入点表达式，我们一会在解释怎么写切入点表达式。\n\n\n## spring aop支持的通知：\n\n* @Before：前置通知：在某连接点之前执行的通知，但这个通知不能阻止连接点之前的执行流程（除非它抛出一个异常）。\n\n* @AfterReturning ：后置通知：在某连接点正常完成后执行的通知，通常在一个匹配的方法返回的时候执行。\n\n可以在后置通知中绑定返回值，如：\n\n```java\n@AfterReturning（\n    pointcut=com.test.service.CacheDemoService.findById(..))\",\n    returning=\"retVal\"）\n  public void doFindByIdCheck（Object retVal） {\n    // ...\n  }\n```\n\n* @AfterThrowing:异常通知：在方法抛出异常退出时执行的通知。　　　　　　　\n\n* @After 最终通知。当某连接点退出的时候执行的通知（不论是正常返回还是异常退出）。\n\n* @Around：环绕通知：包围一个连接点的通知，如方法调用。这是最强大的一种通知类型。环绕通知可以在方法调用前后完成自定义的行为。它也会选择是否继续执行连接点或直接返回它自己的返回值或抛出异常来结束执行。\n\n>环绕通知最麻烦，也最强大，其是一个对方法的环绕，具体方法会通过代理传递到切面中去，切面中可选择执行方法与否，执行方法几次等。\n\n>环绕通知使用一个代理ProceedingJoinPoint类型的对象来管理目标对象，所以此通知的第一个参数必须是ProceedingJoinPoint类型，在通知体内，调用ProceedingJoinPoint的proceed()方法会导致后台的连接点方法执行。proceed 方法也可能会被调用并且传入一个Object[]对象-该数组中的值将被作为方法执行时的参数。\n\n## 切入点表达式\n\n切入点表达式的格式：execution([可见性] 返回类型 [声明类型].方法名(参数) [异常])\n\n其中【】中的为可选，其他的还支持通配符的使用:\n\n*：匹配所有字符\n..：一般用于匹配多个包，多个参数\n+：表示类及其子类\n\n运算符有：&&、||、!\n\n```\n* execution：用于匹配子表达式。\n//匹配com.cjm.model包及其子包中所有类中的所有方法，返回类型任意，方法参数任意\n@Pointcut(\"execution(* com.cjm.model..*.*(..))\")\npublic void before(){}\n\n* within：用于匹配连接点所在的Java类或者包。\n//匹配Person类中的所有方法\n@Pointcut(\"within(com.cjm.model.Person)\")\npublic void before(){}\n            \n//匹配com.cjm包及其子包中所有类中的所有方法\n@Pointcut(\"within(com.cjm..*)\")\npublic void before(){}\n\n* this：用于向通知方法中传入代理对象的引用。\n@Before(\"before() && this(proxy)\")\npublic void beforeAdvide(JoinPoint point, Object proxy){\n   //处理逻辑\n}\n\n* target：用于向通知方法中传入目标对象的引用。\n@Before(\"before() && target(target)\npublic void beforeAdvide(JoinPoint point, Object proxy){\n   //处理逻辑\n}\n\n* args：用于将参数传入到通知方法中。\n@Before(\"before() && args(age,username)\")\npublic void beforeAdvide(JoinPoint point, int age, String username){\n   //处理逻辑\n}\n \n* @within ：用于匹配在类一级使用了参数确定的注解的类，其所有方法都将被匹配。 \n@Pointcut(\"@within(com.cjm.annotation.AdviceAnnotation)\")\n//所有被@AdviceAnnotation标注的类都将匹配\npublic void before(){}\n\n* @target ：和@within的功能类似，但必须要指定注解接口的保留策略为RUNTIME。 @Pointcut(\"@target(com.cjm.annotation.AdviceAnnotation)\")\npublic void before(){}\n\n* @args ：传入连接点的对象对应的Java类必须被@args指定的Annotation注解标注。   @Before(\"@args(com.cjm.annotation.AdviceAnnotation)\")\npublic void beforeAdvide(JoinPoint point){\n   //处理逻辑\n}\n\n* @annotation ：匹配连接点被它参数指定的Annotation注解的方法。也就是说，所有被指定注解标注的方法都将匹配。\n@Pointcut(\"@annotation(com.cjm.annotation.AdviceAnnotation)\")\npublic void before(){}\n\n* bean：通过受管Bean的名字来限定连接点所在的Bean。该关键词是Spring2.5新增的。\n@Pointcut(\"bean(person)\")\npublic void before(){}\n```\n\n## 准备工作\n因为需要对web请求做切面来记录日志，所以先引入web模块，并创建一个简单的hello请求的处理。\n\n* pom.xml 中引入aop模块\n\n```xml\n<dependency>  \n    <groupId>org.springframework.boot</groupId>\n    <artifactId>spring-boot-starter-aop</artifactId>\n</dependency>\n```\n\n* 或者gradle.build 引入\n\n```\n    compile(\"org.springframework.boot:spring-boot-starter-aop\")\n```\n\n在完成了引入AOP依赖包后，一般来说并不需要去做其他配置。也许在Spring中使用过注解配置方式的人会问是否需要在程序主类中增加 @EnableAspectJAutoProxy 来启用，实际并不需要。\n\n可以看下面关于AOP的默认配置属性，其中 spring.aop.auto 属性默认是开启的，也就是说只要引入了AOP依赖后，默认已经增加了 @EnableAspectJAutoProxy 。\n\n```\n# AOP\nspring.aop.auto=true # Add @EnableAspectJAutoProxy.  \nspring.aop.proxy-target-class=false # Whether subclass-based (CGLIB) proxies are to be created (true) as  \n opposed to standard Java interface-based proxies (false).\n```\n\n>而当我们需要使用CGLIB来实现AOP的时候，需要配置 spring.aop.proxy-target-class=true ，不然默认使用的是标准Java的实现。\n\n\n## AOP方法\n实现AOP的切面主要有以下几个要素：\n\n* 使用 @Aspect 注解将一个java类定义为切面类\n* 使用 @Pointcut 定义一个切入点，可以是一个规则表达式，比如下例中某个package下的所有函数，也可以是一个注解等。\n* 根据需要在切入点不同位置的切入内容\n\t* 使用 @Before 在切入点开始处切入内容\n\t* 使用 @After 在切入点结尾处切入内容\n\t* 使用 @AfterReturning 在切入点return内容之后切入内容（可以用来对处理返回值做一些加工处理）\n\t* 使用 @Around 在切入点前后切入内容，并自己控制何时执行切入点自身的内容\n\t* 使用 @AfterThrowing 用来处理当切入内容部分抛出异常之后的处理逻辑\n\n\t\n```java\n@Aspect\n@Component\npublic class WebLogAspect {\n\n    private Logger logger = Logger.getLogger(getClass());\n\n    @Pointcut(\"execution(public * com.didispace.web..*.*(..))\")\n    public void webLog(){}\n\n    @Before(\"webLog()\")\n    public void doBefore(JoinPoint joinPoint) throws Throwable {\n        // 接收到请求，记录请求内容\n        ServletRequestAttributes attributes = (ServletRequestAttributes) RequestContextHolder.getRequestAttributes();\n        HttpServletRequest request = attributes.getRequest();\n\n        // 记录下请求内容\n        logger.info(\"URL : \" + request.getRequestURL().toString());\n        logger.info(\"HTTP_METHOD : \" + request.getMethod());\n        logger.info(\"IP : \" + request.getRemoteAddr());\n        logger.info(\"CLASS_METHOD : \" + joinPoint.getSignature().getDeclaringTypeName() + \".\" + joinPoint.getSignature().getName());\n        logger.info(\"ARGS : \" + Arrays.toString(joinPoint.getArgs()));\n\n    }\n\n    @AfterReturning(returning = \"ret\", pointcut = \"webLog()\")\n    public void doAfterReturning(Object ret) throws Throwable {\n        // 处理完请求，返回内容\n        logger.info(\"RESPONSE : \" + ret);\n    }\n\n}\n\n```\t\n\n可以看上面的例子，通过 @Pointcut 定义的切入点为 com.didispace.web 包下的所有函数（对web层所有请求处理做切入点），然后通过 @Before 实现，对请求内容的日志记录（本文只是说明过程，可以根据需要调整内容），最后通过 @AfterReturning 记录请求返回的对象。\n\n通过运行程序并访问： http://localhost:8080/hello?name=didi ，可以获得下面的日志输出\n\n```java\n2016-05-19 13:42:13,156  INFO WebLogAspect:41 - URL : http://localhost:8080/hello  \n2016-05-19 13:42:13,156  INFO WebLogAspect:42 - HTTP_METHOD : http://localhost:8080/hello  \n2016-05-19 13:42:13,157  INFO WebLogAspect:43 - IP : 0:0:0:0:0:0:0:1  \n2016-05-19 13:42:13,160  INFO WebLogAspect:44 - CLASS_METHOD : com.didispace.web.HelloController.hello  \n2016-05-19 13:42:13,160  INFO WebLogAspect:45 - ARGS : [didi]  \n2016-05-19 13:42:13,170  INFO WebLogAspect:52 - RESPONSE:Hello didi\n```\n\n## 优化：AOP切面中的同步问题\n\n在WebLogAspect切面中，分别通过doBefore和doAfterReturning两个独立函数实现了切点头部和切点返回后执行的内容，若我们想统计请求的处理时间，就需要在doBefore处记录时间，并在doAfterReturning处通过当前时间与开始处记录的时间计算得到请求处理的消耗时间。\n\n那么我们是否可以在WebLogAspect切面中定义一个成员变量来给doBefore和doAfterReturning一起访问呢？是否会有同步问题呢？\n\n的确，直接在这里定义基本类型会有同步问题，所以我们可以引入ThreadLocal对象，像下面这样进行记录：\n\n```\n@Aspect\n@Component\npublic class WebLogAspect {\n\n    private Logger logger = Logger.getLogger(getClass());\n\n    ThreadLocal<Long> startTime = new ThreadLocal<>();\n\n    @Pointcut(\"execution(public * com.didispace.web..*.*(..))\")\n    public void webLog(){}\n\n    @Before(\"webLog()\")\n    public void doBefore(JoinPoint joinPoint) throws Throwable {\n        startTime.set(System.currentTimeMillis());\n\n        // 省略日志记录内容\n    }\n\n    @AfterReturning(returning = \"ret\", pointcut = \"webLog()\")\n    public void doAfterReturning(Object ret) throws Throwable {\n        // 处理完请求，返回内容\n        logger.info(\"RESPONSE : \" + ret);\n        logger.info(\"SPEND TIME : \" + (System.currentTimeMillis() - startTime.get()));\n    }\n\n\n}\n```\n\n\n## 优化：AOP切面的优先级\n\n由于通过AOP实现，程序得到了很好的解耦，但是也会带来一些问题，比如：我们可能会对Web层做多个切面，校验用户，校验头信息等等，这个时候经常会碰到切面的处理顺序问题。\n\n所以，我们需要定义每个切面的优先级，我们需要 @Order(i) 注解来标识切面的优先级。 i的值越小，优先级越高 。假设我们还有一个切面是 CheckNameAspect 用来校验name必须为didi，我们为其设置 @Order(10) ，而上文中WebLogAspect设置为 @Order(5) ，所以WebLogAspect有更高的优先级，这个时候执行顺序是这样的：\n\n* 在 @Before 中优先执行 @Order(5) 的内容，再执行 @Order(10) 的内容\n* 在 @After 和 @AfterReturning 中优先执行 @Order(10) 的内容，再执行 @Order(5) 的内容\n所以我们可以这样子总结：\n\n* 在切入点前的操作，按order的值由小到大执行\n* 在切入点后的操作，按order的值由大到小执行\n\n\n## AOP实现web签名验证\n\n\n```java\n@Aspect\n@Component\npublic class SignatureAspect{\n\n    private final String secret = \"test\";\n\n    private Logger log = LoggerFactory.getLogger(this.getClass());\n\n    @Pointcut(\"execution(public * com.mailejifen.msg.controllers..*.*(..))\")\n    public void signatureVerification() {}\n\n    @Around(\"signatureVerification()\")\n    public Object invoke(ProceedingJoinPoint pjp) throws Throwable {\n\n        // 接收到请求，记录请求内容\n        ServletRequestAttributes attributes = (ServletRequestAttributes) RequestContextHolder.getRequestAttributes();\n        HttpServletRequest request = attributes.getRequest();\n\n        // 记录下请求内容\n        log.info(\"URL : \" + request.getRequestURL().toString());\n        log.info(\"HTTP_METHOD : \" + request.getMethod());\n        log.info(\"IP : \" + request.getRemoteAddr());\n        log.info(\"CLASS_METHOD : \" + pjp.getSignature().getDeclaringTypeName() + \".\" + pjp.getSignature().getName());\n        log.info(\"ARGS : \" + Arrays.toString(pjp.getArgs()));\n        \n        //获取签名\n        String sign= request.getParameter(\"sign\");\n        //获取所有值\n        Object[] keys = request.getParameterMap().keySet().toArray();\n        Arrays.sort(keys);\n        String str = \"\";\n        for (Object key : keys) {\n            if(!key.equals(\"sign\")) {\n                str += request.getParameter(key.toString());\n            }\n        }\n        str += secret;\n        System.out.println(str);\n        System.out.println(DigestUtils.md5Hex(str));\n        System.out.println(sign);\n\n        //判断签名\n        if(DigestUtils.md5Hex(str).equals(sign)) {\n            Object result = pjp.proceed();\n            return result;\n        }\n        else {\n            return new HandleResult(ErrorCode.SIGN_FAIL,ErrorCode.getErrorMsg(ErrorCode.SIGN_FAIL));\n\n        }\n    }\n}\n```\n\n","source":"_posts/spring-boot/aop.md","raw":"# 何为aop\n\n　　aop全称Aspect Oriented Programming，面向切面，AOP主要实现的目的是针对业务处理过程中的切面进行提取，它所面对的是处理过程中的某个步骤或阶段，以获得逻辑过程中各部分之间低耦合性的隔离效果。其与设计模式完成的任务差不多，是提供另一种角度来思考程序的结构，来弥补面向对象编程的不足。\n\n　　通俗点讲就是提供一个为一个业务实现提供切面注入的机制，通过这种方式，在业务运行中将定义好的切面通过切入点绑定到业务中，以实现将一些特殊的逻辑绑定到此业务中。\n\n　　比如，若是需要一个记录日志的功能，首先想到的是在方法中通过log4j或其他框架来进行记录日志，但写下来发现一个问题，在整个业务中其实核心的业务代码并没有多少，都是一些记录日志或其他辅助性的一些代码。而且很多业务有需要相同的功能，比如都需要记录日志，这时候又需要将这些记录日志的功能复制一遍，即使是封装成框架，也是需要调用之类的。在此处使用复杂的设计模式又得不偿失。\n\n## aop名词\n　　先介绍一些aop的名词，其实这些名词对使用aop没什么影响，但为了更好的理解最好知道一些\n\n* 切面（Aspect）：一个关注点的模块化，这个关注点可能会横切多个对象。事务管理是J2EE应用中一个关于横切关注点的很好的例子。\n\n* 连接点（Joinpoint）：在程序执行过程中某个特定的点，比如某方法调用的时候或者处理异常的时候。在Spring AOP中，一个连接点总是表示一个方法的执行。\n\n* 通知（Advice）：在切面的某个特定的连接点上执行的动作。其中包括了“around”、“before”和“after”等不同类型的通知（通知的类型将在后面部分进行讨论）。许多AOP框架（包括Spring）都是以拦截器做通知模型，并维护一个以连接点为中心的拦截器链。\n\n* 切入点（Pointcut）：匹配连接点的断言。通知和一个切入点表达式关联，并在满足这个切入点的连接点上运行（例如，当执行某个特定名称的方法时）。切入点表达式如何和连接点匹配是AOP的核心：Spring缺省使用AspectJ切入点语法。\n\n* 引入（Introduction）：用来给一个类型声明额外的方法或属性（也被称为连接类型声明（inter-type declaration））。Spring允许引入新的接口（以及一个对应的实现）到任何被代理的对象。例如，你可以使用引入来使一个bean实现IsModified接口，以便简化缓存机制。\n\n* 目标对象（Target Object）：被一个或者多个切面所通知的对象。也被称做被通知（advised）对象。既然Spring AOP是通过运行时代理实现的，这个对象永远是一个被代理（proxied）对象。\n\n* AOP代理（AOP Proxy）：AOP框架创建的对象，用来实现切面契约（例如通知方法执行等等）。在Spring中，AOP代理可以是JDK动态代理或者CGLIB代理。\n\n* 织入（Weaving）：把切面连接到其它的应用程序类型或者对象上，并创建一个被通知的对象。这些可以在编译时（例如使用AspectJ编译器），类加载时和运行时完成。Spring和其他纯Java AOP框架一样，在运行时完成织入。\n\n其中重要的名词有：切面，切入点\n\n## 注解\n\n* @Aspect:描述一个切面类，定义切面类的时候需要打上这个注解\n\n* @Configuration：spring-boot配置类\n\n* @Pointcut：声明一个切入点，切入点决定了连接点关注的内容，使得我们可以控制通知什么时候执行。Spring AOP只支持Spring bean的方法执行连接点。所以你可以把切入点看做是Spring bean上方法执行的匹配。一个切入点声明有两个部分：一个包含名字和任意参数的签名，还有一个切入点表达式，该表达式决定了我们关注那个方法的执行。\n\n　注：作为切入点签名的方法必须返回void 类型\n\n## Spring AOP支持在切入点表达式中使用如下的切入点指示符：　　　　\n\n* execution - 匹配方法执行的连接点，这是你将会用到的Spring的最主要的切入点指示符。\n\n* within - 限定匹配特定类型的连接点（在使用Spring AOP的时候，在匹配的类型中定义的方法的执行）。\n\n* this - 限定匹配特定的连接点（使用Spring AOP的时候方法的执行），其中bean reference（Spring AOP 代理）是指定类型的实例。\n\n* target - 限定匹配特定的连接点（使用Spring AOP的时候方法的执行），其中目标对象（被代理的应用对象）是指定类型的实例。\n\n* args - 限定匹配特定的连接点（使用Spring AOP的时候方法的执行），其中参数是指定类型的实例。\n\n* @target - 限定匹配特定的连接点（使用Spring AOP的时候方法的执行），其中正执行对象的类持有指定类型的注解。\n\n* @args - 限定匹配特定的连接点（使用Spring AOP的时候方法的执行），其中实际传入参数的运行时类型持有指定类型的注解。\n\n* @within - 限定匹配特定的连接点，其中连接点所在类型已指定注解（在使用Spring AOP的时候，所执行的方法所在类型已指定注解）。\n\n* @annotation - 限定匹配特定的连接点（使用Spring AOP的时候方法的执行），其中连接点的主题持有指定的注解。\n\n>其中execution使用最频繁，即某方法执行时进行切入。定义切入点中有一个重要的知识，即切入点表达式，我们一会在解释怎么写切入点表达式。\n\n\n## spring aop支持的通知：\n\n* @Before：前置通知：在某连接点之前执行的通知，但这个通知不能阻止连接点之前的执行流程（除非它抛出一个异常）。\n\n* @AfterReturning ：后置通知：在某连接点正常完成后执行的通知，通常在一个匹配的方法返回的时候执行。\n\n可以在后置通知中绑定返回值，如：\n\n```java\n@AfterReturning（\n    pointcut=com.test.service.CacheDemoService.findById(..))\",\n    returning=\"retVal\"）\n  public void doFindByIdCheck（Object retVal） {\n    // ...\n  }\n```\n\n* @AfterThrowing:异常通知：在方法抛出异常退出时执行的通知。　　　　　　　\n\n* @After 最终通知。当某连接点退出的时候执行的通知（不论是正常返回还是异常退出）。\n\n* @Around：环绕通知：包围一个连接点的通知，如方法调用。这是最强大的一种通知类型。环绕通知可以在方法调用前后完成自定义的行为。它也会选择是否继续执行连接点或直接返回它自己的返回值或抛出异常来结束执行。\n\n>环绕通知最麻烦，也最强大，其是一个对方法的环绕，具体方法会通过代理传递到切面中去，切面中可选择执行方法与否，执行方法几次等。\n\n>环绕通知使用一个代理ProceedingJoinPoint类型的对象来管理目标对象，所以此通知的第一个参数必须是ProceedingJoinPoint类型，在通知体内，调用ProceedingJoinPoint的proceed()方法会导致后台的连接点方法执行。proceed 方法也可能会被调用并且传入一个Object[]对象-该数组中的值将被作为方法执行时的参数。\n\n## 切入点表达式\n\n切入点表达式的格式：execution([可见性] 返回类型 [声明类型].方法名(参数) [异常])\n\n其中【】中的为可选，其他的还支持通配符的使用:\n\n*：匹配所有字符\n..：一般用于匹配多个包，多个参数\n+：表示类及其子类\n\n运算符有：&&、||、!\n\n```\n* execution：用于匹配子表达式。\n//匹配com.cjm.model包及其子包中所有类中的所有方法，返回类型任意，方法参数任意\n@Pointcut(\"execution(* com.cjm.model..*.*(..))\")\npublic void before(){}\n\n* within：用于匹配连接点所在的Java类或者包。\n//匹配Person类中的所有方法\n@Pointcut(\"within(com.cjm.model.Person)\")\npublic void before(){}\n            \n//匹配com.cjm包及其子包中所有类中的所有方法\n@Pointcut(\"within(com.cjm..*)\")\npublic void before(){}\n\n* this：用于向通知方法中传入代理对象的引用。\n@Before(\"before() && this(proxy)\")\npublic void beforeAdvide(JoinPoint point, Object proxy){\n   //处理逻辑\n}\n\n* target：用于向通知方法中传入目标对象的引用。\n@Before(\"before() && target(target)\npublic void beforeAdvide(JoinPoint point, Object proxy){\n   //处理逻辑\n}\n\n* args：用于将参数传入到通知方法中。\n@Before(\"before() && args(age,username)\")\npublic void beforeAdvide(JoinPoint point, int age, String username){\n   //处理逻辑\n}\n \n* @within ：用于匹配在类一级使用了参数确定的注解的类，其所有方法都将被匹配。 \n@Pointcut(\"@within(com.cjm.annotation.AdviceAnnotation)\")\n//所有被@AdviceAnnotation标注的类都将匹配\npublic void before(){}\n\n* @target ：和@within的功能类似，但必须要指定注解接口的保留策略为RUNTIME。 @Pointcut(\"@target(com.cjm.annotation.AdviceAnnotation)\")\npublic void before(){}\n\n* @args ：传入连接点的对象对应的Java类必须被@args指定的Annotation注解标注。   @Before(\"@args(com.cjm.annotation.AdviceAnnotation)\")\npublic void beforeAdvide(JoinPoint point){\n   //处理逻辑\n}\n\n* @annotation ：匹配连接点被它参数指定的Annotation注解的方法。也就是说，所有被指定注解标注的方法都将匹配。\n@Pointcut(\"@annotation(com.cjm.annotation.AdviceAnnotation)\")\npublic void before(){}\n\n* bean：通过受管Bean的名字来限定连接点所在的Bean。该关键词是Spring2.5新增的。\n@Pointcut(\"bean(person)\")\npublic void before(){}\n```\n\n## 准备工作\n因为需要对web请求做切面来记录日志，所以先引入web模块，并创建一个简单的hello请求的处理。\n\n* pom.xml 中引入aop模块\n\n```xml\n<dependency>  \n    <groupId>org.springframework.boot</groupId>\n    <artifactId>spring-boot-starter-aop</artifactId>\n</dependency>\n```\n\n* 或者gradle.build 引入\n\n```\n    compile(\"org.springframework.boot:spring-boot-starter-aop\")\n```\n\n在完成了引入AOP依赖包后，一般来说并不需要去做其他配置。也许在Spring中使用过注解配置方式的人会问是否需要在程序主类中增加 @EnableAspectJAutoProxy 来启用，实际并不需要。\n\n可以看下面关于AOP的默认配置属性，其中 spring.aop.auto 属性默认是开启的，也就是说只要引入了AOP依赖后，默认已经增加了 @EnableAspectJAutoProxy 。\n\n```\n# AOP\nspring.aop.auto=true # Add @EnableAspectJAutoProxy.  \nspring.aop.proxy-target-class=false # Whether subclass-based (CGLIB) proxies are to be created (true) as  \n opposed to standard Java interface-based proxies (false).\n```\n\n>而当我们需要使用CGLIB来实现AOP的时候，需要配置 spring.aop.proxy-target-class=true ，不然默认使用的是标准Java的实现。\n\n\n## AOP方法\n实现AOP的切面主要有以下几个要素：\n\n* 使用 @Aspect 注解将一个java类定义为切面类\n* 使用 @Pointcut 定义一个切入点，可以是一个规则表达式，比如下例中某个package下的所有函数，也可以是一个注解等。\n* 根据需要在切入点不同位置的切入内容\n\t* 使用 @Before 在切入点开始处切入内容\n\t* 使用 @After 在切入点结尾处切入内容\n\t* 使用 @AfterReturning 在切入点return内容之后切入内容（可以用来对处理返回值做一些加工处理）\n\t* 使用 @Around 在切入点前后切入内容，并自己控制何时执行切入点自身的内容\n\t* 使用 @AfterThrowing 用来处理当切入内容部分抛出异常之后的处理逻辑\n\n\t\n```java\n@Aspect\n@Component\npublic class WebLogAspect {\n\n    private Logger logger = Logger.getLogger(getClass());\n\n    @Pointcut(\"execution(public * com.didispace.web..*.*(..))\")\n    public void webLog(){}\n\n    @Before(\"webLog()\")\n    public void doBefore(JoinPoint joinPoint) throws Throwable {\n        // 接收到请求，记录请求内容\n        ServletRequestAttributes attributes = (ServletRequestAttributes) RequestContextHolder.getRequestAttributes();\n        HttpServletRequest request = attributes.getRequest();\n\n        // 记录下请求内容\n        logger.info(\"URL : \" + request.getRequestURL().toString());\n        logger.info(\"HTTP_METHOD : \" + request.getMethod());\n        logger.info(\"IP : \" + request.getRemoteAddr());\n        logger.info(\"CLASS_METHOD : \" + joinPoint.getSignature().getDeclaringTypeName() + \".\" + joinPoint.getSignature().getName());\n        logger.info(\"ARGS : \" + Arrays.toString(joinPoint.getArgs()));\n\n    }\n\n    @AfterReturning(returning = \"ret\", pointcut = \"webLog()\")\n    public void doAfterReturning(Object ret) throws Throwable {\n        // 处理完请求，返回内容\n        logger.info(\"RESPONSE : \" + ret);\n    }\n\n}\n\n```\t\n\n可以看上面的例子，通过 @Pointcut 定义的切入点为 com.didispace.web 包下的所有函数（对web层所有请求处理做切入点），然后通过 @Before 实现，对请求内容的日志记录（本文只是说明过程，可以根据需要调整内容），最后通过 @AfterReturning 记录请求返回的对象。\n\n通过运行程序并访问： http://localhost:8080/hello?name=didi ，可以获得下面的日志输出\n\n```java\n2016-05-19 13:42:13,156  INFO WebLogAspect:41 - URL : http://localhost:8080/hello  \n2016-05-19 13:42:13,156  INFO WebLogAspect:42 - HTTP_METHOD : http://localhost:8080/hello  \n2016-05-19 13:42:13,157  INFO WebLogAspect:43 - IP : 0:0:0:0:0:0:0:1  \n2016-05-19 13:42:13,160  INFO WebLogAspect:44 - CLASS_METHOD : com.didispace.web.HelloController.hello  \n2016-05-19 13:42:13,160  INFO WebLogAspect:45 - ARGS : [didi]  \n2016-05-19 13:42:13,170  INFO WebLogAspect:52 - RESPONSE:Hello didi\n```\n\n## 优化：AOP切面中的同步问题\n\n在WebLogAspect切面中，分别通过doBefore和doAfterReturning两个独立函数实现了切点头部和切点返回后执行的内容，若我们想统计请求的处理时间，就需要在doBefore处记录时间，并在doAfterReturning处通过当前时间与开始处记录的时间计算得到请求处理的消耗时间。\n\n那么我们是否可以在WebLogAspect切面中定义一个成员变量来给doBefore和doAfterReturning一起访问呢？是否会有同步问题呢？\n\n的确，直接在这里定义基本类型会有同步问题，所以我们可以引入ThreadLocal对象，像下面这样进行记录：\n\n```\n@Aspect\n@Component\npublic class WebLogAspect {\n\n    private Logger logger = Logger.getLogger(getClass());\n\n    ThreadLocal<Long> startTime = new ThreadLocal<>();\n\n    @Pointcut(\"execution(public * com.didispace.web..*.*(..))\")\n    public void webLog(){}\n\n    @Before(\"webLog()\")\n    public void doBefore(JoinPoint joinPoint) throws Throwable {\n        startTime.set(System.currentTimeMillis());\n\n        // 省略日志记录内容\n    }\n\n    @AfterReturning(returning = \"ret\", pointcut = \"webLog()\")\n    public void doAfterReturning(Object ret) throws Throwable {\n        // 处理完请求，返回内容\n        logger.info(\"RESPONSE : \" + ret);\n        logger.info(\"SPEND TIME : \" + (System.currentTimeMillis() - startTime.get()));\n    }\n\n\n}\n```\n\n\n## 优化：AOP切面的优先级\n\n由于通过AOP实现，程序得到了很好的解耦，但是也会带来一些问题，比如：我们可能会对Web层做多个切面，校验用户，校验头信息等等，这个时候经常会碰到切面的处理顺序问题。\n\n所以，我们需要定义每个切面的优先级，我们需要 @Order(i) 注解来标识切面的优先级。 i的值越小，优先级越高 。假设我们还有一个切面是 CheckNameAspect 用来校验name必须为didi，我们为其设置 @Order(10) ，而上文中WebLogAspect设置为 @Order(5) ，所以WebLogAspect有更高的优先级，这个时候执行顺序是这样的：\n\n* 在 @Before 中优先执行 @Order(5) 的内容，再执行 @Order(10) 的内容\n* 在 @After 和 @AfterReturning 中优先执行 @Order(10) 的内容，再执行 @Order(5) 的内容\n所以我们可以这样子总结：\n\n* 在切入点前的操作，按order的值由小到大执行\n* 在切入点后的操作，按order的值由大到小执行\n\n\n## AOP实现web签名验证\n\n\n```java\n@Aspect\n@Component\npublic class SignatureAspect{\n\n    private final String secret = \"test\";\n\n    private Logger log = LoggerFactory.getLogger(this.getClass());\n\n    @Pointcut(\"execution(public * com.mailejifen.msg.controllers..*.*(..))\")\n    public void signatureVerification() {}\n\n    @Around(\"signatureVerification()\")\n    public Object invoke(ProceedingJoinPoint pjp) throws Throwable {\n\n        // 接收到请求，记录请求内容\n        ServletRequestAttributes attributes = (ServletRequestAttributes) RequestContextHolder.getRequestAttributes();\n        HttpServletRequest request = attributes.getRequest();\n\n        // 记录下请求内容\n        log.info(\"URL : \" + request.getRequestURL().toString());\n        log.info(\"HTTP_METHOD : \" + request.getMethod());\n        log.info(\"IP : \" + request.getRemoteAddr());\n        log.info(\"CLASS_METHOD : \" + pjp.getSignature().getDeclaringTypeName() + \".\" + pjp.getSignature().getName());\n        log.info(\"ARGS : \" + Arrays.toString(pjp.getArgs()));\n        \n        //获取签名\n        String sign= request.getParameter(\"sign\");\n        //获取所有值\n        Object[] keys = request.getParameterMap().keySet().toArray();\n        Arrays.sort(keys);\n        String str = \"\";\n        for (Object key : keys) {\n            if(!key.equals(\"sign\")) {\n                str += request.getParameter(key.toString());\n            }\n        }\n        str += secret;\n        System.out.println(str);\n        System.out.println(DigestUtils.md5Hex(str));\n        System.out.println(sign);\n\n        //判断签名\n        if(DigestUtils.md5Hex(str).equals(sign)) {\n            Object result = pjp.proceed();\n            return result;\n        }\n        else {\n            return new HandleResult(ErrorCode.SIGN_FAIL,ErrorCode.getErrorMsg(ErrorCode.SIGN_FAIL));\n\n        }\n    }\n}\n```\n\n","slug":"spring-boot/aop","published":1,"date":"2018-11-20T14:55:26.976Z","updated":"2018-11-20T15:01:44.141Z","title":"","comments":1,"layout":"post","photos":[],"link":"","_id":"cjopxmsr2000dwfo8z4nf3qmd","content":"<h1><span id=\"何为aop\">何为aop</span></h1><p>　　aop全称Aspect Oriented Programming，面向切面，AOP主要实现的目的是针对业务处理过程中的切面进行提取，它所面对的是处理过程中的某个步骤或阶段，以获得逻辑过程中各部分之间低耦合性的隔离效果。其与设计模式完成的任务差不多，是提供另一种角度来思考程序的结构，来弥补面向对象编程的不足。</p>\n<p>　　通俗点讲就是提供一个为一个业务实现提供切面注入的机制，通过这种方式，在业务运行中将定义好的切面通过切入点绑定到业务中，以实现将一些特殊的逻辑绑定到此业务中。</p>\n<p>　　比如，若是需要一个记录日志的功能，首先想到的是在方法中通过log4j或其他框架来进行记录日志，但写下来发现一个问题，在整个业务中其实核心的业务代码并没有多少，都是一些记录日志或其他辅助性的一些代码。而且很多业务有需要相同的功能，比如都需要记录日志，这时候又需要将这些记录日志的功能复制一遍，即使是封装成框架，也是需要调用之类的。在此处使用复杂的设计模式又得不偿失。</p>\n<h2><span id=\"aop名词\">aop名词</span></h2><p>　　先介绍一些aop的名词，其实这些名词对使用aop没什么影响，但为了更好的理解最好知道一些</p>\n<ul>\n<li><p>切面（Aspect）：一个关注点的模块化，这个关注点可能会横切多个对象。事务管理是J2EE应用中一个关于横切关注点的很好的例子。</p>\n</li>\n<li><p>连接点（Joinpoint）：在程序执行过程中某个特定的点，比如某方法调用的时候或者处理异常的时候。在Spring AOP中，一个连接点总是表示一个方法的执行。</p>\n</li>\n<li><p>通知（Advice）：在切面的某个特定的连接点上执行的动作。其中包括了“around”、“before”和“after”等不同类型的通知（通知的类型将在后面部分进行讨论）。许多AOP框架（包括Spring）都是以拦截器做通知模型，并维护一个以连接点为中心的拦截器链。</p>\n</li>\n<li><p>切入点（Pointcut）：匹配连接点的断言。通知和一个切入点表达式关联，并在满足这个切入点的连接点上运行（例如，当执行某个特定名称的方法时）。切入点表达式如何和连接点匹配是AOP的核心：Spring缺省使用AspectJ切入点语法。</p>\n</li>\n<li><p>引入（Introduction）：用来给一个类型声明额外的方法或属性（也被称为连接类型声明（inter-type declaration））。Spring允许引入新的接口（以及一个对应的实现）到任何被代理的对象。例如，你可以使用引入来使一个bean实现IsModified接口，以便简化缓存机制。</p>\n</li>\n<li><p>目标对象（Target Object）：被一个或者多个切面所通知的对象。也被称做被通知（advised）对象。既然Spring AOP是通过运行时代理实现的，这个对象永远是一个被代理（proxied）对象。</p>\n</li>\n<li><p>AOP代理（AOP Proxy）：AOP框架创建的对象，用来实现切面契约（例如通知方法执行等等）。在Spring中，AOP代理可以是JDK动态代理或者CGLIB代理。</p>\n</li>\n<li><p>织入（Weaving）：把切面连接到其它的应用程序类型或者对象上，并创建一个被通知的对象。这些可以在编译时（例如使用AspectJ编译器），类加载时和运行时完成。Spring和其他纯Java AOP框架一样，在运行时完成织入。</p>\n</li>\n</ul>\n<p>其中重要的名词有：切面，切入点</p>\n<h2><span id=\"注解\">注解</span></h2><ul>\n<li><p>@Aspect:描述一个切面类，定义切面类的时候需要打上这个注解</p>\n</li>\n<li><p>@Configuration：spring-boot配置类</p>\n</li>\n<li><p>@Pointcut：声明一个切入点，切入点决定了连接点关注的内容，使得我们可以控制通知什么时候执行。Spring AOP只支持Spring bean的方法执行连接点。所以你可以把切入点看做是Spring bean上方法执行的匹配。一个切入点声明有两个部分：一个包含名字和任意参数的签名，还有一个切入点表达式，该表达式决定了我们关注那个方法的执行。</p>\n</li>\n</ul>\n<p>　注：作为切入点签名的方法必须返回void 类型</p>\n<h2><span id=\"spring-aop支持在切入点表达式中使用如下的切入点指示符\">Spring AOP支持在切入点表达式中使用如下的切入点指示符：　　　　</span></h2><ul>\n<li><p>execution - 匹配方法执行的连接点，这是你将会用到的Spring的最主要的切入点指示符。</p>\n</li>\n<li><p>within - 限定匹配特定类型的连接点（在使用Spring AOP的时候，在匹配的类型中定义的方法的执行）。</p>\n</li>\n<li><p>this - 限定匹配特定的连接点（使用Spring AOP的时候方法的执行），其中bean reference（Spring AOP 代理）是指定类型的实例。</p>\n</li>\n<li><p>target - 限定匹配特定的连接点（使用Spring AOP的时候方法的执行），其中目标对象（被代理的应用对象）是指定类型的实例。</p>\n</li>\n<li><p>args - 限定匹配特定的连接点（使用Spring AOP的时候方法的执行），其中参数是指定类型的实例。</p>\n</li>\n<li><p>@target - 限定匹配特定的连接点（使用Spring AOP的时候方法的执行），其中正执行对象的类持有指定类型的注解。</p>\n</li>\n<li><p>@args - 限定匹配特定的连接点（使用Spring AOP的时候方法的执行），其中实际传入参数的运行时类型持有指定类型的注解。</p>\n</li>\n<li><p>@within - 限定匹配特定的连接点，其中连接点所在类型已指定注解（在使用Spring AOP的时候，所执行的方法所在类型已指定注解）。</p>\n</li>\n<li><p>@annotation - 限定匹配特定的连接点（使用Spring AOP的时候方法的执行），其中连接点的主题持有指定的注解。</p>\n</li>\n</ul>\n<blockquote>\n<p>其中execution使用最频繁，即某方法执行时进行切入。定义切入点中有一个重要的知识，即切入点表达式，我们一会在解释怎么写切入点表达式。</p>\n</blockquote>\n<h2><span id=\"spring-aop支持的通知\">spring aop支持的通知：</span></h2><ul>\n<li><p>@Before：前置通知：在某连接点之前执行的通知，但这个通知不能阻止连接点之前的执行流程（除非它抛出一个异常）。</p>\n</li>\n<li><p>@AfterReturning ：后置通知：在某连接点正常完成后执行的通知，通常在一个匹配的方法返回的时候执行。</p>\n</li>\n</ul>\n<p>可以在后置通知中绑定返回值，如：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@AfterReturning</span>（</span><br><span class=\"line\">    pointcut=com.test.service.CacheDemoService.findById(..))<span class=\"string\">\",</span></span><br><span class=\"line\"><span class=\"string\">    returning=\"</span>retVal<span class=\"string\">\"）</span></span><br><span class=\"line\"><span class=\"string\">  public void doFindByIdCheck（Object retVal） &#123;</span></span><br><span class=\"line\"><span class=\"string\">    // ...</span></span><br><span class=\"line\"><span class=\"string\">  &#125;</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li><p>@AfterThrowing:异常通知：在方法抛出异常退出时执行的通知。　　　　　　　</p>\n</li>\n<li><p>@After 最终通知。当某连接点退出的时候执行的通知（不论是正常返回还是异常退出）。</p>\n</li>\n<li><p>@Around：环绕通知：包围一个连接点的通知，如方法调用。这是最强大的一种通知类型。环绕通知可以在方法调用前后完成自定义的行为。它也会选择是否继续执行连接点或直接返回它自己的返回值或抛出异常来结束执行。</p>\n</li>\n</ul>\n<blockquote>\n<p>环绕通知最麻烦，也最强大，其是一个对方法的环绕，具体方法会通过代理传递到切面中去，切面中可选择执行方法与否，执行方法几次等。</p>\n</blockquote>\n<blockquote>\n<p>环绕通知使用一个代理ProceedingJoinPoint类型的对象来管理目标对象，所以此通知的第一个参数必须是ProceedingJoinPoint类型，在通知体内，调用ProceedingJoinPoint的proceed()方法会导致后台的连接点方法执行。proceed 方法也可能会被调用并且传入一个Object[]对象-该数组中的值将被作为方法执行时的参数。</p>\n</blockquote>\n<h2><span id=\"切入点表达式\">切入点表达式</span></h2><p>切入点表达式的格式：execution([可见性] 返回类型 [声明类型].方法名(参数) [异常])</p>\n<p>其中【】中的为可选，其他的还支持通配符的使用:</p>\n<p>*：匹配所有字符<br>..：一般用于匹配多个包，多个参数<br>+：表示类及其子类</p>\n<p>运算符有：&amp;&amp;、||、!</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">* execution：用于匹配子表达式。</span><br><span class=\"line\">//匹配com.cjm.model包及其子包中所有类中的所有方法，返回类型任意，方法参数任意</span><br><span class=\"line\">@Pointcut(&quot;execution(* com.cjm.model..*.*(..))&quot;)</span><br><span class=\"line\">public void before()&#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">* within：用于匹配连接点所在的Java类或者包。</span><br><span class=\"line\">//匹配Person类中的所有方法</span><br><span class=\"line\">@Pointcut(&quot;within(com.cjm.model.Person)&quot;)</span><br><span class=\"line\">public void before()&#123;&#125;</span><br><span class=\"line\">            </span><br><span class=\"line\">//匹配com.cjm包及其子包中所有类中的所有方法</span><br><span class=\"line\">@Pointcut(&quot;within(com.cjm..*)&quot;)</span><br><span class=\"line\">public void before()&#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">* this：用于向通知方法中传入代理对象的引用。</span><br><span class=\"line\">@Before(&quot;before() &amp;&amp; this(proxy)&quot;)</span><br><span class=\"line\">public void beforeAdvide(JoinPoint point, Object proxy)&#123;</span><br><span class=\"line\">   //处理逻辑</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">* target：用于向通知方法中传入目标对象的引用。</span><br><span class=\"line\">@Before(&quot;before() &amp;&amp; target(target)</span><br><span class=\"line\">public void beforeAdvide(JoinPoint point, Object proxy)&#123;</span><br><span class=\"line\">   //处理逻辑</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">* args：用于将参数传入到通知方法中。</span><br><span class=\"line\">@Before(&quot;before() &amp;&amp; args(age,username)&quot;)</span><br><span class=\"line\">public void beforeAdvide(JoinPoint point, int age, String username)&#123;</span><br><span class=\"line\">   //处理逻辑</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">* @within ：用于匹配在类一级使用了参数确定的注解的类，其所有方法都将被匹配。 </span><br><span class=\"line\">@Pointcut(&quot;@within(com.cjm.annotation.AdviceAnnotation)&quot;)</span><br><span class=\"line\">//所有被@AdviceAnnotation标注的类都将匹配</span><br><span class=\"line\">public void before()&#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">* @target ：和@within的功能类似，但必须要指定注解接口的保留策略为RUNTIME。 @Pointcut(&quot;@target(com.cjm.annotation.AdviceAnnotation)&quot;)</span><br><span class=\"line\">public void before()&#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">* @args ：传入连接点的对象对应的Java类必须被@args指定的Annotation注解标注。   @Before(&quot;@args(com.cjm.annotation.AdviceAnnotation)&quot;)</span><br><span class=\"line\">public void beforeAdvide(JoinPoint point)&#123;</span><br><span class=\"line\">   //处理逻辑</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">* @annotation ：匹配连接点被它参数指定的Annotation注解的方法。也就是说，所有被指定注解标注的方法都将匹配。</span><br><span class=\"line\">@Pointcut(&quot;@annotation(com.cjm.annotation.AdviceAnnotation)&quot;)</span><br><span class=\"line\">public void before()&#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">* bean：通过受管Bean的名字来限定连接点所在的Bean。该关键词是Spring2.5新增的。</span><br><span class=\"line\">@Pointcut(&quot;bean(person)&quot;)</span><br><span class=\"line\">public void before()&#123;&#125;</span><br></pre></td></tr></table></figure>\n<h2><span id=\"准备工作\">准备工作</span></h2><p>因为需要对web请求做切面来记录日志，所以先引入web模块，并创建一个简单的hello请求的处理。</p>\n<ul>\n<li>pom.xml 中引入aop模块</li>\n</ul>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span>  </span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-starter-aop<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li>或者gradle.build 引入</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">compile(&quot;org.springframework.boot:spring-boot-starter-aop&quot;)</span><br></pre></td></tr></table></figure>\n<p>在完成了引入AOP依赖包后，一般来说并不需要去做其他配置。也许在Spring中使用过注解配置方式的人会问是否需要在程序主类中增加 @EnableAspectJAutoProxy 来启用，实际并不需要。</p>\n<p>可以看下面关于AOP的默认配置属性，其中 spring.aop.auto 属性默认是开启的，也就是说只要引入了AOP依赖后，默认已经增加了 @EnableAspectJAutoProxy 。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># AOP</span><br><span class=\"line\">spring.aop.auto=true # Add @EnableAspectJAutoProxy.  </span><br><span class=\"line\">spring.aop.proxy-target-class=false # Whether subclass-based (CGLIB) proxies are to be created (true) as  </span><br><span class=\"line\"> opposed to standard Java interface-based proxies (false).</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>而当我们需要使用CGLIB来实现AOP的时候，需要配置 spring.aop.proxy-target-class=true ，不然默认使用的是标准Java的实现。</p>\n</blockquote>\n<h2><span id=\"aop方法\">AOP方法</span></h2><p>实现AOP的切面主要有以下几个要素：</p>\n<ul>\n<li>使用 @Aspect 注解将一个java类定义为切面类</li>\n<li>使用 @Pointcut 定义一个切入点，可以是一个规则表达式，比如下例中某个package下的所有函数，也可以是一个注解等。</li>\n<li>根据需要在切入点不同位置的切入内容<ul>\n<li>使用 @Before 在切入点开始处切入内容</li>\n<li>使用 @After 在切入点结尾处切入内容</li>\n<li>使用 @AfterReturning 在切入点return内容之后切入内容（可以用来对处理返回值做一些加工处理）</li>\n<li>使用 @Around 在切入点前后切入内容，并自己控制何时执行切入点自身的内容</li>\n<li>使用 @AfterThrowing 用来处理当切入内容部分抛出异常之后的处理逻辑</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Aspect</span></span><br><span class=\"line\"><span class=\"meta\">@Component</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">WebLogAspect</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> Logger logger = Logger.getLogger(getClass());</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Pointcut</span>(<span class=\"string\">\"execution(public * com.didispace.web..*.*(..))\"</span>)</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">webLog</span><span class=\"params\">()</span></span>&#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Before</span>(<span class=\"string\">\"webLog()\"</span>)</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">doBefore</span><span class=\"params\">(JoinPoint joinPoint)</span> <span class=\"keyword\">throws</span> Throwable </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 接收到请求，记录请求内容</span></span><br><span class=\"line\">        ServletRequestAttributes attributes = (ServletRequestAttributes) RequestContextHolder.getRequestAttributes();</span><br><span class=\"line\">        HttpServletRequest request = attributes.getRequest();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 记录下请求内容</span></span><br><span class=\"line\">        logger.info(<span class=\"string\">\"URL : \"</span> + request.getRequestURL().toString());</span><br><span class=\"line\">        logger.info(<span class=\"string\">\"HTTP_METHOD : \"</span> + request.getMethod());</span><br><span class=\"line\">        logger.info(<span class=\"string\">\"IP : \"</span> + request.getRemoteAddr());</span><br><span class=\"line\">        logger.info(<span class=\"string\">\"CLASS_METHOD : \"</span> + joinPoint.getSignature().getDeclaringTypeName() + <span class=\"string\">\".\"</span> + joinPoint.getSignature().getName());</span><br><span class=\"line\">        logger.info(<span class=\"string\">\"ARGS : \"</span> + Arrays.toString(joinPoint.getArgs()));</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@AfterReturning</span>(returning = <span class=\"string\">\"ret\"</span>, pointcut = <span class=\"string\">\"webLog()\"</span>)</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">doAfterReturning</span><span class=\"params\">(Object ret)</span> <span class=\"keyword\">throws</span> Throwable </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 处理完请求，返回内容</span></span><br><span class=\"line\">        logger.info(<span class=\"string\">\"RESPONSE : \"</span> + ret);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">```\t</span><br><span class=\"line\"></span><br><span class=\"line\">可以看上面的例子，通过 <span class=\"meta\">@Pointcut</span> 定义的切入点为 com.didispace.web 包下的所有函数（对web层所有请求处理做切入点），然后通过 <span class=\"meta\">@Before</span> 实现，对请求内容的日志记录（本文只是说明过程，可以根据需要调整内容），最后通过 <span class=\"meta\">@AfterReturning</span> 记录请求返回的对象。</span><br><span class=\"line\"></span><br><span class=\"line\">通过运行程序并访问： http:<span class=\"comment\">//localhost:8080/hello?name=didi ，可以获得下面的日志输出</span></span><br><span class=\"line\"></span><br><span class=\"line\">```java</span><br><span class=\"line\"><span class=\"number\">2016</span>-<span class=\"number\">05</span>-<span class=\"number\">19</span> <span class=\"number\">13</span>:<span class=\"number\">42</span>:<span class=\"number\">13</span>,<span class=\"number\">156</span>  INFO WebLogAspect:<span class=\"number\">41</span> - URL : http:<span class=\"comment\">//localhost:8080/hello  </span></span><br><span class=\"line\"><span class=\"number\">2016</span>-<span class=\"number\">05</span>-<span class=\"number\">19</span> <span class=\"number\">13</span>:<span class=\"number\">42</span>:<span class=\"number\">13</span>,<span class=\"number\">156</span>  INFO WebLogAspect:<span class=\"number\">42</span> - HTTP_METHOD : http:<span class=\"comment\">//localhost:8080/hello  </span></span><br><span class=\"line\"><span class=\"number\">2016</span>-<span class=\"number\">05</span>-<span class=\"number\">19</span> <span class=\"number\">13</span>:<span class=\"number\">42</span>:<span class=\"number\">13</span>,<span class=\"number\">157</span>  INFO WebLogAspect:<span class=\"number\">43</span> - IP : <span class=\"number\">0</span>:<span class=\"number\">0</span>:<span class=\"number\">0</span>:<span class=\"number\">0</span>:<span class=\"number\">0</span>:<span class=\"number\">0</span>:<span class=\"number\">0</span>:<span class=\"number\">1</span>  </span><br><span class=\"line\"><span class=\"number\">2016</span>-<span class=\"number\">05</span>-<span class=\"number\">19</span> <span class=\"number\">13</span>:<span class=\"number\">42</span>:<span class=\"number\">13</span>,<span class=\"number\">160</span>  INFO WebLogAspect:<span class=\"number\">44</span> - CLASS_METHOD : com.didispace.web.HelloController.hello  </span><br><span class=\"line\"><span class=\"number\">2016</span>-<span class=\"number\">05</span>-<span class=\"number\">19</span> <span class=\"number\">13</span>:<span class=\"number\">42</span>:<span class=\"number\">13</span>,<span class=\"number\">160</span>  INFO WebLogAspect:<span class=\"number\">45</span> - ARGS : [didi]  </span><br><span class=\"line\"><span class=\"number\">2016</span>-<span class=\"number\">05</span>-<span class=\"number\">19</span> <span class=\"number\">13</span>:<span class=\"number\">42</span>:<span class=\"number\">13</span>,<span class=\"number\">170</span>  INFO WebLogAspect:<span class=\"number\">52</span> - RESPONSE:Hello didi</span><br></pre></td></tr></table></figure>\n<h2><span id=\"优化aop切面中的同步问题\">优化：AOP切面中的同步问题</span></h2><p>在WebLogAspect切面中，分别通过doBefore和doAfterReturning两个独立函数实现了切点头部和切点返回后执行的内容，若我们想统计请求的处理时间，就需要在doBefore处记录时间，并在doAfterReturning处通过当前时间与开始处记录的时间计算得到请求处理的消耗时间。</p>\n<p>那么我们是否可以在WebLogAspect切面中定义一个成员变量来给doBefore和doAfterReturning一起访问呢？是否会有同步问题呢？</p>\n<p>的确，直接在这里定义基本类型会有同步问题，所以我们可以引入ThreadLocal对象，像下面这样进行记录：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@Aspect</span><br><span class=\"line\">@Component</span><br><span class=\"line\">public class WebLogAspect &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    private Logger logger = Logger.getLogger(getClass());</span><br><span class=\"line\"></span><br><span class=\"line\">    ThreadLocal&lt;Long&gt; startTime = new ThreadLocal&lt;&gt;();</span><br><span class=\"line\"></span><br><span class=\"line\">    @Pointcut(&quot;execution(public * com.didispace.web..*.*(..))&quot;)</span><br><span class=\"line\">    public void webLog()&#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    @Before(&quot;webLog()&quot;)</span><br><span class=\"line\">    public void doBefore(JoinPoint joinPoint) throws Throwable &#123;</span><br><span class=\"line\">        startTime.set(System.currentTimeMillis());</span><br><span class=\"line\"></span><br><span class=\"line\">        // 省略日志记录内容</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    @AfterReturning(returning = &quot;ret&quot;, pointcut = &quot;webLog()&quot;)</span><br><span class=\"line\">    public void doAfterReturning(Object ret) throws Throwable &#123;</span><br><span class=\"line\">        // 处理完请求，返回内容</span><br><span class=\"line\">        logger.info(&quot;RESPONSE : &quot; + ret);</span><br><span class=\"line\">        logger.info(&quot;SPEND TIME : &quot; + (System.currentTimeMillis() - startTime.get()));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2><span id=\"优化aop切面的优先级\">优化：AOP切面的优先级</span></h2><p>由于通过AOP实现，程序得到了很好的解耦，但是也会带来一些问题，比如：我们可能会对Web层做多个切面，校验用户，校验头信息等等，这个时候经常会碰到切面的处理顺序问题。</p>\n<p>所以，我们需要定义每个切面的优先级，我们需要 @Order(i) 注解来标识切面的优先级。 i的值越小，优先级越高 。假设我们还有一个切面是 CheckNameAspect 用来校验name必须为didi，我们为其设置 @Order(10) ，而上文中WebLogAspect设置为 @Order(5) ，所以WebLogAspect有更高的优先级，这个时候执行顺序是这样的：</p>\n<ul>\n<li>在 @Before 中优先执行 @Order(5) 的内容，再执行 @Order(10) 的内容</li>\n<li><p>在 @After 和 @AfterReturning 中优先执行 @Order(10) 的内容，再执行 @Order(5) 的内容<br>所以我们可以这样子总结：</p>\n</li>\n<li><p>在切入点前的操作，按order的值由小到大执行</p>\n</li>\n<li>在切入点后的操作，按order的值由大到小执行</li>\n</ul>\n<h2><span id=\"aop实现web签名验证\">AOP实现web签名验证</span></h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Aspect</span></span><br><span class=\"line\"><span class=\"meta\">@Component</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SignatureAspect</span></span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> String secret = <span class=\"string\">\"test\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> Logger log = LoggerFactory.getLogger(<span class=\"keyword\">this</span>.getClass());</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Pointcut</span>(<span class=\"string\">\"execution(public * com.mailejifen.msg.controllers..*.*(..))\"</span>)</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">signatureVerification</span><span class=\"params\">()</span> </span>&#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Around</span>(<span class=\"string\">\"signatureVerification()\"</span>)</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Object <span class=\"title\">invoke</span><span class=\"params\">(ProceedingJoinPoint pjp)</span> <span class=\"keyword\">throws</span> Throwable </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 接收到请求，记录请求内容</span></span><br><span class=\"line\">        ServletRequestAttributes attributes = (ServletRequestAttributes) RequestContextHolder.getRequestAttributes();</span><br><span class=\"line\">        HttpServletRequest request = attributes.getRequest();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 记录下请求内容</span></span><br><span class=\"line\">        log.info(<span class=\"string\">\"URL : \"</span> + request.getRequestURL().toString());</span><br><span class=\"line\">        log.info(<span class=\"string\">\"HTTP_METHOD : \"</span> + request.getMethod());</span><br><span class=\"line\">        log.info(<span class=\"string\">\"IP : \"</span> + request.getRemoteAddr());</span><br><span class=\"line\">        log.info(<span class=\"string\">\"CLASS_METHOD : \"</span> + pjp.getSignature().getDeclaringTypeName() + <span class=\"string\">\".\"</span> + pjp.getSignature().getName());</span><br><span class=\"line\">        log.info(<span class=\"string\">\"ARGS : \"</span> + Arrays.toString(pjp.getArgs()));</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"comment\">//获取签名</span></span><br><span class=\"line\">        String sign= request.getParameter(<span class=\"string\">\"sign\"</span>);</span><br><span class=\"line\">        <span class=\"comment\">//获取所有值</span></span><br><span class=\"line\">        Object[] keys = request.getParameterMap().keySet().toArray();</span><br><span class=\"line\">        Arrays.sort(keys);</span><br><span class=\"line\">        String str = <span class=\"string\">\"\"</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (Object key : keys) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(!key.equals(<span class=\"string\">\"sign\"</span>)) &#123;</span><br><span class=\"line\">                str += request.getParameter(key.toString());</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        str += secret;</span><br><span class=\"line\">        System.out.println(str);</span><br><span class=\"line\">        System.out.println(DigestUtils.md5Hex(str));</span><br><span class=\"line\">        System.out.println(sign);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//判断签名</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(DigestUtils.md5Hex(str).equals(sign)) &#123;</span><br><span class=\"line\">            Object result = pjp.proceed();</span><br><span class=\"line\">            <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> HandleResult(ErrorCode.SIGN_FAIL,ErrorCode.getErrorMsg(ErrorCode.SIGN_FAIL));</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"何为aop\"><a href=\"#何为aop\" class=\"headerlink\" title=\"何为aop\"></a>何为aop</h1><p>　　aop全称Aspect Oriented Programming，面向切面，AOP主要实现的目的是针对业务处理过程中的切面进行提取，它所面对的是处理过程中的某个步骤或阶段，以获得逻辑过程中各部分之间低耦合性的隔离效果。其与设计模式完成的任务差不多，是提供另一种角度来思考程序的结构，来弥补面向对象编程的不足。</p>\n<p>　　通俗点讲就是提供一个为一个业务实现提供切面注入的机制，通过这种方式，在业务运行中将定义好的切面通过切入点绑定到业务中，以实现将一些特殊的逻辑绑定到此业务中。</p>\n<p>　　比如，若是需要一个记录日志的功能，首先想到的是在方法中通过log4j或其他框架来进行记录日志，但写下来发现一个问题，在整个业务中其实核心的业务代码并没有多少，都是一些记录日志或其他辅助性的一些代码。而且很多业务有需要相同的功能，比如都需要记录日志，这时候又需要将这些记录日志的功能复制一遍，即使是封装成框架，也是需要调用之类的。在此处使用复杂的设计模式又得不偿失。</p>\n<h2 id=\"aop名词\"><a href=\"#aop名词\" class=\"headerlink\" title=\"aop名词\"></a>aop名词</h2><p>　　先介绍一些aop的名词，其实这些名词对使用aop没什么影响，但为了更好的理解最好知道一些</p>\n<ul>\n<li><p>切面（Aspect）：一个关注点的模块化，这个关注点可能会横切多个对象。事务管理是J2EE应用中一个关于横切关注点的很好的例子。</p>\n</li>\n<li><p>连接点（Joinpoint）：在程序执行过程中某个特定的点，比如某方法调用的时候或者处理异常的时候。在Spring AOP中，一个连接点总是表示一个方法的执行。</p>\n</li>\n<li><p>通知（Advice）：在切面的某个特定的连接点上执行的动作。其中包括了“around”、“before”和“after”等不同类型的通知（通知的类型将在后面部分进行讨论）。许多AOP框架（包括Spring）都是以拦截器做通知模型，并维护一个以连接点为中心的拦截器链。</p>\n</li>\n<li><p>切入点（Pointcut）：匹配连接点的断言。通知和一个切入点表达式关联，并在满足这个切入点的连接点上运行（例如，当执行某个特定名称的方法时）。切入点表达式如何和连接点匹配是AOP的核心：Spring缺省使用AspectJ切入点语法。</p>\n</li>\n<li><p>引入（Introduction）：用来给一个类型声明额外的方法或属性（也被称为连接类型声明（inter-type declaration））。Spring允许引入新的接口（以及一个对应的实现）到任何被代理的对象。例如，你可以使用引入来使一个bean实现IsModified接口，以便简化缓存机制。</p>\n</li>\n<li><p>目标对象（Target Object）：被一个或者多个切面所通知的对象。也被称做被通知（advised）对象。既然Spring AOP是通过运行时代理实现的，这个对象永远是一个被代理（proxied）对象。</p>\n</li>\n<li><p>AOP代理（AOP Proxy）：AOP框架创建的对象，用来实现切面契约（例如通知方法执行等等）。在Spring中，AOP代理可以是JDK动态代理或者CGLIB代理。</p>\n</li>\n<li><p>织入（Weaving）：把切面连接到其它的应用程序类型或者对象上，并创建一个被通知的对象。这些可以在编译时（例如使用AspectJ编译器），类加载时和运行时完成。Spring和其他纯Java AOP框架一样，在运行时完成织入。</p>\n</li>\n</ul>\n<p>其中重要的名词有：切面，切入点</p>\n<h2 id=\"注解\"><a href=\"#注解\" class=\"headerlink\" title=\"注解\"></a>注解</h2><ul>\n<li><p>@Aspect:描述一个切面类，定义切面类的时候需要打上这个注解</p>\n</li>\n<li><p>@Configuration：spring-boot配置类</p>\n</li>\n<li><p>@Pointcut：声明一个切入点，切入点决定了连接点关注的内容，使得我们可以控制通知什么时候执行。Spring AOP只支持Spring bean的方法执行连接点。所以你可以把切入点看做是Spring bean上方法执行的匹配。一个切入点声明有两个部分：一个包含名字和任意参数的签名，还有一个切入点表达式，该表达式决定了我们关注那个方法的执行。</p>\n</li>\n</ul>\n<p>　注：作为切入点签名的方法必须返回void 类型</p>\n<h2 id=\"Spring-AOP支持在切入点表达式中使用如下的切入点指示符：\"><a href=\"#Spring-AOP支持在切入点表达式中使用如下的切入点指示符：\" class=\"headerlink\" title=\"Spring AOP支持在切入点表达式中使用如下的切入点指示符：　　　　\"></a>Spring AOP支持在切入点表达式中使用如下的切入点指示符：　　　　</h2><ul>\n<li><p>execution - 匹配方法执行的连接点，这是你将会用到的Spring的最主要的切入点指示符。</p>\n</li>\n<li><p>within - 限定匹配特定类型的连接点（在使用Spring AOP的时候，在匹配的类型中定义的方法的执行）。</p>\n</li>\n<li><p>this - 限定匹配特定的连接点（使用Spring AOP的时候方法的执行），其中bean reference（Spring AOP 代理）是指定类型的实例。</p>\n</li>\n<li><p>target - 限定匹配特定的连接点（使用Spring AOP的时候方法的执行），其中目标对象（被代理的应用对象）是指定类型的实例。</p>\n</li>\n<li><p>args - 限定匹配特定的连接点（使用Spring AOP的时候方法的执行），其中参数是指定类型的实例。</p>\n</li>\n<li><p>@target - 限定匹配特定的连接点（使用Spring AOP的时候方法的执行），其中正执行对象的类持有指定类型的注解。</p>\n</li>\n<li><p>@args - 限定匹配特定的连接点（使用Spring AOP的时候方法的执行），其中实际传入参数的运行时类型持有指定类型的注解。</p>\n</li>\n<li><p>@within - 限定匹配特定的连接点，其中连接点所在类型已指定注解（在使用Spring AOP的时候，所执行的方法所在类型已指定注解）。</p>\n</li>\n<li><p>@annotation - 限定匹配特定的连接点（使用Spring AOP的时候方法的执行），其中连接点的主题持有指定的注解。</p>\n</li>\n</ul>\n<blockquote>\n<p>其中execution使用最频繁，即某方法执行时进行切入。定义切入点中有一个重要的知识，即切入点表达式，我们一会在解释怎么写切入点表达式。</p>\n</blockquote>\n<h2 id=\"spring-aop支持的通知：\"><a href=\"#spring-aop支持的通知：\" class=\"headerlink\" title=\"spring aop支持的通知：\"></a>spring aop支持的通知：</h2><ul>\n<li><p>@Before：前置通知：在某连接点之前执行的通知，但这个通知不能阻止连接点之前的执行流程（除非它抛出一个异常）。</p>\n</li>\n<li><p>@AfterReturning ：后置通知：在某连接点正常完成后执行的通知，通常在一个匹配的方法返回的时候执行。</p>\n</li>\n</ul>\n<p>可以在后置通知中绑定返回值，如：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@AfterReturning</span>（</span><br><span class=\"line\">    pointcut=com.test.service.CacheDemoService.findById(..))<span class=\"string\">\",</span></span><br><span class=\"line\"><span class=\"string\">    returning=\"</span>retVal<span class=\"string\">\"）</span></span><br><span class=\"line\"><span class=\"string\">  public void doFindByIdCheck（Object retVal） &#123;</span></span><br><span class=\"line\"><span class=\"string\">    // ...</span></span><br><span class=\"line\"><span class=\"string\">  &#125;</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li><p>@AfterThrowing:异常通知：在方法抛出异常退出时执行的通知。　　　　　　　</p>\n</li>\n<li><p>@After 最终通知。当某连接点退出的时候执行的通知（不论是正常返回还是异常退出）。</p>\n</li>\n<li><p>@Around：环绕通知：包围一个连接点的通知，如方法调用。这是最强大的一种通知类型。环绕通知可以在方法调用前后完成自定义的行为。它也会选择是否继续执行连接点或直接返回它自己的返回值或抛出异常来结束执行。</p>\n</li>\n</ul>\n<blockquote>\n<p>环绕通知最麻烦，也最强大，其是一个对方法的环绕，具体方法会通过代理传递到切面中去，切面中可选择执行方法与否，执行方法几次等。</p>\n</blockquote>\n<blockquote>\n<p>环绕通知使用一个代理ProceedingJoinPoint类型的对象来管理目标对象，所以此通知的第一个参数必须是ProceedingJoinPoint类型，在通知体内，调用ProceedingJoinPoint的proceed()方法会导致后台的连接点方法执行。proceed 方法也可能会被调用并且传入一个Object[]对象-该数组中的值将被作为方法执行时的参数。</p>\n</blockquote>\n<h2 id=\"切入点表达式\"><a href=\"#切入点表达式\" class=\"headerlink\" title=\"切入点表达式\"></a>切入点表达式</h2><p>切入点表达式的格式：execution([可见性] 返回类型 [声明类型].方法名(参数) [异常])</p>\n<p>其中【】中的为可选，其他的还支持通配符的使用:</p>\n<p>*：匹配所有字符<br>..：一般用于匹配多个包，多个参数<br>+：表示类及其子类</p>\n<p>运算符有：&amp;&amp;、||、!</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">* execution：用于匹配子表达式。</span><br><span class=\"line\">//匹配com.cjm.model包及其子包中所有类中的所有方法，返回类型任意，方法参数任意</span><br><span class=\"line\">@Pointcut(&quot;execution(* com.cjm.model..*.*(..))&quot;)</span><br><span class=\"line\">public void before()&#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">* within：用于匹配连接点所在的Java类或者包。</span><br><span class=\"line\">//匹配Person类中的所有方法</span><br><span class=\"line\">@Pointcut(&quot;within(com.cjm.model.Person)&quot;)</span><br><span class=\"line\">public void before()&#123;&#125;</span><br><span class=\"line\">            </span><br><span class=\"line\">//匹配com.cjm包及其子包中所有类中的所有方法</span><br><span class=\"line\">@Pointcut(&quot;within(com.cjm..*)&quot;)</span><br><span class=\"line\">public void before()&#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">* this：用于向通知方法中传入代理对象的引用。</span><br><span class=\"line\">@Before(&quot;before() &amp;&amp; this(proxy)&quot;)</span><br><span class=\"line\">public void beforeAdvide(JoinPoint point, Object proxy)&#123;</span><br><span class=\"line\">   //处理逻辑</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">* target：用于向通知方法中传入目标对象的引用。</span><br><span class=\"line\">@Before(&quot;before() &amp;&amp; target(target)</span><br><span class=\"line\">public void beforeAdvide(JoinPoint point, Object proxy)&#123;</span><br><span class=\"line\">   //处理逻辑</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">* args：用于将参数传入到通知方法中。</span><br><span class=\"line\">@Before(&quot;before() &amp;&amp; args(age,username)&quot;)</span><br><span class=\"line\">public void beforeAdvide(JoinPoint point, int age, String username)&#123;</span><br><span class=\"line\">   //处理逻辑</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">* @within ：用于匹配在类一级使用了参数确定的注解的类，其所有方法都将被匹配。 </span><br><span class=\"line\">@Pointcut(&quot;@within(com.cjm.annotation.AdviceAnnotation)&quot;)</span><br><span class=\"line\">//所有被@AdviceAnnotation标注的类都将匹配</span><br><span class=\"line\">public void before()&#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">* @target ：和@within的功能类似，但必须要指定注解接口的保留策略为RUNTIME。 @Pointcut(&quot;@target(com.cjm.annotation.AdviceAnnotation)&quot;)</span><br><span class=\"line\">public void before()&#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">* @args ：传入连接点的对象对应的Java类必须被@args指定的Annotation注解标注。   @Before(&quot;@args(com.cjm.annotation.AdviceAnnotation)&quot;)</span><br><span class=\"line\">public void beforeAdvide(JoinPoint point)&#123;</span><br><span class=\"line\">   //处理逻辑</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">* @annotation ：匹配连接点被它参数指定的Annotation注解的方法。也就是说，所有被指定注解标注的方法都将匹配。</span><br><span class=\"line\">@Pointcut(&quot;@annotation(com.cjm.annotation.AdviceAnnotation)&quot;)</span><br><span class=\"line\">public void before()&#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">* bean：通过受管Bean的名字来限定连接点所在的Bean。该关键词是Spring2.5新增的。</span><br><span class=\"line\">@Pointcut(&quot;bean(person)&quot;)</span><br><span class=\"line\">public void before()&#123;&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"准备工作\"><a href=\"#准备工作\" class=\"headerlink\" title=\"准备工作\"></a>准备工作</h2><p>因为需要对web请求做切面来记录日志，所以先引入web模块，并创建一个简单的hello请求的处理。</p>\n<ul>\n<li>pom.xml 中引入aop模块</li>\n</ul>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span>  </span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-starter-aop<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li>或者gradle.build 引入</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">compile(&quot;org.springframework.boot:spring-boot-starter-aop&quot;)</span><br></pre></td></tr></table></figure>\n<p>在完成了引入AOP依赖包后，一般来说并不需要去做其他配置。也许在Spring中使用过注解配置方式的人会问是否需要在程序主类中增加 @EnableAspectJAutoProxy 来启用，实际并不需要。</p>\n<p>可以看下面关于AOP的默认配置属性，其中 spring.aop.auto 属性默认是开启的，也就是说只要引入了AOP依赖后，默认已经增加了 @EnableAspectJAutoProxy 。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># AOP</span><br><span class=\"line\">spring.aop.auto=true # Add @EnableAspectJAutoProxy.  </span><br><span class=\"line\">spring.aop.proxy-target-class=false # Whether subclass-based (CGLIB) proxies are to be created (true) as  </span><br><span class=\"line\"> opposed to standard Java interface-based proxies (false).</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>而当我们需要使用CGLIB来实现AOP的时候，需要配置 spring.aop.proxy-target-class=true ，不然默认使用的是标准Java的实现。</p>\n</blockquote>\n<h2 id=\"AOP方法\"><a href=\"#AOP方法\" class=\"headerlink\" title=\"AOP方法\"></a>AOP方法</h2><p>实现AOP的切面主要有以下几个要素：</p>\n<ul>\n<li>使用 @Aspect 注解将一个java类定义为切面类</li>\n<li>使用 @Pointcut 定义一个切入点，可以是一个规则表达式，比如下例中某个package下的所有函数，也可以是一个注解等。</li>\n<li>根据需要在切入点不同位置的切入内容<ul>\n<li>使用 @Before 在切入点开始处切入内容</li>\n<li>使用 @After 在切入点结尾处切入内容</li>\n<li>使用 @AfterReturning 在切入点return内容之后切入内容（可以用来对处理返回值做一些加工处理）</li>\n<li>使用 @Around 在切入点前后切入内容，并自己控制何时执行切入点自身的内容</li>\n<li>使用 @AfterThrowing 用来处理当切入内容部分抛出异常之后的处理逻辑</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Aspect</span></span><br><span class=\"line\"><span class=\"meta\">@Component</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">WebLogAspect</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> Logger logger = Logger.getLogger(getClass());</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Pointcut</span>(<span class=\"string\">\"execution(public * com.didispace.web..*.*(..))\"</span>)</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">webLog</span><span class=\"params\">()</span></span>&#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Before</span>(<span class=\"string\">\"webLog()\"</span>)</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">doBefore</span><span class=\"params\">(JoinPoint joinPoint)</span> <span class=\"keyword\">throws</span> Throwable </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 接收到请求，记录请求内容</span></span><br><span class=\"line\">        ServletRequestAttributes attributes = (ServletRequestAttributes) RequestContextHolder.getRequestAttributes();</span><br><span class=\"line\">        HttpServletRequest request = attributes.getRequest();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 记录下请求内容</span></span><br><span class=\"line\">        logger.info(<span class=\"string\">\"URL : \"</span> + request.getRequestURL().toString());</span><br><span class=\"line\">        logger.info(<span class=\"string\">\"HTTP_METHOD : \"</span> + request.getMethod());</span><br><span class=\"line\">        logger.info(<span class=\"string\">\"IP : \"</span> + request.getRemoteAddr());</span><br><span class=\"line\">        logger.info(<span class=\"string\">\"CLASS_METHOD : \"</span> + joinPoint.getSignature().getDeclaringTypeName() + <span class=\"string\">\".\"</span> + joinPoint.getSignature().getName());</span><br><span class=\"line\">        logger.info(<span class=\"string\">\"ARGS : \"</span> + Arrays.toString(joinPoint.getArgs()));</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@AfterReturning</span>(returning = <span class=\"string\">\"ret\"</span>, pointcut = <span class=\"string\">\"webLog()\"</span>)</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">doAfterReturning</span><span class=\"params\">(Object ret)</span> <span class=\"keyword\">throws</span> Throwable </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 处理完请求，返回内容</span></span><br><span class=\"line\">        logger.info(<span class=\"string\">\"RESPONSE : \"</span> + ret);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">```\t</span><br><span class=\"line\"></span><br><span class=\"line\">可以看上面的例子，通过 <span class=\"meta\">@Pointcut</span> 定义的切入点为 com.didispace.web 包下的所有函数（对web层所有请求处理做切入点），然后通过 <span class=\"meta\">@Before</span> 实现，对请求内容的日志记录（本文只是说明过程，可以根据需要调整内容），最后通过 <span class=\"meta\">@AfterReturning</span> 记录请求返回的对象。</span><br><span class=\"line\"></span><br><span class=\"line\">通过运行程序并访问： http:<span class=\"comment\">//localhost:8080/hello?name=didi ，可以获得下面的日志输出</span></span><br><span class=\"line\"></span><br><span class=\"line\">```java</span><br><span class=\"line\"><span class=\"number\">2016</span>-<span class=\"number\">05</span>-<span class=\"number\">19</span> <span class=\"number\">13</span>:<span class=\"number\">42</span>:<span class=\"number\">13</span>,<span class=\"number\">156</span>  INFO WebLogAspect:<span class=\"number\">41</span> - URL : http:<span class=\"comment\">//localhost:8080/hello  </span></span><br><span class=\"line\"><span class=\"number\">2016</span>-<span class=\"number\">05</span>-<span class=\"number\">19</span> <span class=\"number\">13</span>:<span class=\"number\">42</span>:<span class=\"number\">13</span>,<span class=\"number\">156</span>  INFO WebLogAspect:<span class=\"number\">42</span> - HTTP_METHOD : http:<span class=\"comment\">//localhost:8080/hello  </span></span><br><span class=\"line\"><span class=\"number\">2016</span>-<span class=\"number\">05</span>-<span class=\"number\">19</span> <span class=\"number\">13</span>:<span class=\"number\">42</span>:<span class=\"number\">13</span>,<span class=\"number\">157</span>  INFO WebLogAspect:<span class=\"number\">43</span> - IP : <span class=\"number\">0</span>:<span class=\"number\">0</span>:<span class=\"number\">0</span>:<span class=\"number\">0</span>:<span class=\"number\">0</span>:<span class=\"number\">0</span>:<span class=\"number\">0</span>:<span class=\"number\">1</span>  </span><br><span class=\"line\"><span class=\"number\">2016</span>-<span class=\"number\">05</span>-<span class=\"number\">19</span> <span class=\"number\">13</span>:<span class=\"number\">42</span>:<span class=\"number\">13</span>,<span class=\"number\">160</span>  INFO WebLogAspect:<span class=\"number\">44</span> - CLASS_METHOD : com.didispace.web.HelloController.hello  </span><br><span class=\"line\"><span class=\"number\">2016</span>-<span class=\"number\">05</span>-<span class=\"number\">19</span> <span class=\"number\">13</span>:<span class=\"number\">42</span>:<span class=\"number\">13</span>,<span class=\"number\">160</span>  INFO WebLogAspect:<span class=\"number\">45</span> - ARGS : [didi]  </span><br><span class=\"line\"><span class=\"number\">2016</span>-<span class=\"number\">05</span>-<span class=\"number\">19</span> <span class=\"number\">13</span>:<span class=\"number\">42</span>:<span class=\"number\">13</span>,<span class=\"number\">170</span>  INFO WebLogAspect:<span class=\"number\">52</span> - RESPONSE:Hello didi</span><br></pre></td></tr></table></figure>\n<h2 id=\"优化：AOP切面中的同步问题\"><a href=\"#优化：AOP切面中的同步问题\" class=\"headerlink\" title=\"优化：AOP切面中的同步问题\"></a>优化：AOP切面中的同步问题</h2><p>在WebLogAspect切面中，分别通过doBefore和doAfterReturning两个独立函数实现了切点头部和切点返回后执行的内容，若我们想统计请求的处理时间，就需要在doBefore处记录时间，并在doAfterReturning处通过当前时间与开始处记录的时间计算得到请求处理的消耗时间。</p>\n<p>那么我们是否可以在WebLogAspect切面中定义一个成员变量来给doBefore和doAfterReturning一起访问呢？是否会有同步问题呢？</p>\n<p>的确，直接在这里定义基本类型会有同步问题，所以我们可以引入ThreadLocal对象，像下面这样进行记录：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@Aspect</span><br><span class=\"line\">@Component</span><br><span class=\"line\">public class WebLogAspect &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    private Logger logger = Logger.getLogger(getClass());</span><br><span class=\"line\"></span><br><span class=\"line\">    ThreadLocal&lt;Long&gt; startTime = new ThreadLocal&lt;&gt;();</span><br><span class=\"line\"></span><br><span class=\"line\">    @Pointcut(&quot;execution(public * com.didispace.web..*.*(..))&quot;)</span><br><span class=\"line\">    public void webLog()&#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    @Before(&quot;webLog()&quot;)</span><br><span class=\"line\">    public void doBefore(JoinPoint joinPoint) throws Throwable &#123;</span><br><span class=\"line\">        startTime.set(System.currentTimeMillis());</span><br><span class=\"line\"></span><br><span class=\"line\">        // 省略日志记录内容</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    @AfterReturning(returning = &quot;ret&quot;, pointcut = &quot;webLog()&quot;)</span><br><span class=\"line\">    public void doAfterReturning(Object ret) throws Throwable &#123;</span><br><span class=\"line\">        // 处理完请求，返回内容</span><br><span class=\"line\">        logger.info(&quot;RESPONSE : &quot; + ret);</span><br><span class=\"line\">        logger.info(&quot;SPEND TIME : &quot; + (System.currentTimeMillis() - startTime.get()));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"优化：AOP切面的优先级\"><a href=\"#优化：AOP切面的优先级\" class=\"headerlink\" title=\"优化：AOP切面的优先级\"></a>优化：AOP切面的优先级</h2><p>由于通过AOP实现，程序得到了很好的解耦，但是也会带来一些问题，比如：我们可能会对Web层做多个切面，校验用户，校验头信息等等，这个时候经常会碰到切面的处理顺序问题。</p>\n<p>所以，我们需要定义每个切面的优先级，我们需要 @Order(i) 注解来标识切面的优先级。 i的值越小，优先级越高 。假设我们还有一个切面是 CheckNameAspect 用来校验name必须为didi，我们为其设置 @Order(10) ，而上文中WebLogAspect设置为 @Order(5) ，所以WebLogAspect有更高的优先级，这个时候执行顺序是这样的：</p>\n<ul>\n<li>在 @Before 中优先执行 @Order(5) 的内容，再执行 @Order(10) 的内容</li>\n<li><p>在 @After 和 @AfterReturning 中优先执行 @Order(10) 的内容，再执行 @Order(5) 的内容<br>所以我们可以这样子总结：</p>\n</li>\n<li><p>在切入点前的操作，按order的值由小到大执行</p>\n</li>\n<li>在切入点后的操作，按order的值由大到小执行</li>\n</ul>\n<h2 id=\"AOP实现web签名验证\"><a href=\"#AOP实现web签名验证\" class=\"headerlink\" title=\"AOP实现web签名验证\"></a>AOP实现web签名验证</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Aspect</span></span><br><span class=\"line\"><span class=\"meta\">@Component</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SignatureAspect</span></span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> String secret = <span class=\"string\">\"test\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> Logger log = LoggerFactory.getLogger(<span class=\"keyword\">this</span>.getClass());</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Pointcut</span>(<span class=\"string\">\"execution(public * com.mailejifen.msg.controllers..*.*(..))\"</span>)</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">signatureVerification</span><span class=\"params\">()</span> </span>&#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Around</span>(<span class=\"string\">\"signatureVerification()\"</span>)</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Object <span class=\"title\">invoke</span><span class=\"params\">(ProceedingJoinPoint pjp)</span> <span class=\"keyword\">throws</span> Throwable </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 接收到请求，记录请求内容</span></span><br><span class=\"line\">        ServletRequestAttributes attributes = (ServletRequestAttributes) RequestContextHolder.getRequestAttributes();</span><br><span class=\"line\">        HttpServletRequest request = attributes.getRequest();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 记录下请求内容</span></span><br><span class=\"line\">        log.info(<span class=\"string\">\"URL : \"</span> + request.getRequestURL().toString());</span><br><span class=\"line\">        log.info(<span class=\"string\">\"HTTP_METHOD : \"</span> + request.getMethod());</span><br><span class=\"line\">        log.info(<span class=\"string\">\"IP : \"</span> + request.getRemoteAddr());</span><br><span class=\"line\">        log.info(<span class=\"string\">\"CLASS_METHOD : \"</span> + pjp.getSignature().getDeclaringTypeName() + <span class=\"string\">\".\"</span> + pjp.getSignature().getName());</span><br><span class=\"line\">        log.info(<span class=\"string\">\"ARGS : \"</span> + Arrays.toString(pjp.getArgs()));</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"comment\">//获取签名</span></span><br><span class=\"line\">        String sign= request.getParameter(<span class=\"string\">\"sign\"</span>);</span><br><span class=\"line\">        <span class=\"comment\">//获取所有值</span></span><br><span class=\"line\">        Object[] keys = request.getParameterMap().keySet().toArray();</span><br><span class=\"line\">        Arrays.sort(keys);</span><br><span class=\"line\">        String str = <span class=\"string\">\"\"</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (Object key : keys) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(!key.equals(<span class=\"string\">\"sign\"</span>)) &#123;</span><br><span class=\"line\">                str += request.getParameter(key.toString());</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        str += secret;</span><br><span class=\"line\">        System.out.println(str);</span><br><span class=\"line\">        System.out.println(DigestUtils.md5Hex(str));</span><br><span class=\"line\">        System.out.println(sign);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//判断签名</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(DigestUtils.md5Hex(str).equals(sign)) &#123;</span><br><span class=\"line\">            Object result = pjp.proceed();</span><br><span class=\"line\">            <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> HandleResult(ErrorCode.SIGN_FAIL,ErrorCode.getErrorMsg(ErrorCode.SIGN_FAIL));</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n"},{"_content":"# Spring基于Annotation的简单介绍\n\n>注解这个话题非常庞大，写这个文章压力也很大，生怕表达不清楚，职能稍做整理，仅供大家参考。\n\n#  前言\nSpring 自 2.0 版本开始，陆续引入了一些注解用于简化 Spring 的开发。@Repository 注解便属于最先引入的一批，它用于将数据访问层 (DAO 层 ) 的类标识为 Spring Bean。具体只需将该注解标注在 DAO 类上即可。同时，为了让 Spring 能够扫描类路径中的类并识别出 @Repository 注解，需要在 XML 配置文件中启用 Bean 的自动扫描功能，这可以通过以下代码实现自动扫描。\n\n```\n<context:component-scan base-package = \"\"/> \n```\n\n## 注解的基本概念和原理\n注解（Annotation）提供了一种安全的类似注释的机制，为我们在代码中添加信息提供了一种形式化得方法，使我们可以在稍后某个时刻方便的使用这些数据（通过解析注解来使用这些数据），用来将任何的信息或者元数据与程序元素（类、方法、成员变量等）进行关联。其实就是更加直观更加明了的说明，这些说明信息与程序业务逻辑没有关系，并且是供指定的工具或框架使用的。Annotation像一种修饰符一样，应用于包、类型、构造方法、方法、成员变量、参数及本地变量的申明语句中。\n\nAnnotation其实是一种接口。通过java的反射机制相关的API来访问Annotation信息。相关类（框架或工具中的类）根据这些信息来决定如何使用该程序元素或改变它们的行为。Java语言解释器在工作时会忽略这些Annotation，因此在JVM中这些Annotation是“不起作用”的，只能通过配套的工具才能对这些Annotation类型的信息进行访问和处理。\n\n\n\n","source":"_posts/spring/annotate/README.md","raw":"# Spring基于Annotation的简单介绍\n\n>注解这个话题非常庞大，写这个文章压力也很大，生怕表达不清楚，职能稍做整理，仅供大家参考。\n\n#  前言\nSpring 自 2.0 版本开始，陆续引入了一些注解用于简化 Spring 的开发。@Repository 注解便属于最先引入的一批，它用于将数据访问层 (DAO 层 ) 的类标识为 Spring Bean。具体只需将该注解标注在 DAO 类上即可。同时，为了让 Spring 能够扫描类路径中的类并识别出 @Repository 注解，需要在 XML 配置文件中启用 Bean 的自动扫描功能，这可以通过以下代码实现自动扫描。\n\n```\n<context:component-scan base-package = \"\"/> \n```\n\n## 注解的基本概念和原理\n注解（Annotation）提供了一种安全的类似注释的机制，为我们在代码中添加信息提供了一种形式化得方法，使我们可以在稍后某个时刻方便的使用这些数据（通过解析注解来使用这些数据），用来将任何的信息或者元数据与程序元素（类、方法、成员变量等）进行关联。其实就是更加直观更加明了的说明，这些说明信息与程序业务逻辑没有关系，并且是供指定的工具或框架使用的。Annotation像一种修饰符一样，应用于包、类型、构造方法、方法、成员变量、参数及本地变量的申明语句中。\n\nAnnotation其实是一种接口。通过java的反射机制相关的API来访问Annotation信息。相关类（框架或工具中的类）根据这些信息来决定如何使用该程序元素或改变它们的行为。Java语言解释器在工作时会忽略这些Annotation，因此在JVM中这些Annotation是“不起作用”的，只能通过配套的工具才能对这些Annotation类型的信息进行访问和处理。\n\n\n\n","slug":"spring/annotate/README","published":1,"date":"2018-11-20T14:55:26.983Z","updated":"2018-11-20T15:00:04.488Z","title":"","comments":1,"layout":"post","photos":[],"link":"","_id":"cjopxmsr3000ewfo82apbas9e","content":"<h1><span id=\"spring基于annotation的简单介绍\">Spring基于Annotation的简单介绍</span></h1><blockquote>\n<p>注解这个话题非常庞大，写这个文章压力也很大，生怕表达不清楚，职能稍做整理，仅供大家参考。</p>\n</blockquote>\n<h1><span id=\"前言\">前言</span></h1><p>Spring 自 2.0 版本开始，陆续引入了一些注解用于简化 Spring 的开发。@Repository 注解便属于最先引入的一批，它用于将数据访问层 (DAO 层 ) 的类标识为 Spring Bean。具体只需将该注解标注在 DAO 类上即可。同时，为了让 Spring 能够扫描类路径中的类并识别出 @Repository 注解，需要在 XML 配置文件中启用 Bean 的自动扫描功能，这可以通过以下代码实现自动扫描。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;context:component-scan base-package = &quot;&quot;/&gt;</span><br></pre></td></tr></table></figure>\n<h2><span id=\"注解的基本概念和原理\">注解的基本概念和原理</span></h2><p>注解（Annotation）提供了一种安全的类似注释的机制，为我们在代码中添加信息提供了一种形式化得方法，使我们可以在稍后某个时刻方便的使用这些数据（通过解析注解来使用这些数据），用来将任何的信息或者元数据与程序元素（类、方法、成员变量等）进行关联。其实就是更加直观更加明了的说明，这些说明信息与程序业务逻辑没有关系，并且是供指定的工具或框架使用的。Annotation像一种修饰符一样，应用于包、类型、构造方法、方法、成员变量、参数及本地变量的申明语句中。</p>\n<p>Annotation其实是一种接口。通过java的反射机制相关的API来访问Annotation信息。相关类（框架或工具中的类）根据这些信息来决定如何使用该程序元素或改变它们的行为。Java语言解释器在工作时会忽略这些Annotation，因此在JVM中这些Annotation是“不起作用”的，只能通过配套的工具才能对这些Annotation类型的信息进行访问和处理。</p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"Spring基于Annotation的简单介绍\"><a href=\"#Spring基于Annotation的简单介绍\" class=\"headerlink\" title=\"Spring基于Annotation的简单介绍\"></a>Spring基于Annotation的简单介绍</h1><blockquote>\n<p>注解这个话题非常庞大，写这个文章压力也很大，生怕表达不清楚，职能稍做整理，仅供大家参考。</p>\n</blockquote>\n<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p>Spring 自 2.0 版本开始，陆续引入了一些注解用于简化 Spring 的开发。@Repository 注解便属于最先引入的一批，它用于将数据访问层 (DAO 层 ) 的类标识为 Spring Bean。具体只需将该注解标注在 DAO 类上即可。同时，为了让 Spring 能够扫描类路径中的类并识别出 @Repository 注解，需要在 XML 配置文件中启用 Bean 的自动扫描功能，这可以通过以下代码实现自动扫描。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;context:component-scan base-package = &quot;&quot;/&gt;</span><br></pre></td></tr></table></figure>\n<h2 id=\"注解的基本概念和原理\"><a href=\"#注解的基本概念和原理\" class=\"headerlink\" title=\"注解的基本概念和原理\"></a>注解的基本概念和原理</h2><p>注解（Annotation）提供了一种安全的类似注释的机制，为我们在代码中添加信息提供了一种形式化得方法，使我们可以在稍后某个时刻方便的使用这些数据（通过解析注解来使用这些数据），用来将任何的信息或者元数据与程序元素（类、方法、成员变量等）进行关联。其实就是更加直观更加明了的说明，这些说明信息与程序业务逻辑没有关系，并且是供指定的工具或框架使用的。Annotation像一种修饰符一样，应用于包、类型、构造方法、方法、成员变量、参数及本地变量的申明语句中。</p>\n<p>Annotation其实是一种接口。通过java的反射机制相关的API来访问Annotation信息。相关类（框架或工具中的类）根据这些信息来决定如何使用该程序元素或改变它们的行为。Java语言解释器在工作时会忽略这些Annotation，因此在JVM中这些Annotation是“不起作用”的，只能通过配套的工具才能对这些Annotation类型的信息进行访问和处理。</p>\n"},{"_content":"# @Autowired注解与自动装配\n\n它可以对类成员变量、方法及构造函数进行标注，完成自动装配的工作。 通过 @Autowired的使用来消除 set ，get方法。","source":"_posts/spring/annotate/autowired.md","raw":"# @Autowired注解与自动装配\n\n它可以对类成员变量、方法及构造函数进行标注，完成自动装配的工作。 通过 @Autowired的使用来消除 set ，get方法。","slug":"spring/annotate/autowired","published":1,"date":"2018-11-20T14:55:26.983Z","updated":"2018-11-20T15:23:03.020Z","title":"","comments":1,"layout":"post","photos":[],"link":"","_id":"cjopxmsr3000fwfo8si7ae9qn","content":"<h1><span id=\"autowired注解与自动装配\">@Autowired注解与自动装配</span></h1><p>它可以对类成员变量、方法及构造函数进行标注，完成自动装配的工作。 通过 @Autowired的使用来消除 set ，get方法。</p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"Autowired注解与自动装配\"><a href=\"#Autowired注解与自动装配\" class=\"headerlink\" title=\"@Autowired注解与自动装配\"></a>@Autowired注解与自动装配</h1><p>它可以对类成员变量、方法及构造函数进行标注，完成自动装配的工作。 通过 @Autowired的使用来消除 set ，get方法。</p>\n"},{"_content":"# aop开发","source":"_posts/spring/mvc/aop.md","raw":"# aop开发","slug":"spring/mvc/aop","published":1,"date":"2018-11-20T14:55:26.990Z","updated":"2018-11-20T15:26:25.018Z","title":"","comments":1,"layout":"post","photos":[],"link":"","_id":"cjopxmsr4000gwfo8v5eglyt2","content":"<h1><span id=\"aop开发\">aop开发</span></h1>","site":{"data":{}},"excerpt":"","more":"<h1 id=\"aop开发\"><a href=\"#aop开发\" class=\"headerlink\" title=\"aop开发\"></a>aop开发</h1>"},{"_content":"# log4j2 与 spring mvc整合\n\n## maven依赖\n我用的log4j.version = 2.6.2\nspring.version = 4.3.1.RELEASE\n\n```\n <!-- https://mvnrepository.com/artifact/org.apache.logging.log4j/log4j-core -->\n    <dependency>\n      <groupId>org.apache.logging.log4j</groupId>\n      <artifactId>log4j-api</artifactId>\n      <version>${log4j.version}</version>\n    </dependency>\n    <dependency>\n      <groupId>org.apache.logging.log4j</groupId>\n      <artifactId>log4j-core</artifactId>\n      <version>${log4j.version}</version>\n    </dependency>\n    <dependency>\n      <groupId>org.apache.logging.log4j</groupId>\n      <artifactId>log4j-web</artifactId>\n      <version>${log4j.version}</version>\n    </dependency>\n```\n\n## 演示代码\n\n```java\nprivate Logger logger = LogManager.getLogger(this.getClass());\n\nServletRequestAttributes attributes = (ServletRequestAttributes) RequestContextHolder.getRequestAttributes();\n        HttpServletRequest request = attributes.getRequest();\n\n        logger.info(\"URL : \" + request.getRequestURL().toString());\n        logger.info(\"HTTP_METHOD : \" + request.getMethod());\n        logger.info(\"IP : \" + request.getRemoteAddr());\n        logger.info(\"CLASS_METHOD : \" + pjp.getSignature().getDeclaringTypeName() + \".\" + pjp.getSignature().getName());\n        logger.info(\"ARGS : \" + Arrays.toString(pjp.getArgs()));\n\n```\n\n## 默认配置\n\n在没有任何配置的情况下，log4j2会使用默认配置：\n\n```\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<Configuration status=\"WARN\">\n    <Appenders>\n        <Console name=\"Console\" target=\"SYSTEM_OUT\">\n            <PatternLayout pattern=\"%d{HH:mm:ss.SSS} [%t] %-5level %logger{36} - %msg%n\" />\n        </Console>\n    </Appenders>\n    <Loggers>\n        <Root level=\"error\">\n            <AppenderRef ref=\"Console\" />\n        </Root>\n    </Loggers>\n</Configuration>\n```\n\n该配置只有一个Appender：Console，目标是SYSTEM_OUT，即日志内容，都会打印在eclipse控制台上。Root Logger的级别是error，即：所有error及以上级别的日志才会记录。(注：日志级别顺序为 TRACE < DEBUG < INFO < WARN < ERROR < FATAL )，所以最终只有2日志会输出(error,fatal)\n\n```\n1 13:07:56.099 [main] ERROR  - error message\n2 13:07:56.100 [main] FATAL  - fatal message\n3 Hello World!\n```\n\n配置第1行中的status=\"WARN\"，可以去掉，它的含义为是否记录log4j2本身的event信息，默认是OFF，设置成“WARN”指：所有log4j2的event信息中，只有WARN及以上级别的信息才记录，大家可以把它改成TRACE试试(最低级别)，看下输出内容有何变化。\n\n另：配置文件通常命名为log4j2.xml，运行时只要在classpath下能找到即可。\n\n\n## 文件记录日志\n\n```\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<!-- log4j2使用说明（create By SeanXiao    ）：\n使用方式如下：\nprivate static final Logger logger = LogManager.getLogger(实际类名.class.getName());\n\n2、日志说明：\n（1）请根据实际情况配置各项参数\n（2）需要注意日志文件备份数和日志文件大小，注意预留目录空间\n（3）实际部署的时候backupFilePatch变量需要修改成linux目录\n -->\n<configuration status=\"error\" monitorInterval=\"1800\">\n    <Properties>\n        <Property name=\"fileName\">oauth.mailejifen.com.log</Property>\n        <Property name=\"backupFilePatch\">/usr/local/logs/java/</Property>\n    </Properties>\n    <!--先定义所有的appender-->\n    <appenders>\n        <!--这个输出控制台的配置-->\n        <Console name=\"Console\" target=\"SYSTEM_OUT\">\n            <!--控制台只输出level及以上级别的信息（onMatch），其他的直接拒绝（onMismatch）-->\n            <ThresholdFilter level=\"trace\" onMatch=\"ACCEPT\" onMismatch=\"DENY\" />\n            <!--这个都知道是输出日志的格式-->\n            <PatternLayout pattern=\"%d{HH:mm:ss.SSS} %-5level %class{36} %L %M - %msg%xEx%n\" />\n        </Console>\n\n        <!--这个会打印出所有的信息，每次大小超过size，则这size大小的日志会自动存入按年份-月份建立的文件夹下面并进行压缩，作为存档-->\n        <RollingFile name=\"RollingFile\" fileName=\"${backupFilePatch}${fileName}\"\n                     filePattern=\"${backupFilePatch}$${date:yyyy-MM}/app-%d{yyyyMMddHHmmssSSS}.log.gz\">\n            <PatternLayout\n                    pattern=\"[%d{yyyy.MM.dd HH:mm:ss}] %-5level %class{36} %L %M - %msg%xEx%n\" />\n\n            <!-- 日志文件大小 -->\n            <SizeBasedTriggeringPolicy size=\"20MB\" />\n            <!-- 最多保留文件数 -->\n            <DefaultRolloverStrategy max=\"20\"/>\n        </RollingFile>\n    </appenders>\n\n    <!--然后定义logger，只有定义了logger并引入的appender，appender才会生效-->\n    <loggers>\n        <!--建立一个默认的root的logger-->\n        <Logger name=\"com.mailejifen.oauth\" level=\"trace\"\n                additivity=\"true\">\n            <AppenderRef ref=\"RollingFile\" />\n        </Logger>\n        <Root level=\"error\">\n            <AppenderRef ref=\"Console\" />\n        </Root>\n    </loggers>\n</configuration>\n```\n\nconfiguration中的 monitorInterval=\"1800\" 指log4j2每隔1800秒（半小时），自动监控该配置文件是否有变化，如果变化，则自动根据文件内容重新配置（很不错的功能！）\n\nProperties定义了一些属性（可以根据需要自己随便添加），主要是为了后面引用起来方便\n\nRollingFile 即表示以文件方式记录，注意一下filePattern 的设置，它与20行的SizeBasedTriggeringPolicy （表示单个文件最大多少容量）结合在一起，非常有用，以这段配置为例，当单个文件达到10M后，会自动将以前的内容，先创建类似 2014-09（年-月）的目录，然后按 \"xxx-年-月-日-序号\"命名，打成压缩包（很体贴的设计，即省了空间，又不丢失以前的日志信息）\n\n定义了一个新logger，它的级别是trace ，使用文件方式来记录日志，additivity=\"true\" 这里注意一下，因为下面还有一个root logger，任何其它的logger最终都相当于继承自root logger，所以“com.cnblogs.yjmyzz.App2”这个logger中，如果记录了error及以上级别的日志，除了文件里会记录外，root logger也会生效，即：控制台也会输出一次。如果把additivity=\"true\" 中的true，改成false，root logger就不会再起作用，即只会记录在文件里，控制台无输出。\n\n附录：log4j2官方pdf文档\nhttp://logging.apache.org/log4j/2.x/log4j-users-guide.pdf\n\n\n","source":"_posts/spring/mvc/log4j2.md","raw":"# log4j2 与 spring mvc整合\n\n## maven依赖\n我用的log4j.version = 2.6.2\nspring.version = 4.3.1.RELEASE\n\n```\n <!-- https://mvnrepository.com/artifact/org.apache.logging.log4j/log4j-core -->\n    <dependency>\n      <groupId>org.apache.logging.log4j</groupId>\n      <artifactId>log4j-api</artifactId>\n      <version>${log4j.version}</version>\n    </dependency>\n    <dependency>\n      <groupId>org.apache.logging.log4j</groupId>\n      <artifactId>log4j-core</artifactId>\n      <version>${log4j.version}</version>\n    </dependency>\n    <dependency>\n      <groupId>org.apache.logging.log4j</groupId>\n      <artifactId>log4j-web</artifactId>\n      <version>${log4j.version}</version>\n    </dependency>\n```\n\n## 演示代码\n\n```java\nprivate Logger logger = LogManager.getLogger(this.getClass());\n\nServletRequestAttributes attributes = (ServletRequestAttributes) RequestContextHolder.getRequestAttributes();\n        HttpServletRequest request = attributes.getRequest();\n\n        logger.info(\"URL : \" + request.getRequestURL().toString());\n        logger.info(\"HTTP_METHOD : \" + request.getMethod());\n        logger.info(\"IP : \" + request.getRemoteAddr());\n        logger.info(\"CLASS_METHOD : \" + pjp.getSignature().getDeclaringTypeName() + \".\" + pjp.getSignature().getName());\n        logger.info(\"ARGS : \" + Arrays.toString(pjp.getArgs()));\n\n```\n\n## 默认配置\n\n在没有任何配置的情况下，log4j2会使用默认配置：\n\n```\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<Configuration status=\"WARN\">\n    <Appenders>\n        <Console name=\"Console\" target=\"SYSTEM_OUT\">\n            <PatternLayout pattern=\"%d{HH:mm:ss.SSS} [%t] %-5level %logger{36} - %msg%n\" />\n        </Console>\n    </Appenders>\n    <Loggers>\n        <Root level=\"error\">\n            <AppenderRef ref=\"Console\" />\n        </Root>\n    </Loggers>\n</Configuration>\n```\n\n该配置只有一个Appender：Console，目标是SYSTEM_OUT，即日志内容，都会打印在eclipse控制台上。Root Logger的级别是error，即：所有error及以上级别的日志才会记录。(注：日志级别顺序为 TRACE < DEBUG < INFO < WARN < ERROR < FATAL )，所以最终只有2日志会输出(error,fatal)\n\n```\n1 13:07:56.099 [main] ERROR  - error message\n2 13:07:56.100 [main] FATAL  - fatal message\n3 Hello World!\n```\n\n配置第1行中的status=\"WARN\"，可以去掉，它的含义为是否记录log4j2本身的event信息，默认是OFF，设置成“WARN”指：所有log4j2的event信息中，只有WARN及以上级别的信息才记录，大家可以把它改成TRACE试试(最低级别)，看下输出内容有何变化。\n\n另：配置文件通常命名为log4j2.xml，运行时只要在classpath下能找到即可。\n\n\n## 文件记录日志\n\n```\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<!-- log4j2使用说明（create By SeanXiao    ）：\n使用方式如下：\nprivate static final Logger logger = LogManager.getLogger(实际类名.class.getName());\n\n2、日志说明：\n（1）请根据实际情况配置各项参数\n（2）需要注意日志文件备份数和日志文件大小，注意预留目录空间\n（3）实际部署的时候backupFilePatch变量需要修改成linux目录\n -->\n<configuration status=\"error\" monitorInterval=\"1800\">\n    <Properties>\n        <Property name=\"fileName\">oauth.mailejifen.com.log</Property>\n        <Property name=\"backupFilePatch\">/usr/local/logs/java/</Property>\n    </Properties>\n    <!--先定义所有的appender-->\n    <appenders>\n        <!--这个输出控制台的配置-->\n        <Console name=\"Console\" target=\"SYSTEM_OUT\">\n            <!--控制台只输出level及以上级别的信息（onMatch），其他的直接拒绝（onMismatch）-->\n            <ThresholdFilter level=\"trace\" onMatch=\"ACCEPT\" onMismatch=\"DENY\" />\n            <!--这个都知道是输出日志的格式-->\n            <PatternLayout pattern=\"%d{HH:mm:ss.SSS} %-5level %class{36} %L %M - %msg%xEx%n\" />\n        </Console>\n\n        <!--这个会打印出所有的信息，每次大小超过size，则这size大小的日志会自动存入按年份-月份建立的文件夹下面并进行压缩，作为存档-->\n        <RollingFile name=\"RollingFile\" fileName=\"${backupFilePatch}${fileName}\"\n                     filePattern=\"${backupFilePatch}$${date:yyyy-MM}/app-%d{yyyyMMddHHmmssSSS}.log.gz\">\n            <PatternLayout\n                    pattern=\"[%d{yyyy.MM.dd HH:mm:ss}] %-5level %class{36} %L %M - %msg%xEx%n\" />\n\n            <!-- 日志文件大小 -->\n            <SizeBasedTriggeringPolicy size=\"20MB\" />\n            <!-- 最多保留文件数 -->\n            <DefaultRolloverStrategy max=\"20\"/>\n        </RollingFile>\n    </appenders>\n\n    <!--然后定义logger，只有定义了logger并引入的appender，appender才会生效-->\n    <loggers>\n        <!--建立一个默认的root的logger-->\n        <Logger name=\"com.mailejifen.oauth\" level=\"trace\"\n                additivity=\"true\">\n            <AppenderRef ref=\"RollingFile\" />\n        </Logger>\n        <Root level=\"error\">\n            <AppenderRef ref=\"Console\" />\n        </Root>\n    </loggers>\n</configuration>\n```\n\nconfiguration中的 monitorInterval=\"1800\" 指log4j2每隔1800秒（半小时），自动监控该配置文件是否有变化，如果变化，则自动根据文件内容重新配置（很不错的功能！）\n\nProperties定义了一些属性（可以根据需要自己随便添加），主要是为了后面引用起来方便\n\nRollingFile 即表示以文件方式记录，注意一下filePattern 的设置，它与20行的SizeBasedTriggeringPolicy （表示单个文件最大多少容量）结合在一起，非常有用，以这段配置为例，当单个文件达到10M后，会自动将以前的内容，先创建类似 2014-09（年-月）的目录，然后按 \"xxx-年-月-日-序号\"命名，打成压缩包（很体贴的设计，即省了空间，又不丢失以前的日志信息）\n\n定义了一个新logger，它的级别是trace ，使用文件方式来记录日志，additivity=\"true\" 这里注意一下，因为下面还有一个root logger，任何其它的logger最终都相当于继承自root logger，所以“com.cnblogs.yjmyzz.App2”这个logger中，如果记录了error及以上级别的日志，除了文件里会记录外，root logger也会生效，即：控制台也会输出一次。如果把additivity=\"true\" 中的true，改成false，root logger就不会再起作用，即只会记录在文件里，控制台无输出。\n\n附录：log4j2官方pdf文档\nhttp://logging.apache.org/log4j/2.x/log4j-users-guide.pdf\n\n\n","slug":"spring/mvc/log4j2","published":1,"date":"2018-11-20T14:55:26.990Z","updated":"2018-11-20T14:58:15.555Z","title":"","comments":1,"layout":"post","photos":[],"link":"","_id":"cjopxmsr4000hwfo8mgfj1zoo","content":"<h1><span id=\"log4j2-与-spring-mvc整合\">log4j2 与 spring mvc整合</span></h1><h2><span id=\"maven依赖\">maven依赖</span></h2><p>我用的log4j.version = 2.6.2<br>spring.version = 4.3.1.RELEASE</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!-- https://mvnrepository.com/artifact/org.apache.logging.log4j/log4j-core --&gt;</span><br><span class=\"line\">   &lt;dependency&gt;</span><br><span class=\"line\">     &lt;groupId&gt;org.apache.logging.log4j&lt;/groupId&gt;</span><br><span class=\"line\">     &lt;artifactId&gt;log4j-api&lt;/artifactId&gt;</span><br><span class=\"line\">     &lt;version&gt;$&#123;log4j.version&#125;&lt;/version&gt;</span><br><span class=\"line\">   &lt;/dependency&gt;</span><br><span class=\"line\">   &lt;dependency&gt;</span><br><span class=\"line\">     &lt;groupId&gt;org.apache.logging.log4j&lt;/groupId&gt;</span><br><span class=\"line\">     &lt;artifactId&gt;log4j-core&lt;/artifactId&gt;</span><br><span class=\"line\">     &lt;version&gt;$&#123;log4j.version&#125;&lt;/version&gt;</span><br><span class=\"line\">   &lt;/dependency&gt;</span><br><span class=\"line\">   &lt;dependency&gt;</span><br><span class=\"line\">     &lt;groupId&gt;org.apache.logging.log4j&lt;/groupId&gt;</span><br><span class=\"line\">     &lt;artifactId&gt;log4j-web&lt;/artifactId&gt;</span><br><span class=\"line\">     &lt;version&gt;$&#123;log4j.version&#125;&lt;/version&gt;</span><br><span class=\"line\">   &lt;/dependency&gt;</span><br></pre></td></tr></table></figure>\n<h2><span id=\"演示代码\">演示代码</span></h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span> Logger logger = LogManager.getLogger(<span class=\"keyword\">this</span>.getClass());</span><br><span class=\"line\"></span><br><span class=\"line\">ServletRequestAttributes attributes = (ServletRequestAttributes) RequestContextHolder.getRequestAttributes();</span><br><span class=\"line\">        HttpServletRequest request = attributes.getRequest();</span><br><span class=\"line\"></span><br><span class=\"line\">        logger.info(<span class=\"string\">\"URL : \"</span> + request.getRequestURL().toString());</span><br><span class=\"line\">        logger.info(<span class=\"string\">\"HTTP_METHOD : \"</span> + request.getMethod());</span><br><span class=\"line\">        logger.info(<span class=\"string\">\"IP : \"</span> + request.getRemoteAddr());</span><br><span class=\"line\">        logger.info(<span class=\"string\">\"CLASS_METHOD : \"</span> + pjp.getSignature().getDeclaringTypeName() + <span class=\"string\">\".\"</span> + pjp.getSignature().getName());</span><br><span class=\"line\">        logger.info(<span class=\"string\">\"ARGS : \"</span> + Arrays.toString(pjp.getArgs()));</span><br></pre></td></tr></table></figure>\n<h2><span id=\"默认配置\">默认配置</span></h2><p>在没有任何配置的情况下，log4j2会使用默认配置：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class=\"line\">&lt;Configuration status=&quot;WARN&quot;&gt;</span><br><span class=\"line\">    &lt;Appenders&gt;</span><br><span class=\"line\">        &lt;Console name=&quot;Console&quot; target=&quot;SYSTEM_OUT&quot;&gt;</span><br><span class=\"line\">            &lt;PatternLayout pattern=&quot;%d&#123;HH:mm:ss.SSS&#125; [%t] %-5level %logger&#123;36&#125; - %msg%n&quot; /&gt;</span><br><span class=\"line\">        &lt;/Console&gt;</span><br><span class=\"line\">    &lt;/Appenders&gt;</span><br><span class=\"line\">    &lt;Loggers&gt;</span><br><span class=\"line\">        &lt;Root level=&quot;error&quot;&gt;</span><br><span class=\"line\">            &lt;AppenderRef ref=&quot;Console&quot; /&gt;</span><br><span class=\"line\">        &lt;/Root&gt;</span><br><span class=\"line\">    &lt;/Loggers&gt;</span><br><span class=\"line\">&lt;/Configuration&gt;</span><br></pre></td></tr></table></figure>\n<p>该配置只有一个Appender：Console，目标是SYSTEM_OUT，即日志内容，都会打印在eclipse控制台上。Root Logger的级别是error，即：所有error及以上级别的日志才会记录。(注：日志级别顺序为 TRACE &lt; DEBUG &lt; INFO &lt; WARN &lt; ERROR &lt; FATAL )，所以最终只有2日志会输出(error,fatal)</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1 13:07:56.099 [main] ERROR  - error message</span><br><span class=\"line\">2 13:07:56.100 [main] FATAL  - fatal message</span><br><span class=\"line\">3 Hello World!</span><br></pre></td></tr></table></figure>\n<p>配置第1行中的status=”WARN”，可以去掉，它的含义为是否记录log4j2本身的event信息，默认是OFF，设置成“WARN”指：所有log4j2的event信息中，只有WARN及以上级别的信息才记录，大家可以把它改成TRACE试试(最低级别)，看下输出内容有何变化。</p>\n<p>另：配置文件通常命名为log4j2.xml，运行时只要在classpath下能找到即可。</p>\n<h2><span id=\"文件记录日志\">文件记录日志</span></h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class=\"line\">&lt;!-- log4j2使用说明（create By SeanXiao    ）：</span><br><span class=\"line\">使用方式如下：</span><br><span class=\"line\">private static final Logger logger = LogManager.getLogger(实际类名.class.getName());</span><br><span class=\"line\"></span><br><span class=\"line\">2、日志说明：</span><br><span class=\"line\">（1）请根据实际情况配置各项参数</span><br><span class=\"line\">（2）需要注意日志文件备份数和日志文件大小，注意预留目录空间</span><br><span class=\"line\">（3）实际部署的时候backupFilePatch变量需要修改成linux目录</span><br><span class=\"line\"> --&gt;</span><br><span class=\"line\">&lt;configuration status=&quot;error&quot; monitorInterval=&quot;1800&quot;&gt;</span><br><span class=\"line\">    &lt;Properties&gt;</span><br><span class=\"line\">        &lt;Property name=&quot;fileName&quot;&gt;oauth.mailejifen.com.log&lt;/Property&gt;</span><br><span class=\"line\">        &lt;Property name=&quot;backupFilePatch&quot;&gt;/usr/local/logs/java/&lt;/Property&gt;</span><br><span class=\"line\">    &lt;/Properties&gt;</span><br><span class=\"line\">    &lt;!--先定义所有的appender--&gt;</span><br><span class=\"line\">    &lt;appenders&gt;</span><br><span class=\"line\">        &lt;!--这个输出控制台的配置--&gt;</span><br><span class=\"line\">        &lt;Console name=&quot;Console&quot; target=&quot;SYSTEM_OUT&quot;&gt;</span><br><span class=\"line\">            &lt;!--控制台只输出level及以上级别的信息（onMatch），其他的直接拒绝（onMismatch）--&gt;</span><br><span class=\"line\">            &lt;ThresholdFilter level=&quot;trace&quot; onMatch=&quot;ACCEPT&quot; onMismatch=&quot;DENY&quot; /&gt;</span><br><span class=\"line\">            &lt;!--这个都知道是输出日志的格式--&gt;</span><br><span class=\"line\">            &lt;PatternLayout pattern=&quot;%d&#123;HH:mm:ss.SSS&#125; %-5level %class&#123;36&#125; %L %M - %msg%xEx%n&quot; /&gt;</span><br><span class=\"line\">        &lt;/Console&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">        &lt;!--这个会打印出所有的信息，每次大小超过size，则这size大小的日志会自动存入按年份-月份建立的文件夹下面并进行压缩，作为存档--&gt;</span><br><span class=\"line\">        &lt;RollingFile name=&quot;RollingFile&quot; fileName=&quot;$&#123;backupFilePatch&#125;$&#123;fileName&#125;&quot;</span><br><span class=\"line\">                     filePattern=&quot;$&#123;backupFilePatch&#125;$$&#123;date:yyyy-MM&#125;/app-%d&#123;yyyyMMddHHmmssSSS&#125;.log.gz&quot;&gt;</span><br><span class=\"line\">            &lt;PatternLayout</span><br><span class=\"line\">                    pattern=&quot;[%d&#123;yyyy.MM.dd HH:mm:ss&#125;] %-5level %class&#123;36&#125; %L %M - %msg%xEx%n&quot; /&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">            &lt;!-- 日志文件大小 --&gt;</span><br><span class=\"line\">            &lt;SizeBasedTriggeringPolicy size=&quot;20MB&quot; /&gt;</span><br><span class=\"line\">            &lt;!-- 最多保留文件数 --&gt;</span><br><span class=\"line\">            &lt;DefaultRolloverStrategy max=&quot;20&quot;/&gt;</span><br><span class=\"line\">        &lt;/RollingFile&gt;</span><br><span class=\"line\">    &lt;/appenders&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;!--然后定义logger，只有定义了logger并引入的appender，appender才会生效--&gt;</span><br><span class=\"line\">    &lt;loggers&gt;</span><br><span class=\"line\">        &lt;!--建立一个默认的root的logger--&gt;</span><br><span class=\"line\">        &lt;Logger name=&quot;com.mailejifen.oauth&quot; level=&quot;trace&quot;</span><br><span class=\"line\">                additivity=&quot;true&quot;&gt;</span><br><span class=\"line\">            &lt;AppenderRef ref=&quot;RollingFile&quot; /&gt;</span><br><span class=\"line\">        &lt;/Logger&gt;</span><br><span class=\"line\">        &lt;Root level=&quot;error&quot;&gt;</span><br><span class=\"line\">            &lt;AppenderRef ref=&quot;Console&quot; /&gt;</span><br><span class=\"line\">        &lt;/Root&gt;</span><br><span class=\"line\">    &lt;/loggers&gt;</span><br><span class=\"line\">&lt;/configuration&gt;</span><br></pre></td></tr></table></figure>\n<p>configuration中的 monitorInterval=”1800” 指log4j2每隔1800秒（半小时），自动监控该配置文件是否有变化，如果变化，则自动根据文件内容重新配置（很不错的功能！）</p>\n<p>Properties定义了一些属性（可以根据需要自己随便添加），主要是为了后面引用起来方便</p>\n<p>RollingFile 即表示以文件方式记录，注意一下filePattern 的设置，它与20行的SizeBasedTriggeringPolicy （表示单个文件最大多少容量）结合在一起，非常有用，以这段配置为例，当单个文件达到10M后，会自动将以前的内容，先创建类似 2014-09（年-月）的目录，然后按 “xxx-年-月-日-序号”命名，打成压缩包（很体贴的设计，即省了空间，又不丢失以前的日志信息）</p>\n<p>定义了一个新logger，它的级别是trace ，使用文件方式来记录日志，additivity=”true” 这里注意一下，因为下面还有一个root logger，任何其它的logger最终都相当于继承自root logger，所以“com.cnblogs.yjmyzz.App2”这个logger中，如果记录了error及以上级别的日志，除了文件里会记录外，root logger也会生效，即：控制台也会输出一次。如果把additivity=”true” 中的true，改成false，root logger就不会再起作用，即只会记录在文件里，控制台无输出。</p>\n<p>附录：log4j2官方pdf文档<br><a href=\"http://logging.apache.org/log4j/2.x/log4j-users-guide.pdf\" target=\"_blank\" rel=\"noopener\">http://logging.apache.org/log4j/2.x/log4j-users-guide.pdf</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"log4j2-与-spring-mvc整合\"><a href=\"#log4j2-与-spring-mvc整合\" class=\"headerlink\" title=\"log4j2 与 spring mvc整合\"></a>log4j2 与 spring mvc整合</h1><h2 id=\"maven依赖\"><a href=\"#maven依赖\" class=\"headerlink\" title=\"maven依赖\"></a>maven依赖</h2><p>我用的log4j.version = 2.6.2<br>spring.version = 4.3.1.RELEASE</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!-- https://mvnrepository.com/artifact/org.apache.logging.log4j/log4j-core --&gt;</span><br><span class=\"line\">   &lt;dependency&gt;</span><br><span class=\"line\">     &lt;groupId&gt;org.apache.logging.log4j&lt;/groupId&gt;</span><br><span class=\"line\">     &lt;artifactId&gt;log4j-api&lt;/artifactId&gt;</span><br><span class=\"line\">     &lt;version&gt;$&#123;log4j.version&#125;&lt;/version&gt;</span><br><span class=\"line\">   &lt;/dependency&gt;</span><br><span class=\"line\">   &lt;dependency&gt;</span><br><span class=\"line\">     &lt;groupId&gt;org.apache.logging.log4j&lt;/groupId&gt;</span><br><span class=\"line\">     &lt;artifactId&gt;log4j-core&lt;/artifactId&gt;</span><br><span class=\"line\">     &lt;version&gt;$&#123;log4j.version&#125;&lt;/version&gt;</span><br><span class=\"line\">   &lt;/dependency&gt;</span><br><span class=\"line\">   &lt;dependency&gt;</span><br><span class=\"line\">     &lt;groupId&gt;org.apache.logging.log4j&lt;/groupId&gt;</span><br><span class=\"line\">     &lt;artifactId&gt;log4j-web&lt;/artifactId&gt;</span><br><span class=\"line\">     &lt;version&gt;$&#123;log4j.version&#125;&lt;/version&gt;</span><br><span class=\"line\">   &lt;/dependency&gt;</span><br></pre></td></tr></table></figure>\n<h2 id=\"演示代码\"><a href=\"#演示代码\" class=\"headerlink\" title=\"演示代码\"></a>演示代码</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span> Logger logger = LogManager.getLogger(<span class=\"keyword\">this</span>.getClass());</span><br><span class=\"line\"></span><br><span class=\"line\">ServletRequestAttributes attributes = (ServletRequestAttributes) RequestContextHolder.getRequestAttributes();</span><br><span class=\"line\">        HttpServletRequest request = attributes.getRequest();</span><br><span class=\"line\"></span><br><span class=\"line\">        logger.info(<span class=\"string\">\"URL : \"</span> + request.getRequestURL().toString());</span><br><span class=\"line\">        logger.info(<span class=\"string\">\"HTTP_METHOD : \"</span> + request.getMethod());</span><br><span class=\"line\">        logger.info(<span class=\"string\">\"IP : \"</span> + request.getRemoteAddr());</span><br><span class=\"line\">        logger.info(<span class=\"string\">\"CLASS_METHOD : \"</span> + pjp.getSignature().getDeclaringTypeName() + <span class=\"string\">\".\"</span> + pjp.getSignature().getName());</span><br><span class=\"line\">        logger.info(<span class=\"string\">\"ARGS : \"</span> + Arrays.toString(pjp.getArgs()));</span><br></pre></td></tr></table></figure>\n<h2 id=\"默认配置\"><a href=\"#默认配置\" class=\"headerlink\" title=\"默认配置\"></a>默认配置</h2><p>在没有任何配置的情况下，log4j2会使用默认配置：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class=\"line\">&lt;Configuration status=&quot;WARN&quot;&gt;</span><br><span class=\"line\">    &lt;Appenders&gt;</span><br><span class=\"line\">        &lt;Console name=&quot;Console&quot; target=&quot;SYSTEM_OUT&quot;&gt;</span><br><span class=\"line\">            &lt;PatternLayout pattern=&quot;%d&#123;HH:mm:ss.SSS&#125; [%t] %-5level %logger&#123;36&#125; - %msg%n&quot; /&gt;</span><br><span class=\"line\">        &lt;/Console&gt;</span><br><span class=\"line\">    &lt;/Appenders&gt;</span><br><span class=\"line\">    &lt;Loggers&gt;</span><br><span class=\"line\">        &lt;Root level=&quot;error&quot;&gt;</span><br><span class=\"line\">            &lt;AppenderRef ref=&quot;Console&quot; /&gt;</span><br><span class=\"line\">        &lt;/Root&gt;</span><br><span class=\"line\">    &lt;/Loggers&gt;</span><br><span class=\"line\">&lt;/Configuration&gt;</span><br></pre></td></tr></table></figure>\n<p>该配置只有一个Appender：Console，目标是SYSTEM_OUT，即日志内容，都会打印在eclipse控制台上。Root Logger的级别是error，即：所有error及以上级别的日志才会记录。(注：日志级别顺序为 TRACE &lt; DEBUG &lt; INFO &lt; WARN &lt; ERROR &lt; FATAL )，所以最终只有2日志会输出(error,fatal)</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1 13:07:56.099 [main] ERROR  - error message</span><br><span class=\"line\">2 13:07:56.100 [main] FATAL  - fatal message</span><br><span class=\"line\">3 Hello World!</span><br></pre></td></tr></table></figure>\n<p>配置第1行中的status=”WARN”，可以去掉，它的含义为是否记录log4j2本身的event信息，默认是OFF，设置成“WARN”指：所有log4j2的event信息中，只有WARN及以上级别的信息才记录，大家可以把它改成TRACE试试(最低级别)，看下输出内容有何变化。</p>\n<p>另：配置文件通常命名为log4j2.xml，运行时只要在classpath下能找到即可。</p>\n<h2 id=\"文件记录日志\"><a href=\"#文件记录日志\" class=\"headerlink\" title=\"文件记录日志\"></a>文件记录日志</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class=\"line\">&lt;!-- log4j2使用说明（create By SeanXiao    ）：</span><br><span class=\"line\">使用方式如下：</span><br><span class=\"line\">private static final Logger logger = LogManager.getLogger(实际类名.class.getName());</span><br><span class=\"line\"></span><br><span class=\"line\">2、日志说明：</span><br><span class=\"line\">（1）请根据实际情况配置各项参数</span><br><span class=\"line\">（2）需要注意日志文件备份数和日志文件大小，注意预留目录空间</span><br><span class=\"line\">（3）实际部署的时候backupFilePatch变量需要修改成linux目录</span><br><span class=\"line\"> --&gt;</span><br><span class=\"line\">&lt;configuration status=&quot;error&quot; monitorInterval=&quot;1800&quot;&gt;</span><br><span class=\"line\">    &lt;Properties&gt;</span><br><span class=\"line\">        &lt;Property name=&quot;fileName&quot;&gt;oauth.mailejifen.com.log&lt;/Property&gt;</span><br><span class=\"line\">        &lt;Property name=&quot;backupFilePatch&quot;&gt;/usr/local/logs/java/&lt;/Property&gt;</span><br><span class=\"line\">    &lt;/Properties&gt;</span><br><span class=\"line\">    &lt;!--先定义所有的appender--&gt;</span><br><span class=\"line\">    &lt;appenders&gt;</span><br><span class=\"line\">        &lt;!--这个输出控制台的配置--&gt;</span><br><span class=\"line\">        &lt;Console name=&quot;Console&quot; target=&quot;SYSTEM_OUT&quot;&gt;</span><br><span class=\"line\">            &lt;!--控制台只输出level及以上级别的信息（onMatch），其他的直接拒绝（onMismatch）--&gt;</span><br><span class=\"line\">            &lt;ThresholdFilter level=&quot;trace&quot; onMatch=&quot;ACCEPT&quot; onMismatch=&quot;DENY&quot; /&gt;</span><br><span class=\"line\">            &lt;!--这个都知道是输出日志的格式--&gt;</span><br><span class=\"line\">            &lt;PatternLayout pattern=&quot;%d&#123;HH:mm:ss.SSS&#125; %-5level %class&#123;36&#125; %L %M - %msg%xEx%n&quot; /&gt;</span><br><span class=\"line\">        &lt;/Console&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">        &lt;!--这个会打印出所有的信息，每次大小超过size，则这size大小的日志会自动存入按年份-月份建立的文件夹下面并进行压缩，作为存档--&gt;</span><br><span class=\"line\">        &lt;RollingFile name=&quot;RollingFile&quot; fileName=&quot;$&#123;backupFilePatch&#125;$&#123;fileName&#125;&quot;</span><br><span class=\"line\">                     filePattern=&quot;$&#123;backupFilePatch&#125;$$&#123;date:yyyy-MM&#125;/app-%d&#123;yyyyMMddHHmmssSSS&#125;.log.gz&quot;&gt;</span><br><span class=\"line\">            &lt;PatternLayout</span><br><span class=\"line\">                    pattern=&quot;[%d&#123;yyyy.MM.dd HH:mm:ss&#125;] %-5level %class&#123;36&#125; %L %M - %msg%xEx%n&quot; /&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">            &lt;!-- 日志文件大小 --&gt;</span><br><span class=\"line\">            &lt;SizeBasedTriggeringPolicy size=&quot;20MB&quot; /&gt;</span><br><span class=\"line\">            &lt;!-- 最多保留文件数 --&gt;</span><br><span class=\"line\">            &lt;DefaultRolloverStrategy max=&quot;20&quot;/&gt;</span><br><span class=\"line\">        &lt;/RollingFile&gt;</span><br><span class=\"line\">    &lt;/appenders&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;!--然后定义logger，只有定义了logger并引入的appender，appender才会生效--&gt;</span><br><span class=\"line\">    &lt;loggers&gt;</span><br><span class=\"line\">        &lt;!--建立一个默认的root的logger--&gt;</span><br><span class=\"line\">        &lt;Logger name=&quot;com.mailejifen.oauth&quot; level=&quot;trace&quot;</span><br><span class=\"line\">                additivity=&quot;true&quot;&gt;</span><br><span class=\"line\">            &lt;AppenderRef ref=&quot;RollingFile&quot; /&gt;</span><br><span class=\"line\">        &lt;/Logger&gt;</span><br><span class=\"line\">        &lt;Root level=&quot;error&quot;&gt;</span><br><span class=\"line\">            &lt;AppenderRef ref=&quot;Console&quot; /&gt;</span><br><span class=\"line\">        &lt;/Root&gt;</span><br><span class=\"line\">    &lt;/loggers&gt;</span><br><span class=\"line\">&lt;/configuration&gt;</span><br></pre></td></tr></table></figure>\n<p>configuration中的 monitorInterval=”1800” 指log4j2每隔1800秒（半小时），自动监控该配置文件是否有变化，如果变化，则自动根据文件内容重新配置（很不错的功能！）</p>\n<p>Properties定义了一些属性（可以根据需要自己随便添加），主要是为了后面引用起来方便</p>\n<p>RollingFile 即表示以文件方式记录，注意一下filePattern 的设置，它与20行的SizeBasedTriggeringPolicy （表示单个文件最大多少容量）结合在一起，非常有用，以这段配置为例，当单个文件达到10M后，会自动将以前的内容，先创建类似 2014-09（年-月）的目录，然后按 “xxx-年-月-日-序号”命名，打成压缩包（很体贴的设计，即省了空间，又不丢失以前的日志信息）</p>\n<p>定义了一个新logger，它的级别是trace ，使用文件方式来记录日志，additivity=”true” 这里注意一下，因为下面还有一个root logger，任何其它的logger最终都相当于继承自root logger，所以“com.cnblogs.yjmyzz.App2”这个logger中，如果记录了error及以上级别的日志，除了文件里会记录外，root logger也会生效，即：控制台也会输出一次。如果把additivity=”true” 中的true，改成false，root logger就不会再起作用，即只会记录在文件里，控制台无输出。</p>\n<p>附录：log4j2官方pdf文档<br><a href=\"http://logging.apache.org/log4j/2.x/log4j-users-guide.pdf\" target=\"_blank\" rel=\"noopener\">http://logging.apache.org/log4j/2.x/log4j-users-guide.pdf</a></p>\n"},{"_content":"# resultful\n\n## pom.xml\n\n```xml\n<!-- https://mvnrepository.com/artifact/com.fasterxml.jackson.core/jackson-core -->\n    <dependency>\n      <groupId>com.fasterxml.jackson.core</groupId>\n      <artifactId>jackson-core</artifactId>\n      <version>2.8.1</version>\n    </dependency>\n\n    <!-- https://mvnrepository.com/artifact/com.fasterxml.jackson.core/jackson-databind -->\n    <dependency>\n      <groupId>com.fasterxml.jackson.core</groupId>\n      <artifactId>jackson-databind</artifactId>\n      <version>2.8.1</version>\n    </dependency>\n\n    <!-- https://mvnrepository.com/artifact/org.codehaus.jackson/jackson-mapper-asl -->\n    <dependency>\n      <groupId>org.codehaus.jackson</groupId>\n      <artifactId>jackson-mapper-asl</artifactId>\n      <version>1.9.13</version>\n    </dependency>\n```\n\n## web.xml\n\n```xml\n<servlet>\n    <servlet-name>auth</servlet-name>\n    <servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>\n    <init-param>\n      <param-name>contextConfigLocation</param-name>\n      <param-value>classpath:springMVC-servlet.xml</param-value>\n    </init-param>\n    <load-on-startup>1</load-on-startup>\n  </servlet>\n```\n\nspringMVC-servlet.xml\n\n## ```xml\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<beans default-lazy-init=\"true\"\n       xmlns=\"http://www.springframework.org/schema/beans\" xmlns:p=\"http://www.springframework.org/schema/p\"\n       xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xmlns:context=\"http://www.springframework.org/schema/context\"\n       xmlns:mvc=\"http://www.springframework.org/schema/mvc\"\n       xsi:schemaLocation=\"\n       http://www.springframework.org/schema/beans\n       http://www.springframework.org/schema/beans/spring-beans-3.1.xsd\n       http://www.springframework.org/schema/mvc\n       http://www.springframework.org/schema/mvc/spring-mvc-3.1.xsd\n       http://www.springframework.org/schema/context\n       http://www.springframework.org/schema/context/spring-context-3.1.xsd\">\n\n    <!-- 注解驱动 -->\n    <mvc:annotation-driven />\n\n    <!-- 扫描包 -->\n    <context:component-scan base-package=\"com.mailejifen.oauth.controllers\" />\n\n    <bean class=\"org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerMapping\" />\n    <bean class=\"org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter\">\n        <property name=\"messageConverters\">\n            <list>\n                <bean class=\"org.springframework.http.converter.StringHttpMessageConverter\">\n                    <property name=\"supportedMediaTypes\">\n                        <list>\n                            <value>text/html; charset=UTF-8</value>\n                            <value>application/json;charset=UTF-8</value>\n                        </list>\n                    </property>\n                </bean>\n                <bean class=\"org.springframework.http.converter.json.MappingJackson2HttpMessageConverter\">\n                    <property name=\"supportedMediaTypes\">\n                        <list>\n                            <value>text/html; charset=UTF-8</value>\n                            <value>application/json;charset=UTF-8</value>\n                        </list>\n                    </property>\n                </bean>\n            </list>\n        </property>\n    </bean>\n\n</beans>\n```\n\n","source":"_posts/spring/mvc/resultful.md","raw":"# resultful\n\n## pom.xml\n\n```xml\n<!-- https://mvnrepository.com/artifact/com.fasterxml.jackson.core/jackson-core -->\n    <dependency>\n      <groupId>com.fasterxml.jackson.core</groupId>\n      <artifactId>jackson-core</artifactId>\n      <version>2.8.1</version>\n    </dependency>\n\n    <!-- https://mvnrepository.com/artifact/com.fasterxml.jackson.core/jackson-databind -->\n    <dependency>\n      <groupId>com.fasterxml.jackson.core</groupId>\n      <artifactId>jackson-databind</artifactId>\n      <version>2.8.1</version>\n    </dependency>\n\n    <!-- https://mvnrepository.com/artifact/org.codehaus.jackson/jackson-mapper-asl -->\n    <dependency>\n      <groupId>org.codehaus.jackson</groupId>\n      <artifactId>jackson-mapper-asl</artifactId>\n      <version>1.9.13</version>\n    </dependency>\n```\n\n## web.xml\n\n```xml\n<servlet>\n    <servlet-name>auth</servlet-name>\n    <servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>\n    <init-param>\n      <param-name>contextConfigLocation</param-name>\n      <param-value>classpath:springMVC-servlet.xml</param-value>\n    </init-param>\n    <load-on-startup>1</load-on-startup>\n  </servlet>\n```\n\nspringMVC-servlet.xml\n\n## ```xml\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<beans default-lazy-init=\"true\"\n       xmlns=\"http://www.springframework.org/schema/beans\" xmlns:p=\"http://www.springframework.org/schema/p\"\n       xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xmlns:context=\"http://www.springframework.org/schema/context\"\n       xmlns:mvc=\"http://www.springframework.org/schema/mvc\"\n       xsi:schemaLocation=\"\n       http://www.springframework.org/schema/beans\n       http://www.springframework.org/schema/beans/spring-beans-3.1.xsd\n       http://www.springframework.org/schema/mvc\n       http://www.springframework.org/schema/mvc/spring-mvc-3.1.xsd\n       http://www.springframework.org/schema/context\n       http://www.springframework.org/schema/context/spring-context-3.1.xsd\">\n\n    <!-- 注解驱动 -->\n    <mvc:annotation-driven />\n\n    <!-- 扫描包 -->\n    <context:component-scan base-package=\"com.mailejifen.oauth.controllers\" />\n\n    <bean class=\"org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerMapping\" />\n    <bean class=\"org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter\">\n        <property name=\"messageConverters\">\n            <list>\n                <bean class=\"org.springframework.http.converter.StringHttpMessageConverter\">\n                    <property name=\"supportedMediaTypes\">\n                        <list>\n                            <value>text/html; charset=UTF-8</value>\n                            <value>application/json;charset=UTF-8</value>\n                        </list>\n                    </property>\n                </bean>\n                <bean class=\"org.springframework.http.converter.json.MappingJackson2HttpMessageConverter\">\n                    <property name=\"supportedMediaTypes\">\n                        <list>\n                            <value>text/html; charset=UTF-8</value>\n                            <value>application/json;charset=UTF-8</value>\n                        </list>\n                    </property>\n                </bean>\n            </list>\n        </property>\n    </bean>\n\n</beans>\n```\n\n","slug":"spring/mvc/resultful","published":1,"date":"2018-11-20T14:55:26.990Z","updated":"2018-11-20T14:58:54.063Z","title":"","comments":1,"layout":"post","photos":[],"link":"","_id":"cjopxmsr5000iwfo8q09pquu4","content":"<h1><span id=\"resultful\">resultful</span></h1><h2><span id=\"pomxml\">pom.xml</span></h2><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- https://mvnrepository.com/artifact/com.fasterxml.jackson.core/jackson-core --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>com.fasterxml.jackson.core<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>jackson-core<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>2.8.1<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- https://mvnrepository.com/artifact/com.fasterxml.jackson.core/jackson-databind --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>com.fasterxml.jackson.core<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>jackson-databind<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>2.8.1<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- https://mvnrepository.com/artifact/org.codehaus.jackson/jackson-mapper-asl --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.codehaus.jackson<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>jackson-mapper-asl<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>1.9.13<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h2><span id=\"webxml\">web.xml</span></h2><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">servlet</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">servlet-name</span>&gt;</span>auth<span class=\"tag\">&lt;/<span class=\"name\">servlet-name</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">servlet-class</span>&gt;</span>org.springframework.web.servlet.DispatcherServlet<span class=\"tag\">&lt;/<span class=\"name\">servlet-class</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">init-param</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">param-name</span>&gt;</span>contextConfigLocation<span class=\"tag\">&lt;/<span class=\"name\">param-name</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">param-value</span>&gt;</span>classpath:springMVC-servlet.xml<span class=\"tag\">&lt;/<span class=\"name\">param-value</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">init-param</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">load-on-startup</span>&gt;</span>1<span class=\"tag\">&lt;/<span class=\"name\">load-on-startup</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">servlet</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>springMVC-servlet.xml</p>\n<h2><span id=\"1234567891011121314151617181920212223242526272829303132333435363738394041424344ltxml-version10-encodingutf-8gtltbeans-default-lazy-inittrue-xmlnshttpwwwspringframeworkorgschemabeans-xmlnsphttpwwwspringframeworkorgschemap-xmlnsxsihttpwwww3org2001xmlschema-instance-xmlnscontexthttpwwwspringframeworkorgschemacontext-xmlnsmvchttpwwwspringframeworkorgschemamvc-xsischemalocation-httpwwwspringframeworkorgschemabeans-httpwwwspringframeworkorgschemabeansspring-beans-31xsd-httpwwwspringframeworkorgschemamvc-httpwwwspringframeworkorgschemamvcspring-mvc-31xsd-httpwwwspringframeworkorgschemacontext-httpwwwspringframeworkorgschemacontextspring-context-31xsdgt-lt-注解驱动-gt-ltmvcannotation-driven-gt-lt-扫描包-gt-ltcontextcomponent-scan-base-packagecommailejifenoauthcontrollers-gt-ltbean-classorgspringframeworkwebservletmvcmethodannotationrequestmappinghandlermapping-gt-ltbean-classorgspringframeworkwebservletmvcmethodannotationrequestmappinghandleradaptergt-ltproperty-namemessageconvertersgt-ltlistgt-ltbean-classorgspringframeworkhttpconverterstringhttpmessageconvertergt-ltproperty-namesupportedmediatypesgt-ltlistgt-ltvaluegttexthtml-charsetutf-8ltvaluegt-ltvaluegtapplicationjsoncharsetutf-8ltvaluegt-ltlistgt-ltpropertygt-ltbeangt-ltbean-classorgspringframeworkhttpconverterjsonmappingjackson2httpmessageconvertergt-ltproperty-namesupportedmediatypesgt-ltlistgt-ltvaluegttexthtml-charsetutf-8ltvaluegt-ltvaluegtapplicationjsoncharsetutf-8ltvaluegt-ltlistgt-ltpropertygt-ltbeangt-ltlistgt-ltpropertygt-ltbeangtltbeansgt\"><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">beans</span> <span class=\"attr\">default-lazy-init</span>=<span class=\"string\">\"true\"</span></span></span><br><span class=\"line\"><span class=\"tag\">       <span class=\"attr\">xmlns</span>=<span class=\"string\">\"http://www.springframework.org/schema/beans\"</span> <span class=\"attr\">xmlns:p</span>=<span class=\"string\">\"http://www.springframework.org/schema/p\"</span></span></span><br><span class=\"line\"><span class=\"tag\">       <span class=\"attr\">xmlns:xsi</span>=<span class=\"string\">\"http://www.w3.org/2001/XMLSchema-instance\"</span> <span class=\"attr\">xmlns:context</span>=<span class=\"string\">\"http://www.springframework.org/schema/context\"</span></span></span><br><span class=\"line\"><span class=\"tag\">       <span class=\"attr\">xmlns:mvc</span>=<span class=\"string\">\"http://www.springframework.org/schema/mvc\"</span></span></span><br><span class=\"line\"><span class=\"tag\">       <span class=\"attr\">xsi:schemaLocation</span>=<span class=\"string\">\"</span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"string\">       http://www.springframework.org/schema/beans</span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"string\">       http://www.springframework.org/schema/beans/spring-beans-3.1.xsd</span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"string\">       http://www.springframework.org/schema/mvc</span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"string\">       http://www.springframework.org/schema/mvc/spring-mvc-3.1.xsd</span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"string\">       http://www.springframework.org/schema/context</span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"string\">       http://www.springframework.org/schema/context/spring-context-3.1.xsd\"</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- 注解驱动 --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">mvc:annotation-driven</span> /&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- 扫描包 --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">context:component-scan</span> <span class=\"attr\">base-package</span>=<span class=\"string\">\"com.mailejifen.oauth.controllers\"</span> /&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">class</span>=<span class=\"string\">\"org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerMapping\"</span> /&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">class</span>=<span class=\"string\">\"org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter\"</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"messageConverters\"</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">list</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">class</span>=<span class=\"string\">\"org.springframework.http.converter.StringHttpMessageConverter\"</span>&gt;</span></span><br><span class=\"line\">                    <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"supportedMediaTypes\"</span>&gt;</span></span><br><span class=\"line\">                        <span class=\"tag\">&lt;<span class=\"name\">list</span>&gt;</span></span><br><span class=\"line\">                            <span class=\"tag\">&lt;<span class=\"name\">value</span>&gt;</span>text/html; charset=UTF-8<span class=\"tag\">&lt;/<span class=\"name\">value</span>&gt;</span></span><br><span class=\"line\">                            <span class=\"tag\">&lt;<span class=\"name\">value</span>&gt;</span>application/json;charset=UTF-8<span class=\"tag\">&lt;/<span class=\"name\">value</span>&gt;</span></span><br><span class=\"line\">                        <span class=\"tag\">&lt;/<span class=\"name\">list</span>&gt;</span></span><br><span class=\"line\">                    <span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;/<span class=\"name\">bean</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">class</span>=<span class=\"string\">\"org.springframework.http.converter.json.MappingJackson2HttpMessageConverter\"</span>&gt;</span></span><br><span class=\"line\">                    <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"supportedMediaTypes\"</span>&gt;</span></span><br><span class=\"line\">                        <span class=\"tag\">&lt;<span class=\"name\">list</span>&gt;</span></span><br><span class=\"line\">                            <span class=\"tag\">&lt;<span class=\"name\">value</span>&gt;</span>text/html; charset=UTF-8<span class=\"tag\">&lt;/<span class=\"name\">value</span>&gt;</span></span><br><span class=\"line\">                            <span class=\"tag\">&lt;<span class=\"name\">value</span>&gt;</span>application/json;charset=UTF-8<span class=\"tag\">&lt;/<span class=\"name\">value</span>&gt;</span></span><br><span class=\"line\">                        <span class=\"tag\">&lt;/<span class=\"name\">list</span>&gt;</span></span><br><span class=\"line\">                    <span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;/<span class=\"name\">bean</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">list</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">bean</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">beans</span>&gt;</span></span><br></pre></td></tr></table></figure></span></h2>","site":{"data":{}},"excerpt":"","more":"<h1 id=\"resultful\"><a href=\"#resultful\" class=\"headerlink\" title=\"resultful\"></a>resultful</h1><h2 id=\"pom-xml\"><a href=\"#pom-xml\" class=\"headerlink\" title=\"pom.xml\"></a>pom.xml</h2><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- https://mvnrepository.com/artifact/com.fasterxml.jackson.core/jackson-core --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>com.fasterxml.jackson.core<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>jackson-core<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>2.8.1<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- https://mvnrepository.com/artifact/com.fasterxml.jackson.core/jackson-databind --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>com.fasterxml.jackson.core<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>jackson-databind<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>2.8.1<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- https://mvnrepository.com/artifact/org.codehaus.jackson/jackson-mapper-asl --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.codehaus.jackson<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>jackson-mapper-asl<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>1.9.13<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"web-xml\"><a href=\"#web-xml\" class=\"headerlink\" title=\"web.xml\"></a>web.xml</h2><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">servlet</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">servlet-name</span>&gt;</span>auth<span class=\"tag\">&lt;/<span class=\"name\">servlet-name</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">servlet-class</span>&gt;</span>org.springframework.web.servlet.DispatcherServlet<span class=\"tag\">&lt;/<span class=\"name\">servlet-class</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">init-param</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">param-name</span>&gt;</span>contextConfigLocation<span class=\"tag\">&lt;/<span class=\"name\">param-name</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">param-value</span>&gt;</span>classpath:springMVC-servlet.xml<span class=\"tag\">&lt;/<span class=\"name\">param-value</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">init-param</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">load-on-startup</span>&gt;</span>1<span class=\"tag\">&lt;/<span class=\"name\">load-on-startup</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">servlet</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>springMVC-servlet.xml</p>\n<h2 id=\"\"><a href=\"#\" class=\"headerlink\" title=\"\"></a><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">beans</span> <span class=\"attr\">default-lazy-init</span>=<span class=\"string\">\"true\"</span></span></span><br><span class=\"line\"><span class=\"tag\">       <span class=\"attr\">xmlns</span>=<span class=\"string\">\"http://www.springframework.org/schema/beans\"</span> <span class=\"attr\">xmlns:p</span>=<span class=\"string\">\"http://www.springframework.org/schema/p\"</span></span></span><br><span class=\"line\"><span class=\"tag\">       <span class=\"attr\">xmlns:xsi</span>=<span class=\"string\">\"http://www.w3.org/2001/XMLSchema-instance\"</span> <span class=\"attr\">xmlns:context</span>=<span class=\"string\">\"http://www.springframework.org/schema/context\"</span></span></span><br><span class=\"line\"><span class=\"tag\">       <span class=\"attr\">xmlns:mvc</span>=<span class=\"string\">\"http://www.springframework.org/schema/mvc\"</span></span></span><br><span class=\"line\"><span class=\"tag\">       <span class=\"attr\">xsi:schemaLocation</span>=<span class=\"string\">\"</span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"string\">       http://www.springframework.org/schema/beans</span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"string\">       http://www.springframework.org/schema/beans/spring-beans-3.1.xsd</span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"string\">       http://www.springframework.org/schema/mvc</span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"string\">       http://www.springframework.org/schema/mvc/spring-mvc-3.1.xsd</span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"string\">       http://www.springframework.org/schema/context</span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"string\">       http://www.springframework.org/schema/context/spring-context-3.1.xsd\"</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- 注解驱动 --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">mvc:annotation-driven</span> /&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- 扫描包 --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">context:component-scan</span> <span class=\"attr\">base-package</span>=<span class=\"string\">\"com.mailejifen.oauth.controllers\"</span> /&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">class</span>=<span class=\"string\">\"org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerMapping\"</span> /&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">class</span>=<span class=\"string\">\"org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter\"</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"messageConverters\"</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">list</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">class</span>=<span class=\"string\">\"org.springframework.http.converter.StringHttpMessageConverter\"</span>&gt;</span></span><br><span class=\"line\">                    <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"supportedMediaTypes\"</span>&gt;</span></span><br><span class=\"line\">                        <span class=\"tag\">&lt;<span class=\"name\">list</span>&gt;</span></span><br><span class=\"line\">                            <span class=\"tag\">&lt;<span class=\"name\">value</span>&gt;</span>text/html; charset=UTF-8<span class=\"tag\">&lt;/<span class=\"name\">value</span>&gt;</span></span><br><span class=\"line\">                            <span class=\"tag\">&lt;<span class=\"name\">value</span>&gt;</span>application/json;charset=UTF-8<span class=\"tag\">&lt;/<span class=\"name\">value</span>&gt;</span></span><br><span class=\"line\">                        <span class=\"tag\">&lt;/<span class=\"name\">list</span>&gt;</span></span><br><span class=\"line\">                    <span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;/<span class=\"name\">bean</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">class</span>=<span class=\"string\">\"org.springframework.http.converter.json.MappingJackson2HttpMessageConverter\"</span>&gt;</span></span><br><span class=\"line\">                    <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"supportedMediaTypes\"</span>&gt;</span></span><br><span class=\"line\">                        <span class=\"tag\">&lt;<span class=\"name\">list</span>&gt;</span></span><br><span class=\"line\">                            <span class=\"tag\">&lt;<span class=\"name\">value</span>&gt;</span>text/html; charset=UTF-8<span class=\"tag\">&lt;/<span class=\"name\">value</span>&gt;</span></span><br><span class=\"line\">                            <span class=\"tag\">&lt;<span class=\"name\">value</span>&gt;</span>application/json;charset=UTF-8<span class=\"tag\">&lt;/<span class=\"name\">value</span>&gt;</span></span><br><span class=\"line\">                        <span class=\"tag\">&lt;/<span class=\"name\">list</span>&gt;</span></span><br><span class=\"line\">                    <span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;/<span class=\"name\">bean</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">list</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">bean</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">beans</span>&gt;</span></span><br></pre></td></tr></table></figure></h2>"},{"_content":"# spring mvc web.xml","source":"_posts/spring/mvc/web_xml.md","raw":"# spring mvc web.xml","slug":"spring/mvc/web_xml","published":1,"date":"2018-11-20T15:25:12.749Z","updated":"2018-11-20T15:25:22.865Z","title":"","comments":1,"layout":"post","photos":[],"link":"","_id":"cjopxmsr5000jwfo8ih6vlj43","content":"<h1><span id=\"spring-mvc-webxml\">spring mvc web.xml</span></h1>","site":{"data":{}},"excerpt":"","more":"<h1 id=\"spring-mvc-web-xml\"><a href=\"#spring-mvc-web-xml\" class=\"headerlink\" title=\"spring mvc web.xml\"></a>spring mvc web.xml</h1>"},{"_content":"# Springboot自定义异常处理\nSpringboot 默认把异常的处理集中到一个ModelAndView中了，但项目的实际过程中，这样做，并不能满足我们的要求。具体的自定义异常的处理情参考[Spring boot异常处理详解](exception.md)\n\n\n## 具体实现\n\n```java\n@Bean\n    public EmbeddedServletContainerCustomizer containerCustomizer(){\n        return new EmbeddedServletContainerCustomizer(){\n            @Override\n            public void customize(ConfigurableEmbeddedServletContainer container) {\n                container.addErrorPages(new ErrorPage(HttpStatus.NOT_FOUND, \"/error/404\"));\n                container.addErrorPages(new ErrorPage(HttpStatus.INTERNAL_SERVER_ERROR, \"/error/500\"));\n                container.addErrorPages(new ErrorPage(java.lang.Throwable.class,\"/error/500\"));\n            }\n        };\n    }\n```\n\n重写通过实现ErrorController，重写BasicErrorController的功能实现\n\n\n```java\n* 重写BasicErrorController,主要负责系统的异常页面的处理以及错误信息的显示\n * @see org.springframework.boot.autoconfigure.web.BasicErrorController\n * @see org.springframework.boot.autoconfigure.web.ErrorMvcAutoConfiguration\n *\n * @author Jonathan\n * @version 2016/5/31 11:22\n * @since JDK 7.0+\n */\n@Controller\n@RequestMapping(value = \"error\")\n@EnableConfigurationProperties({ServerProperties.class})\npublic class ExceptionController implements ErrorController {\n\n    private ErrorAttributes errorAttributes;\n\n    @Autowired\n    private ServerProperties serverProperties;\n\n\n    /**\n     * 初始化ExceptionController\n     * @param errorAttributes\n     */\n    @Autowired\n    public ExceptionController(ErrorAttributes errorAttributes) {\n        Assert.notNull(errorAttributes, \"ErrorAttributes must not be null\");\n        this.errorAttributes = errorAttributes;\n    }\n\n\n    /**\n     * 定义404的ModelAndView\n     * @param request\n     * @param response\n     * @return\n     */\n    @RequestMapping(produces = \"text/html\",value = \"404\")\n    public ModelAndView errorHtml404(HttpServletRequest request,\n                                  HttpServletResponse response) {\n        response.setStatus(getStatus(request).value());\n        Map<String, Object> model = getErrorAttributes(request,\n                isIncludeStackTrace(request, MediaType.TEXT_HTML));\n        return new ModelAndView(\"error/404\", model);\n    }\n\n    /**\n     * 定义404的JSON数据\n     * @param request\n     * @return\n     */\n    @RequestMapping(value = \"404\")\n    @ResponseBody\n    public ResponseEntity<Map<String, Object>> error404(HttpServletRequest request) {\n        Map<String, Object> body = getErrorAttributes(request,\n                isIncludeStackTrace(request, MediaType.TEXT_HTML));\n        HttpStatus status = getStatus(request);\n        return new ResponseEntity<Map<String, Object>>(body, status);\n    }\n\n    /**\n     * 定义500的ModelAndView\n     * @param request\n     * @param response\n     * @return\n     */\n    @RequestMapping(produces = \"text/html\",value = \"500\")\n    public ModelAndView errorHtml500(HttpServletRequest request,\n                                  HttpServletResponse response) {\n        response.setStatus(getStatus(request).value());\n        Map<String, Object> model = getErrorAttributes(request,\n                isIncludeStackTrace(request, MediaType.TEXT_HTML));\n        return new ModelAndView(\"error/500\", model);\n    }\n\n\n    /**\n     * 定义500的错误JSON信息\n     * @param request\n     * @return\n     */\n    @RequestMapping(value = \"500\")\n    @ResponseBody\n    public ResponseEntity<Map<String, Object>> error500(HttpServletRequest request) {\n        Map<String, Object> body = getErrorAttributes(request,\n                isIncludeStackTrace(request, MediaType.TEXT_HTML));\n        HttpStatus status = getStatus(request);\n        return new ResponseEntity<Map<String, Object>>(body, status);\n    }\n\n\n    /**\n     * Determine if the stacktrace attribute should be included.\n     * @param request the source request\n     * @param produces the media type produced (or {@code MediaType.ALL})\n     * @return if the stacktrace attribute should be included\n     */\n    protected boolean isIncludeStackTrace(HttpServletRequest request,\n                                          MediaType produces) {\n        ErrorProperties.IncludeStacktrace include = this.serverProperties.getError().getIncludeStacktrace();\n        if (include == ErrorProperties.IncludeStacktrace.ALWAYS) {\n            return true;\n        }\n        if (include == ErrorProperties.IncludeStacktrace.ON_TRACE_PARAM) {\n            return getTraceParameter(request);\n        }\n        return false;\n    }\n\n\n    /**\n     * 获取错误的信息\n     * @param request\n     * @param includeStackTrace\n     * @return\n     */\n    private Map<String, Object> getErrorAttributes(HttpServletRequest request,\n                                                   boolean includeStackTrace) {\n        RequestAttributes requestAttributes = new ServletRequestAttributes(request);\n        return this.errorAttributes.getErrorAttributes(requestAttributes,\n                includeStackTrace);\n    }\n\n    /**\n     * 是否包含trace\n     * @param request\n     * @return\n     */\n    private boolean getTraceParameter(HttpServletRequest request) {\n        String parameter = request.getParameter(\"trace\");\n        if (parameter == null) {\n            return false;\n        }\n        return !\"false\".equals(parameter.toLowerCase());\n    }\n\n    /**\n     * 获取错误编码\n     * @param request\n     * @return\n     */\n    private HttpStatus getStatus(HttpServletRequest request) {\n        Integer statusCode = (Integer) request\n                .getAttribute(\"javax.servlet.error.status_code\");\n        if (statusCode == null) {\n            return HttpStatus.INTERNAL_SERVER_ERROR;\n        }\n        try {\n            return HttpStatus.valueOf(statusCode);\n        }\n        catch (Exception ex) {\n            return HttpStatus.INTERNAL_SERVER_ERROR;\n        }\n    }\n\n    /**\n     * 实现错误路径,暂时无用\n     * @see ExceptionMvcAutoConfiguration#containerCustomizer()\n     * @return\n     */\n    @Override\n    public String getErrorPath() {\n        return \"\";\n    }\n\n}\n```\n\n总结\n\n第一步，通过定义containerCustomizer,重写定义了异常处理对应的视图。目前定义了404和500，可以继续扩展。 \n第二步，重写BasicErrorController,当然可以直接定义一个普通的controller类，直接实现第一步定义的视图的方法。重写的目的是重用ErrorAttributes。这样在页面，直接可以获取到status,message,exception,trace等内容。 \n如果仅仅是把异常处理的视图作为静态页面，不需要看到异常信息内容的话，直接第一步后，再定义error/404，error/500等静态视图即可。\n\n以上两步的操作，比网上流传的更能实现自定义化。\n\n\n","source":"_posts/spring-boot/exception/errorController.md","raw":"# Springboot自定义异常处理\nSpringboot 默认把异常的处理集中到一个ModelAndView中了，但项目的实际过程中，这样做，并不能满足我们的要求。具体的自定义异常的处理情参考[Spring boot异常处理详解](exception.md)\n\n\n## 具体实现\n\n```java\n@Bean\n    public EmbeddedServletContainerCustomizer containerCustomizer(){\n        return new EmbeddedServletContainerCustomizer(){\n            @Override\n            public void customize(ConfigurableEmbeddedServletContainer container) {\n                container.addErrorPages(new ErrorPage(HttpStatus.NOT_FOUND, \"/error/404\"));\n                container.addErrorPages(new ErrorPage(HttpStatus.INTERNAL_SERVER_ERROR, \"/error/500\"));\n                container.addErrorPages(new ErrorPage(java.lang.Throwable.class,\"/error/500\"));\n            }\n        };\n    }\n```\n\n重写通过实现ErrorController，重写BasicErrorController的功能实现\n\n\n```java\n* 重写BasicErrorController,主要负责系统的异常页面的处理以及错误信息的显示\n * @see org.springframework.boot.autoconfigure.web.BasicErrorController\n * @see org.springframework.boot.autoconfigure.web.ErrorMvcAutoConfiguration\n *\n * @author Jonathan\n * @version 2016/5/31 11:22\n * @since JDK 7.0+\n */\n@Controller\n@RequestMapping(value = \"error\")\n@EnableConfigurationProperties({ServerProperties.class})\npublic class ExceptionController implements ErrorController {\n\n    private ErrorAttributes errorAttributes;\n\n    @Autowired\n    private ServerProperties serverProperties;\n\n\n    /**\n     * 初始化ExceptionController\n     * @param errorAttributes\n     */\n    @Autowired\n    public ExceptionController(ErrorAttributes errorAttributes) {\n        Assert.notNull(errorAttributes, \"ErrorAttributes must not be null\");\n        this.errorAttributes = errorAttributes;\n    }\n\n\n    /**\n     * 定义404的ModelAndView\n     * @param request\n     * @param response\n     * @return\n     */\n    @RequestMapping(produces = \"text/html\",value = \"404\")\n    public ModelAndView errorHtml404(HttpServletRequest request,\n                                  HttpServletResponse response) {\n        response.setStatus(getStatus(request).value());\n        Map<String, Object> model = getErrorAttributes(request,\n                isIncludeStackTrace(request, MediaType.TEXT_HTML));\n        return new ModelAndView(\"error/404\", model);\n    }\n\n    /**\n     * 定义404的JSON数据\n     * @param request\n     * @return\n     */\n    @RequestMapping(value = \"404\")\n    @ResponseBody\n    public ResponseEntity<Map<String, Object>> error404(HttpServletRequest request) {\n        Map<String, Object> body = getErrorAttributes(request,\n                isIncludeStackTrace(request, MediaType.TEXT_HTML));\n        HttpStatus status = getStatus(request);\n        return new ResponseEntity<Map<String, Object>>(body, status);\n    }\n\n    /**\n     * 定义500的ModelAndView\n     * @param request\n     * @param response\n     * @return\n     */\n    @RequestMapping(produces = \"text/html\",value = \"500\")\n    public ModelAndView errorHtml500(HttpServletRequest request,\n                                  HttpServletResponse response) {\n        response.setStatus(getStatus(request).value());\n        Map<String, Object> model = getErrorAttributes(request,\n                isIncludeStackTrace(request, MediaType.TEXT_HTML));\n        return new ModelAndView(\"error/500\", model);\n    }\n\n\n    /**\n     * 定义500的错误JSON信息\n     * @param request\n     * @return\n     */\n    @RequestMapping(value = \"500\")\n    @ResponseBody\n    public ResponseEntity<Map<String, Object>> error500(HttpServletRequest request) {\n        Map<String, Object> body = getErrorAttributes(request,\n                isIncludeStackTrace(request, MediaType.TEXT_HTML));\n        HttpStatus status = getStatus(request);\n        return new ResponseEntity<Map<String, Object>>(body, status);\n    }\n\n\n    /**\n     * Determine if the stacktrace attribute should be included.\n     * @param request the source request\n     * @param produces the media type produced (or {@code MediaType.ALL})\n     * @return if the stacktrace attribute should be included\n     */\n    protected boolean isIncludeStackTrace(HttpServletRequest request,\n                                          MediaType produces) {\n        ErrorProperties.IncludeStacktrace include = this.serverProperties.getError().getIncludeStacktrace();\n        if (include == ErrorProperties.IncludeStacktrace.ALWAYS) {\n            return true;\n        }\n        if (include == ErrorProperties.IncludeStacktrace.ON_TRACE_PARAM) {\n            return getTraceParameter(request);\n        }\n        return false;\n    }\n\n\n    /**\n     * 获取错误的信息\n     * @param request\n     * @param includeStackTrace\n     * @return\n     */\n    private Map<String, Object> getErrorAttributes(HttpServletRequest request,\n                                                   boolean includeStackTrace) {\n        RequestAttributes requestAttributes = new ServletRequestAttributes(request);\n        return this.errorAttributes.getErrorAttributes(requestAttributes,\n                includeStackTrace);\n    }\n\n    /**\n     * 是否包含trace\n     * @param request\n     * @return\n     */\n    private boolean getTraceParameter(HttpServletRequest request) {\n        String parameter = request.getParameter(\"trace\");\n        if (parameter == null) {\n            return false;\n        }\n        return !\"false\".equals(parameter.toLowerCase());\n    }\n\n    /**\n     * 获取错误编码\n     * @param request\n     * @return\n     */\n    private HttpStatus getStatus(HttpServletRequest request) {\n        Integer statusCode = (Integer) request\n                .getAttribute(\"javax.servlet.error.status_code\");\n        if (statusCode == null) {\n            return HttpStatus.INTERNAL_SERVER_ERROR;\n        }\n        try {\n            return HttpStatus.valueOf(statusCode);\n        }\n        catch (Exception ex) {\n            return HttpStatus.INTERNAL_SERVER_ERROR;\n        }\n    }\n\n    /**\n     * 实现错误路径,暂时无用\n     * @see ExceptionMvcAutoConfiguration#containerCustomizer()\n     * @return\n     */\n    @Override\n    public String getErrorPath() {\n        return \"\";\n    }\n\n}\n```\n\n总结\n\n第一步，通过定义containerCustomizer,重写定义了异常处理对应的视图。目前定义了404和500，可以继续扩展。 \n第二步，重写BasicErrorController,当然可以直接定义一个普通的controller类，直接实现第一步定义的视图的方法。重写的目的是重用ErrorAttributes。这样在页面，直接可以获取到status,message,exception,trace等内容。 \n如果仅仅是把异常处理的视图作为静态页面，不需要看到异常信息内容的话，直接第一步后，再定义error/404，error/500等静态视图即可。\n\n以上两步的操作，比网上流传的更能实现自定义化。\n\n\n","slug":"spring-boot/exception/errorController","published":1,"date":"2018-11-20T14:55:26.977Z","updated":"2018-11-20T15:03:03.525Z","title":"","comments":1,"layout":"post","photos":[],"link":"","_id":"cjopxmsr6000kwfo8rxsrif8e","content":"<h1><span id=\"springboot自定义异常处理\">Springboot自定义异常处理</span></h1><p>Springboot 默认把异常的处理集中到一个ModelAndView中了，但项目的实际过程中，这样做，并不能满足我们的要求。具体的自定义异常的处理情参考<a href=\"exception.md\">Spring boot异常处理详解</a></p>\n<h2><span id=\"具体实现\">具体实现</span></h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> EmbeddedServletContainerCustomizer <span class=\"title\">containerCustomizer</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> EmbeddedServletContainerCustomizer()&#123;</span><br><span class=\"line\">            <span class=\"meta\">@Override</span></span><br><span class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">customize</span><span class=\"params\">(ConfigurableEmbeddedServletContainer container)</span> </span>&#123;</span><br><span class=\"line\">                container.addErrorPages(<span class=\"keyword\">new</span> ErrorPage(HttpStatus.NOT_FOUND, <span class=\"string\">\"/error/404\"</span>));</span><br><span class=\"line\">                container.addErrorPages(<span class=\"keyword\">new</span> ErrorPage(HttpStatus.INTERNAL_SERVER_ERROR, <span class=\"string\">\"/error/500\"</span>));</span><br><span class=\"line\">                container.addErrorPages(<span class=\"keyword\">new</span> ErrorPage(java.lang.Throwable.class,<span class=\"string\">\"/error/500\"</span>));</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n<p>重写通过实现ErrorController，重写BasicErrorController的功能实现</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">* 重写BasicErrorController,主要负责系统的异常页面的处理以及错误信息的显示</span><br><span class=\"line\"> * <span class=\"meta\">@see</span> org.springframework.boot.autoconfigure.web.BasicErrorController</span><br><span class=\"line\"> * <span class=\"meta\">@see</span> org.springframework.boot.autoconfigure.web.ErrorMvcAutoConfiguration</span><br><span class=\"line\"> *</span><br><span class=\"line\"> * <span class=\"meta\">@author</span> Jonathan</span><br><span class=\"line\"> * <span class=\"meta\">@version</span> <span class=\"number\">2016</span>/<span class=\"number\">5</span>/<span class=\"number\">31</span> <span class=\"number\">11</span>:<span class=\"number\">22</span></span><br><span class=\"line\"> * <span class=\"meta\">@since</span> JDK <span class=\"number\">7.0</span>+</span><br><span class=\"line\"> */</span><br><span class=\"line\"><span class=\"meta\">@Controller</span></span><br><span class=\"line\"><span class=\"meta\">@RequestMapping</span>(value = <span class=\"string\">\"error\"</span>)</span><br><span class=\"line\"><span class=\"meta\">@EnableConfigurationProperties</span>(&#123;ServerProperties.class&#125;)</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ExceptionController</span> <span class=\"keyword\">implements</span> <span class=\"title\">ErrorController</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> ErrorAttributes errorAttributes;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Autowired</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> ServerProperties serverProperties;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 初始化ExceptionController</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> errorAttributes</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@Autowired</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">ExceptionController</span><span class=\"params\">(ErrorAttributes errorAttributes)</span> </span>&#123;</span><br><span class=\"line\">        Assert.notNull(errorAttributes, <span class=\"string\">\"ErrorAttributes must not be null\"</span>);</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.errorAttributes = errorAttributes;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 定义404的ModelAndView</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> request</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> response</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@RequestMapping</span>(produces = <span class=\"string\">\"text/html\"</span>,value = <span class=\"string\">\"404\"</span>)</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> ModelAndView <span class=\"title\">errorHtml404</span><span class=\"params\">(HttpServletRequest request,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">                                  HttpServletResponse response)</span> </span>&#123;</span><br><span class=\"line\">        response.setStatus(getStatus(request).value());</span><br><span class=\"line\">        Map&lt;String, Object&gt; model = getErrorAttributes(request,</span><br><span class=\"line\">                isIncludeStackTrace(request, MediaType.TEXT_HTML));</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> ModelAndView(<span class=\"string\">\"error/404\"</span>, model);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 定义404的JSON数据</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> request</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@RequestMapping</span>(value = <span class=\"string\">\"404\"</span>)</span><br><span class=\"line\">    <span class=\"meta\">@ResponseBody</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> ResponseEntity&lt;Map&lt;String, Object&gt;&gt; error404(HttpServletRequest request) &#123;</span><br><span class=\"line\">        Map&lt;String, Object&gt; body = getErrorAttributes(request,</span><br><span class=\"line\">                isIncludeStackTrace(request, MediaType.TEXT_HTML));</span><br><span class=\"line\">        HttpStatus status = getStatus(request);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> ResponseEntity&lt;Map&lt;String, Object&gt;&gt;(body, status);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 定义500的ModelAndView</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> request</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> response</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@RequestMapping</span>(produces = <span class=\"string\">\"text/html\"</span>,value = <span class=\"string\">\"500\"</span>)</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> ModelAndView <span class=\"title\">errorHtml500</span><span class=\"params\">(HttpServletRequest request,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">                                  HttpServletResponse response)</span> </span>&#123;</span><br><span class=\"line\">        response.setStatus(getStatus(request).value());</span><br><span class=\"line\">        Map&lt;String, Object&gt; model = getErrorAttributes(request,</span><br><span class=\"line\">                isIncludeStackTrace(request, MediaType.TEXT_HTML));</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> ModelAndView(<span class=\"string\">\"error/500\"</span>, model);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 定义500的错误JSON信息</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> request</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@RequestMapping</span>(value = <span class=\"string\">\"500\"</span>)</span><br><span class=\"line\">    <span class=\"meta\">@ResponseBody</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> ResponseEntity&lt;Map&lt;String, Object&gt;&gt; error500(HttpServletRequest request) &#123;</span><br><span class=\"line\">        Map&lt;String, Object&gt; body = getErrorAttributes(request,</span><br><span class=\"line\">                isIncludeStackTrace(request, MediaType.TEXT_HTML));</span><br><span class=\"line\">        HttpStatus status = getStatus(request);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> ResponseEntity&lt;Map&lt;String, Object&gt;&gt;(body, status);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * Determine if the stacktrace attribute should be included.</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> request the source request</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> produces the media type produced (or &#123;<span class=\"doctag\">@code</span> MediaType.ALL&#125;)</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> if the stacktrace attribute should be included</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">boolean</span> <span class=\"title\">isIncludeStackTrace</span><span class=\"params\">(HttpServletRequest request,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">                                          MediaType produces)</span> </span>&#123;</span><br><span class=\"line\">        ErrorProperties.IncludeStacktrace include = <span class=\"keyword\">this</span>.serverProperties.getError().getIncludeStacktrace();</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (include == ErrorProperties.IncludeStacktrace.ALWAYS) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (include == ErrorProperties.IncludeStacktrace.ON_TRACE_PARAM) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> getTraceParameter(request);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 获取错误的信息</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> request</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> includeStackTrace</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> Map&lt;String, Object&gt; <span class=\"title\">getErrorAttributes</span><span class=\"params\">(HttpServletRequest request,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">                                                   <span class=\"keyword\">boolean</span> includeStackTrace)</span> </span>&#123;</span><br><span class=\"line\">        RequestAttributes requestAttributes = <span class=\"keyword\">new</span> ServletRequestAttributes(request);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.errorAttributes.getErrorAttributes(requestAttributes,</span><br><span class=\"line\">                includeStackTrace);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 是否包含trace</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> request</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">boolean</span> <span class=\"title\">getTraceParameter</span><span class=\"params\">(HttpServletRequest request)</span> </span>&#123;</span><br><span class=\"line\">        String parameter = request.getParameter(<span class=\"string\">\"trace\"</span>);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (parameter == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> !<span class=\"string\">\"false\"</span>.equals(parameter.toLowerCase());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 获取错误编码</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> request</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> HttpStatus <span class=\"title\">getStatus</span><span class=\"params\">(HttpServletRequest request)</span> </span>&#123;</span><br><span class=\"line\">        Integer statusCode = (Integer) request</span><br><span class=\"line\">                .getAttribute(<span class=\"string\">\"javax.servlet.error.status_code\"</span>);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (statusCode == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> HttpStatus.INTERNAL_SERVER_ERROR;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> HttpStatus.valueOf(statusCode);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">catch</span> (Exception ex) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> HttpStatus.INTERNAL_SERVER_ERROR;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 实现错误路径,暂时无用</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@see</span> ExceptionMvcAutoConfiguration#containerCustomizer()</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">getErrorPath</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">\"\"</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>总结</p>\n<p>第一步，通过定义containerCustomizer,重写定义了异常处理对应的视图。目前定义了404和500，可以继续扩展。<br>第二步，重写BasicErrorController,当然可以直接定义一个普通的controller类，直接实现第一步定义的视图的方法。重写的目的是重用ErrorAttributes。这样在页面，直接可以获取到status,message,exception,trace等内容。<br>如果仅仅是把异常处理的视图作为静态页面，不需要看到异常信息内容的话，直接第一步后，再定义error/404，error/500等静态视图即可。</p>\n<p>以上两步的操作，比网上流传的更能实现自定义化。</p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"Springboot自定义异常处理\"><a href=\"#Springboot自定义异常处理\" class=\"headerlink\" title=\"Springboot自定义异常处理\"></a>Springboot自定义异常处理</h1><p>Springboot 默认把异常的处理集中到一个ModelAndView中了，但项目的实际过程中，这样做，并不能满足我们的要求。具体的自定义异常的处理情参考<a href=\"exception.md\">Spring boot异常处理详解</a></p>\n<h2 id=\"具体实现\"><a href=\"#具体实现\" class=\"headerlink\" title=\"具体实现\"></a>具体实现</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> EmbeddedServletContainerCustomizer <span class=\"title\">containerCustomizer</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> EmbeddedServletContainerCustomizer()&#123;</span><br><span class=\"line\">            <span class=\"meta\">@Override</span></span><br><span class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">customize</span><span class=\"params\">(ConfigurableEmbeddedServletContainer container)</span> </span>&#123;</span><br><span class=\"line\">                container.addErrorPages(<span class=\"keyword\">new</span> ErrorPage(HttpStatus.NOT_FOUND, <span class=\"string\">\"/error/404\"</span>));</span><br><span class=\"line\">                container.addErrorPages(<span class=\"keyword\">new</span> ErrorPage(HttpStatus.INTERNAL_SERVER_ERROR, <span class=\"string\">\"/error/500\"</span>));</span><br><span class=\"line\">                container.addErrorPages(<span class=\"keyword\">new</span> ErrorPage(java.lang.Throwable.class,<span class=\"string\">\"/error/500\"</span>));</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n<p>重写通过实现ErrorController，重写BasicErrorController的功能实现</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">* 重写BasicErrorController,主要负责系统的异常页面的处理以及错误信息的显示</span><br><span class=\"line\"> * <span class=\"meta\">@see</span> org.springframework.boot.autoconfigure.web.BasicErrorController</span><br><span class=\"line\"> * <span class=\"meta\">@see</span> org.springframework.boot.autoconfigure.web.ErrorMvcAutoConfiguration</span><br><span class=\"line\"> *</span><br><span class=\"line\"> * <span class=\"meta\">@author</span> Jonathan</span><br><span class=\"line\"> * <span class=\"meta\">@version</span> <span class=\"number\">2016</span>/<span class=\"number\">5</span>/<span class=\"number\">31</span> <span class=\"number\">11</span>:<span class=\"number\">22</span></span><br><span class=\"line\"> * <span class=\"meta\">@since</span> JDK <span class=\"number\">7.0</span>+</span><br><span class=\"line\"> */</span><br><span class=\"line\"><span class=\"meta\">@Controller</span></span><br><span class=\"line\"><span class=\"meta\">@RequestMapping</span>(value = <span class=\"string\">\"error\"</span>)</span><br><span class=\"line\"><span class=\"meta\">@EnableConfigurationProperties</span>(&#123;ServerProperties.class&#125;)</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ExceptionController</span> <span class=\"keyword\">implements</span> <span class=\"title\">ErrorController</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> ErrorAttributes errorAttributes;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Autowired</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> ServerProperties serverProperties;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 初始化ExceptionController</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> errorAttributes</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@Autowired</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">ExceptionController</span><span class=\"params\">(ErrorAttributes errorAttributes)</span> </span>&#123;</span><br><span class=\"line\">        Assert.notNull(errorAttributes, <span class=\"string\">\"ErrorAttributes must not be null\"</span>);</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.errorAttributes = errorAttributes;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 定义404的ModelAndView</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> request</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> response</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@RequestMapping</span>(produces = <span class=\"string\">\"text/html\"</span>,value = <span class=\"string\">\"404\"</span>)</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> ModelAndView <span class=\"title\">errorHtml404</span><span class=\"params\">(HttpServletRequest request,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">                                  HttpServletResponse response)</span> </span>&#123;</span><br><span class=\"line\">        response.setStatus(getStatus(request).value());</span><br><span class=\"line\">        Map&lt;String, Object&gt; model = getErrorAttributes(request,</span><br><span class=\"line\">                isIncludeStackTrace(request, MediaType.TEXT_HTML));</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> ModelAndView(<span class=\"string\">\"error/404\"</span>, model);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 定义404的JSON数据</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> request</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@RequestMapping</span>(value = <span class=\"string\">\"404\"</span>)</span><br><span class=\"line\">    <span class=\"meta\">@ResponseBody</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> ResponseEntity&lt;Map&lt;String, Object&gt;&gt; error404(HttpServletRequest request) &#123;</span><br><span class=\"line\">        Map&lt;String, Object&gt; body = getErrorAttributes(request,</span><br><span class=\"line\">                isIncludeStackTrace(request, MediaType.TEXT_HTML));</span><br><span class=\"line\">        HttpStatus status = getStatus(request);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> ResponseEntity&lt;Map&lt;String, Object&gt;&gt;(body, status);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 定义500的ModelAndView</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> request</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> response</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@RequestMapping</span>(produces = <span class=\"string\">\"text/html\"</span>,value = <span class=\"string\">\"500\"</span>)</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> ModelAndView <span class=\"title\">errorHtml500</span><span class=\"params\">(HttpServletRequest request,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">                                  HttpServletResponse response)</span> </span>&#123;</span><br><span class=\"line\">        response.setStatus(getStatus(request).value());</span><br><span class=\"line\">        Map&lt;String, Object&gt; model = getErrorAttributes(request,</span><br><span class=\"line\">                isIncludeStackTrace(request, MediaType.TEXT_HTML));</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> ModelAndView(<span class=\"string\">\"error/500\"</span>, model);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 定义500的错误JSON信息</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> request</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@RequestMapping</span>(value = <span class=\"string\">\"500\"</span>)</span><br><span class=\"line\">    <span class=\"meta\">@ResponseBody</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> ResponseEntity&lt;Map&lt;String, Object&gt;&gt; error500(HttpServletRequest request) &#123;</span><br><span class=\"line\">        Map&lt;String, Object&gt; body = getErrorAttributes(request,</span><br><span class=\"line\">                isIncludeStackTrace(request, MediaType.TEXT_HTML));</span><br><span class=\"line\">        HttpStatus status = getStatus(request);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> ResponseEntity&lt;Map&lt;String, Object&gt;&gt;(body, status);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * Determine if the stacktrace attribute should be included.</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> request the source request</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> produces the media type produced (or &#123;<span class=\"doctag\">@code</span> MediaType.ALL&#125;)</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> if the stacktrace attribute should be included</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">boolean</span> <span class=\"title\">isIncludeStackTrace</span><span class=\"params\">(HttpServletRequest request,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">                                          MediaType produces)</span> </span>&#123;</span><br><span class=\"line\">        ErrorProperties.IncludeStacktrace include = <span class=\"keyword\">this</span>.serverProperties.getError().getIncludeStacktrace();</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (include == ErrorProperties.IncludeStacktrace.ALWAYS) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (include == ErrorProperties.IncludeStacktrace.ON_TRACE_PARAM) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> getTraceParameter(request);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 获取错误的信息</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> request</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> includeStackTrace</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> Map&lt;String, Object&gt; <span class=\"title\">getErrorAttributes</span><span class=\"params\">(HttpServletRequest request,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">                                                   <span class=\"keyword\">boolean</span> includeStackTrace)</span> </span>&#123;</span><br><span class=\"line\">        RequestAttributes requestAttributes = <span class=\"keyword\">new</span> ServletRequestAttributes(request);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.errorAttributes.getErrorAttributes(requestAttributes,</span><br><span class=\"line\">                includeStackTrace);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 是否包含trace</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> request</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">boolean</span> <span class=\"title\">getTraceParameter</span><span class=\"params\">(HttpServletRequest request)</span> </span>&#123;</span><br><span class=\"line\">        String parameter = request.getParameter(<span class=\"string\">\"trace\"</span>);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (parameter == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> !<span class=\"string\">\"false\"</span>.equals(parameter.toLowerCase());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 获取错误编码</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> request</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> HttpStatus <span class=\"title\">getStatus</span><span class=\"params\">(HttpServletRequest request)</span> </span>&#123;</span><br><span class=\"line\">        Integer statusCode = (Integer) request</span><br><span class=\"line\">                .getAttribute(<span class=\"string\">\"javax.servlet.error.status_code\"</span>);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (statusCode == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> HttpStatus.INTERNAL_SERVER_ERROR;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> HttpStatus.valueOf(statusCode);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">catch</span> (Exception ex) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> HttpStatus.INTERNAL_SERVER_ERROR;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 实现错误路径,暂时无用</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@see</span> ExceptionMvcAutoConfiguration#containerCustomizer()</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">getErrorPath</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">\"\"</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>总结</p>\n<p>第一步，通过定义containerCustomizer,重写定义了异常处理对应的视图。目前定义了404和500，可以继续扩展。<br>第二步，重写BasicErrorController,当然可以直接定义一个普通的controller类，直接实现第一步定义的视图的方法。重写的目的是重用ErrorAttributes。这样在页面，直接可以获取到status,message,exception,trace等内容。<br>如果仅仅是把异常处理的视图作为静态页面，不需要看到异常信息内容的话，直接第一步后，再定义error/404，error/500等静态视图即可。</p>\n<p>以上两步的操作，比网上流传的更能实现自定义化。</p>\n"},{"_content":"# 自定义'白标'（whitelabel，可以了解下相关理念）错误页面\n\nSpring Boot安装了一个'whitelabel'错误页面，如果你遇到一个服务器错误（机器客户端消费的是JSON，其他媒体类型则会看到一个具有正确错误码的合乎情理的响应），那就能在客户端浏览器中看到该页面。你可以设置error.whitelabel.enabled=false来关闭该功能，但通常你想要添加自己的错误页面来取代whitelabel。确切地说，如何实现取决于你使用的模板技术。例如，你正在使用Thymeleaf，你将添加一个error.html模板。如果你正在使用FreeMarker，那你将添加一个error.ftl模板。通常，你需要的只是一个名称为error的View，和/或一个处理/error路径的@Controller。除非你替换了一些默认配置，否则你将在你的ApplicationContext中找到一个BeanNameViewResolver，所以一个id为error的@Bean可能是完成该操作的一个简单方式。详情参考ErrorMvcAutoConfiguration。\n查看Error Handling章节，了解下如何将处理器（handlers）注册到servlet容器中。\n\n","source":"_posts/spring-boot/exception/whitelabel.md","raw":"# 自定义'白标'（whitelabel，可以了解下相关理念）错误页面\n\nSpring Boot安装了一个'whitelabel'错误页面，如果你遇到一个服务器错误（机器客户端消费的是JSON，其他媒体类型则会看到一个具有正确错误码的合乎情理的响应），那就能在客户端浏览器中看到该页面。你可以设置error.whitelabel.enabled=false来关闭该功能，但通常你想要添加自己的错误页面来取代whitelabel。确切地说，如何实现取决于你使用的模板技术。例如，你正在使用Thymeleaf，你将添加一个error.html模板。如果你正在使用FreeMarker，那你将添加一个error.ftl模板。通常，你需要的只是一个名称为error的View，和/或一个处理/error路径的@Controller。除非你替换了一些默认配置，否则你将在你的ApplicationContext中找到一个BeanNameViewResolver，所以一个id为error的@Bean可能是完成该操作的一个简单方式。详情参考ErrorMvcAutoConfiguration。\n查看Error Handling章节，了解下如何将处理器（handlers）注册到servlet容器中。\n\n","slug":"spring-boot/exception/whitelabel","published":1,"date":"2018-11-20T14:55:26.977Z","updated":"2018-11-20T14:55:26.977Z","title":"","comments":1,"layout":"post","photos":[],"link":"","_id":"cjopxmsr6000lwfo8k87vnhwz","content":"<h1><span id=\"自定义白标whitelabel可以了解下相关理念错误页面\">自定义’白标’（whitelabel，可以了解下相关理念）错误页面</span></h1><p>Spring Boot安装了一个’whitelabel’错误页面，如果你遇到一个服务器错误（机器客户端消费的是JSON，其他媒体类型则会看到一个具有正确错误码的合乎情理的响应），那就能在客户端浏览器中看到该页面。你可以设置error.whitelabel.enabled=false来关闭该功能，但通常你想要添加自己的错误页面来取代whitelabel。确切地说，如何实现取决于你使用的模板技术。例如，你正在使用Thymeleaf，你将添加一个error.html模板。如果你正在使用FreeMarker，那你将添加一个error.ftl模板。通常，你需要的只是一个名称为error的View，和/或一个处理/error路径的@Controller。除非你替换了一些默认配置，否则你将在你的ApplicationContext中找到一个BeanNameViewResolver，所以一个id为error的@Bean可能是完成该操作的一个简单方式。详情参考ErrorMvcAutoConfiguration。<br>查看Error Handling章节，了解下如何将处理器（handlers）注册到servlet容器中。</p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"自定义’白标’（whitelabel，可以了解下相关理念）错误页面\"><a href=\"#自定义’白标’（whitelabel，可以了解下相关理念）错误页面\" class=\"headerlink\" title=\"自定义’白标’（whitelabel，可以了解下相关理念）错误页面\"></a>自定义’白标’（whitelabel，可以了解下相关理念）错误页面</h1><p>Spring Boot安装了一个’whitelabel’错误页面，如果你遇到一个服务器错误（机器客户端消费的是JSON，其他媒体类型则会看到一个具有正确错误码的合乎情理的响应），那就能在客户端浏览器中看到该页面。你可以设置error.whitelabel.enabled=false来关闭该功能，但通常你想要添加自己的错误页面来取代whitelabel。确切地说，如何实现取决于你使用的模板技术。例如，你正在使用Thymeleaf，你将添加一个error.html模板。如果你正在使用FreeMarker，那你将添加一个error.ftl模板。通常，你需要的只是一个名称为error的View，和/或一个处理/error路径的@Controller。除非你替换了一些默认配置，否则你将在你的ApplicationContext中找到一个BeanNameViewResolver，所以一个id为error的@Bean可能是完成该操作的一个简单方式。详情参考ErrorMvcAutoConfiguration。<br>查看Error Handling章节，了解下如何将处理器（handlers）注册到servlet容器中。</p>\n"},{"_content":"# spring-boot-logback","source":"_posts/spring-boot/log/logback.md","raw":"# spring-boot-logback","slug":"spring-boot/log/logback","published":1,"date":"2018-11-20T14:55:26.978Z","updated":"2018-11-20T15:27:39.142Z","title":"","comments":1,"layout":"post","photos":[],"link":"","_id":"cjopxmsr7000mwfo85p330j5s","content":"<h1><span id=\"spring-boot-logback\">spring-boot-logback</span></h1>","site":{"data":{}},"excerpt":"","more":"<h1 id=\"spring-boot-logback\"><a href=\"#spring-boot-logback\" class=\"headerlink\" title=\"spring-boot-logback\"></a>spring-boot-logback</h1>"},{"_content":"# 如何在spring boot中加载文件\n>今天有同学在做支付验证问题，本地调试spring boot 用idea集成的jar方式工作，准备上到测试环境打包成war后发现，加载到签名key文件无法读取。然后我们来研究下如何使用spring boot 加载文件。\n\n## jar加载\nspring boot默认加载文件的路径是 \n\n```\n/META-INF/resources/ \n/resources/ \n/static/ \n/public/ \n\n//源码里有\nprivate static final String[] CLASSPATH_RESOURCE_LOCATIONS = {  \n        \"classpath:/META-INF/resources/\", \"classpath:/resources/\",  \n        \"classpath:/static/\", \"classpath:/public/\" };\n        \n//配置里也有\nspring.resources.static-locations=classpath:/META-INF/resources/,classpath:/resources/,classpath:/static/,classpath:/public/ # Locations of static resources. \n\n所有本地的静态资源都配置在了classpath下面了, 而非在webapp下了 \n        \n```\n\n我们可以看到spring boot 已经将公共文件夹，静态，资源\n都定义好了，一般情况下，按照实际情况分配代码就好了\n\n## war加载\n\n\n\n","source":"_posts/spring-boot/file/loadFile.md","raw":"# 如何在spring boot中加载文件\n>今天有同学在做支付验证问题，本地调试spring boot 用idea集成的jar方式工作，准备上到测试环境打包成war后发现，加载到签名key文件无法读取。然后我们来研究下如何使用spring boot 加载文件。\n\n## jar加载\nspring boot默认加载文件的路径是 \n\n```\n/META-INF/resources/ \n/resources/ \n/static/ \n/public/ \n\n//源码里有\nprivate static final String[] CLASSPATH_RESOURCE_LOCATIONS = {  \n        \"classpath:/META-INF/resources/\", \"classpath:/resources/\",  \n        \"classpath:/static/\", \"classpath:/public/\" };\n        \n//配置里也有\nspring.resources.static-locations=classpath:/META-INF/resources/,classpath:/resources/,classpath:/static/,classpath:/public/ # Locations of static resources. \n\n所有本地的静态资源都配置在了classpath下面了, 而非在webapp下了 \n        \n```\n\n我们可以看到spring boot 已经将公共文件夹，静态，资源\n都定义好了，一般情况下，按照实际情况分配代码就好了\n\n## war加载\n\n\n\n","slug":"spring-boot/file/loadFile","published":1,"date":"2018-11-20T14:55:26.977Z","updated":"2018-11-20T15:02:56.645Z","title":"","comments":1,"layout":"post","photos":[],"link":"","_id":"cjopxmsr7000nwfo8e40rgtno","content":"<h1><span id=\"如何在spring-boot中加载文件\">如何在spring boot中加载文件</span></h1><blockquote>\n<p>今天有同学在做支付验证问题，本地调试spring boot 用idea集成的jar方式工作，准备上到测试环境打包成war后发现，加载到签名key文件无法读取。然后我们来研究下如何使用spring boot 加载文件。</p>\n</blockquote>\n<h2><span id=\"jar加载\">jar加载</span></h2><p>spring boot默认加载文件的路径是 </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/META-INF/resources/ </span><br><span class=\"line\">/resources/ </span><br><span class=\"line\">/static/ </span><br><span class=\"line\">/public/ </span><br><span class=\"line\"></span><br><span class=\"line\">//源码里有</span><br><span class=\"line\">private static final String[] CLASSPATH_RESOURCE_LOCATIONS = &#123;  </span><br><span class=\"line\">        &quot;classpath:/META-INF/resources/&quot;, &quot;classpath:/resources/&quot;,  </span><br><span class=\"line\">        &quot;classpath:/static/&quot;, &quot;classpath:/public/&quot; &#125;;</span><br><span class=\"line\">        </span><br><span class=\"line\">//配置里也有</span><br><span class=\"line\">spring.resources.static-locations=classpath:/META-INF/resources/,classpath:/resources/,classpath:/static/,classpath:/public/ # Locations of static resources. </span><br><span class=\"line\"></span><br><span class=\"line\">所有本地的静态资源都配置在了classpath下面了, 而非在webapp下了</span><br></pre></td></tr></table></figure>\n<p>我们可以看到spring boot 已经将公共文件夹，静态，资源<br>都定义好了，一般情况下，按照实际情况分配代码就好了</p>\n<h2><span id=\"war加载\">war加载</span></h2>","site":{"data":{}},"excerpt":"","more":"<h1 id=\"如何在spring-boot中加载文件\"><a href=\"#如何在spring-boot中加载文件\" class=\"headerlink\" title=\"如何在spring boot中加载文件\"></a>如何在spring boot中加载文件</h1><blockquote>\n<p>今天有同学在做支付验证问题，本地调试spring boot 用idea集成的jar方式工作，准备上到测试环境打包成war后发现，加载到签名key文件无法读取。然后我们来研究下如何使用spring boot 加载文件。</p>\n</blockquote>\n<h2 id=\"jar加载\"><a href=\"#jar加载\" class=\"headerlink\" title=\"jar加载\"></a>jar加载</h2><p>spring boot默认加载文件的路径是 </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/META-INF/resources/ </span><br><span class=\"line\">/resources/ </span><br><span class=\"line\">/static/ </span><br><span class=\"line\">/public/ </span><br><span class=\"line\"></span><br><span class=\"line\">//源码里有</span><br><span class=\"line\">private static final String[] CLASSPATH_RESOURCE_LOCATIONS = &#123;  </span><br><span class=\"line\">        &quot;classpath:/META-INF/resources/&quot;, &quot;classpath:/resources/&quot;,  </span><br><span class=\"line\">        &quot;classpath:/static/&quot;, &quot;classpath:/public/&quot; &#125;;</span><br><span class=\"line\">        </span><br><span class=\"line\">//配置里也有</span><br><span class=\"line\">spring.resources.static-locations=classpath:/META-INF/resources/,classpath:/resources/,classpath:/static/,classpath:/public/ # Locations of static resources. </span><br><span class=\"line\"></span><br><span class=\"line\">所有本地的静态资源都配置在了classpath下面了, 而非在webapp下了</span><br></pre></td></tr></table></figure>\n<p>我们可以看到spring boot 已经将公共文件夹，静态，资源<br>都定义好了，一般情况下，按照实际情况分配代码就好了</p>\n<h2 id=\"war加载\"><a href=\"#war加载\" class=\"headerlink\" title=\"war加载\"></a>war加载</h2>"},{"_content":"# \nhttp://www.cnblogs.com/luxiaoxun/p/4035040.html\n\nhttp://www.linuxidc.com/Linux/2015-02/113771.htm\n\n","source":"_posts/spring-boot/mybaits/curd.md","raw":"# \nhttp://www.cnblogs.com/luxiaoxun/p/4035040.html\n\nhttp://www.linuxidc.com/Linux/2015-02/113771.htm\n\n","slug":"spring-boot/mybaits/curd","published":1,"date":"2018-11-20T14:55:26.979Z","updated":"2018-11-20T14:55:26.979Z","title":"","comments":1,"layout":"post","photos":[],"link":"","_id":"cjopxmsr7000owfo80vh497ja","content":"<p>#<br><a href=\"http://www.cnblogs.com/luxiaoxun/p/4035040.html\" target=\"_blank\" rel=\"noopener\">http://www.cnblogs.com/luxiaoxun/p/4035040.html</a></p>\n<p><a href=\"http://www.linuxidc.com/Linux/2015-02/113771.htm\" target=\"_blank\" rel=\"noopener\">http://www.linuxidc.com/Linux/2015-02/113771.htm</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p>#<br><a href=\"http://www.cnblogs.com/luxiaoxun/p/4035040.html\" target=\"_blank\" rel=\"noopener\">http://www.cnblogs.com/luxiaoxun/p/4035040.html</a></p>\n<p><a href=\"http://www.linuxidc.com/Linux/2015-02/113771.htm\" target=\"_blank\" rel=\"noopener\">http://www.linuxidc.com/Linux/2015-02/113771.htm</a></p>\n"},{"_content":"# \nhttp://blog.csdn.net/hupanfeng/article/details/9080545/\n\n","source":"_posts/spring-boot/mybaits/configuration.md","raw":"# \nhttp://blog.csdn.net/hupanfeng/article/details/9080545/\n\n","slug":"spring-boot/mybaits/configuration","published":1,"date":"2018-11-20T14:55:26.979Z","updated":"2018-11-20T14:55:26.979Z","title":"","comments":1,"layout":"post","photos":[],"link":"","_id":"cjopxmsr8000pwfo8kalr7gz8","content":"<p>#<br><a href=\"http://blog.csdn.net/hupanfeng/article/details/9080545/\" target=\"_blank\" rel=\"noopener\">http://blog.csdn.net/hupanfeng/article/details/9080545/</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p>#<br><a href=\"http://blog.csdn.net/hupanfeng/article/details/9080545/\" target=\"_blank\" rel=\"noopener\">http://blog.csdn.net/hupanfeng/article/details/9080545/</a></p>\n"},{"_content":"# \nhttp://www.tuicool.com/articles/RvqEjeR\n\n","source":"_posts/spring-boot/mybaits/datasource.md","raw":"# \nhttp://www.tuicool.com/articles/RvqEjeR\n\n","slug":"spring-boot/mybaits/datasource","published":1,"date":"2018-11-20T14:55:26.979Z","updated":"2018-11-20T14:55:26.979Z","title":"","comments":1,"layout":"post","photos":[],"link":"","_id":"cjopxmsr8000qwfo8fz69kvob","content":"<p>#<br><a href=\"http://www.tuicool.com/articles/RvqEjeR\" target=\"_blank\" rel=\"noopener\">http://www.tuicool.com/articles/RvqEjeR</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p>#<br><a href=\"http://www.tuicool.com/articles/RvqEjeR\" target=\"_blank\" rel=\"noopener\">http://www.tuicool.com/articles/RvqEjeR</a></p>\n"},{"_content":"# ","source":"_posts/spring-boot/mybaits/spring-boot.md","raw":"# ","slug":"spring-boot/mybaits/spring-boot","published":1,"date":"2018-11-20T14:55:26.979Z","updated":"2018-11-20T14:55:26.980Z","title":"","comments":1,"layout":"post","photos":[],"link":"","_id":"cjopxmsr9000rwfo8bs089xdf","content":"<p>#</p>\n","site":{"data":{}},"excerpt":"","more":"<p>#</p>\n"},{"_content":"# spring-boot使用redis\n\n## 导入jar\n\n```\n<dependency>\n     <groupId>org.springframework.boot</groupId>\n     <artifactId>spring-boot-starter-redis</artifactId>\n</dependency>\n```\n\n## 配置\n\n```\n# REDIS (RedisProperties)\n#spring.redis.database=\nspring.redis.host=\nspring.redis.password=\nspring.redis.port=6379 \nspring.redis.pool.max-idle=100 \nspring.redis.pool.min-idle=1\nspring.redis.pool.max-active=1000\nspring.redis.pool.max-wait=-1\nserver.port=8081\n```\n\n# 编写cache管理类\n\n```\npackage com.example;\nimport java.lang.reflect.Method;\nimport org.springframework.cache.CacheManager;\nimport org.springframework.cache.annotation.CachingConfigurerSupport;\nimport org.springframework.cache.annotation.EnableCaching;\nimport org.springframework.cache.interceptor.KeyGenerator;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.data.redis.cache.RedisCacheManager;\nimport org.springframework.data.redis.connection.RedisConnectionFactory;\nimport org.springframework.data.redis.core.RedisTemplate;\nimport org.springframework.data.redis.core.StringRedisTemplate;\nimport org.springframework.data.redis.serializer.Jackson2JsonRedisSerializer;\nimport com.fasterxml.jackson.annotation.JsonAutoDetect;\nimport com.fasterxml.jackson.annotation.PropertyAccessor;\nimport com.fasterxml.jackson.databind.ObjectMapper;\n    /**\n     * 缓存管理（注解用）\n     * @author Administrator\n     *\n     */\n    @Configuration\n    @EnableCaching\n    public class CacheService extends CachingConfigurerSupport {\n            \n        /**\n     * 生成key的策略\n     *\n     * @return\n     */\n    @Bean\n    public KeyGenerator keyGenerator() {\n        return new KeyGenerator() {\n            @Override\n            public Object generate(Object target, Method method, Object... params) {\n                StringBuilder sb = new StringBuilder();\n                sb.append(target.getClass().getName());\n                sb.append(method.getName());\n                for (Object obj : params) {\n                    sb.append(obj.toString());\n                }\n                return sb.toString();\n            }\n        };\n    }\n    \n    /**\n     * 管理缓存\n     *\n     * @param redisTemplate\n     * @return\n     */\n    @SuppressWarnings(\"rawtypes\")\n    @Bean\n    public CacheManager cacheManager(RedisTemplate redisTemplate) {\n        RedisCacheManager rcm = new RedisCacheManager(redisTemplate);\n        //设置缓存过期时间\n        // rcm.setDefaultExpiration(60);//秒\n        //设置value的过期时间\n        Map<String,Long> map=new HashMap();\n        map.put(\"test\",60L);\n        rcm.setExpires(map);\n        return rcm;\n    }\n    \n    /**\n     * RedisTemplate配置\n     * @param factory\n     * @return\n     */\n    @Bean\n    public RedisTemplate<String, String> redisTemplate(RedisConnectionFactory factory) {\n        StringRedisTemplate template = new StringRedisTemplate(factory);\n        Jackson2JsonRedisSerializer jackson2JsonRedisSerializer = new Jackson2JsonRedisSerializer(Object.class);\n        ObjectMapper om = new ObjectMapper();\n        om.setVisibility(PropertyAccessor.ALL, JsonAutoDetect.Visibility.ANY);\n        om.enableDefaultTyping(ObjectMapper.DefaultTyping.NON_FINAL);\n        jackson2JsonRedisSerializer.setObjectMapper(om);\n        template.setValueSerializer(jackson2JsonRedisSerializer);\n        template.afterPropertiesSet();\n        return template;\n    }\n}\n\n```\n\n## 在方法前面加上缓存\n\n```\nRequestMapping(\"/\")\n@Cacheable(value=\"test\")\npublic String getSessionId(HttpSession session){\nredisUtil.set(\"123\", \"测试\");\nSystem.out.println(\"进入了方法\");\nString string= redisUtil.get(\"123\").toString();\nreturn string;\n}\n```\n\n## 附录\n@Cacheable参数\nvalue  指明缓存将被存到什么地方。\nkey     Spring默认使用被@Cacheable注解的方法的签名来作为key\ncondition = \"#age < 25\" 数将指明方法的返回结果是否被缓存。\n\n转载自https://my.oschina.net/wangnian/blog/661389\n\n\n","source":"_posts/spring-boot/redis/README.md","raw":"# spring-boot使用redis\n\n## 导入jar\n\n```\n<dependency>\n     <groupId>org.springframework.boot</groupId>\n     <artifactId>spring-boot-starter-redis</artifactId>\n</dependency>\n```\n\n## 配置\n\n```\n# REDIS (RedisProperties)\n#spring.redis.database=\nspring.redis.host=\nspring.redis.password=\nspring.redis.port=6379 \nspring.redis.pool.max-idle=100 \nspring.redis.pool.min-idle=1\nspring.redis.pool.max-active=1000\nspring.redis.pool.max-wait=-1\nserver.port=8081\n```\n\n# 编写cache管理类\n\n```\npackage com.example;\nimport java.lang.reflect.Method;\nimport org.springframework.cache.CacheManager;\nimport org.springframework.cache.annotation.CachingConfigurerSupport;\nimport org.springframework.cache.annotation.EnableCaching;\nimport org.springframework.cache.interceptor.KeyGenerator;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.data.redis.cache.RedisCacheManager;\nimport org.springframework.data.redis.connection.RedisConnectionFactory;\nimport org.springframework.data.redis.core.RedisTemplate;\nimport org.springframework.data.redis.core.StringRedisTemplate;\nimport org.springframework.data.redis.serializer.Jackson2JsonRedisSerializer;\nimport com.fasterxml.jackson.annotation.JsonAutoDetect;\nimport com.fasterxml.jackson.annotation.PropertyAccessor;\nimport com.fasterxml.jackson.databind.ObjectMapper;\n    /**\n     * 缓存管理（注解用）\n     * @author Administrator\n     *\n     */\n    @Configuration\n    @EnableCaching\n    public class CacheService extends CachingConfigurerSupport {\n            \n        /**\n     * 生成key的策略\n     *\n     * @return\n     */\n    @Bean\n    public KeyGenerator keyGenerator() {\n        return new KeyGenerator() {\n            @Override\n            public Object generate(Object target, Method method, Object... params) {\n                StringBuilder sb = new StringBuilder();\n                sb.append(target.getClass().getName());\n                sb.append(method.getName());\n                for (Object obj : params) {\n                    sb.append(obj.toString());\n                }\n                return sb.toString();\n            }\n        };\n    }\n    \n    /**\n     * 管理缓存\n     *\n     * @param redisTemplate\n     * @return\n     */\n    @SuppressWarnings(\"rawtypes\")\n    @Bean\n    public CacheManager cacheManager(RedisTemplate redisTemplate) {\n        RedisCacheManager rcm = new RedisCacheManager(redisTemplate);\n        //设置缓存过期时间\n        // rcm.setDefaultExpiration(60);//秒\n        //设置value的过期时间\n        Map<String,Long> map=new HashMap();\n        map.put(\"test\",60L);\n        rcm.setExpires(map);\n        return rcm;\n    }\n    \n    /**\n     * RedisTemplate配置\n     * @param factory\n     * @return\n     */\n    @Bean\n    public RedisTemplate<String, String> redisTemplate(RedisConnectionFactory factory) {\n        StringRedisTemplate template = new StringRedisTemplate(factory);\n        Jackson2JsonRedisSerializer jackson2JsonRedisSerializer = new Jackson2JsonRedisSerializer(Object.class);\n        ObjectMapper om = new ObjectMapper();\n        om.setVisibility(PropertyAccessor.ALL, JsonAutoDetect.Visibility.ANY);\n        om.enableDefaultTyping(ObjectMapper.DefaultTyping.NON_FINAL);\n        jackson2JsonRedisSerializer.setObjectMapper(om);\n        template.setValueSerializer(jackson2JsonRedisSerializer);\n        template.afterPropertiesSet();\n        return template;\n    }\n}\n\n```\n\n## 在方法前面加上缓存\n\n```\nRequestMapping(\"/\")\n@Cacheable(value=\"test\")\npublic String getSessionId(HttpSession session){\nredisUtil.set(\"123\", \"测试\");\nSystem.out.println(\"进入了方法\");\nString string= redisUtil.get(\"123\").toString();\nreturn string;\n}\n```\n\n## 附录\n@Cacheable参数\nvalue  指明缓存将被存到什么地方。\nkey     Spring默认使用被@Cacheable注解的方法的签名来作为key\ncondition = \"#age < 25\" 数将指明方法的返回结果是否被缓存。\n\n转载自https://my.oschina.net/wangnian/blog/661389\n\n\n","slug":"spring-boot/redis/README","published":1,"date":"2018-11-20T14:55:26.981Z","updated":"2018-11-20T15:04:12.364Z","title":"","comments":1,"layout":"post","photos":[],"link":"","_id":"cjopxmsr9000swfo826yuxh6x","content":"<h1><span id=\"spring-boot使用redis\">spring-boot使用redis</span></h1><h2><span id=\"导入jar\">导入jar</span></h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;dependency&gt;</span><br><span class=\"line\">     &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class=\"line\">     &lt;artifactId&gt;spring-boot-starter-redis&lt;/artifactId&gt;</span><br><span class=\"line\">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure>\n<h2><span id=\"配置\">配置</span></h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># REDIS (RedisProperties)</span><br><span class=\"line\">#spring.redis.database=</span><br><span class=\"line\">spring.redis.host=</span><br><span class=\"line\">spring.redis.password=</span><br><span class=\"line\">spring.redis.port=6379 </span><br><span class=\"line\">spring.redis.pool.max-idle=100 </span><br><span class=\"line\">spring.redis.pool.min-idle=1</span><br><span class=\"line\">spring.redis.pool.max-active=1000</span><br><span class=\"line\">spring.redis.pool.max-wait=-1</span><br><span class=\"line\">server.port=8081</span><br></pre></td></tr></table></figure>\n<h1><span id=\"编写cache管理类\">编写cache管理类</span></h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">package com.example;</span><br><span class=\"line\">import java.lang.reflect.Method;</span><br><span class=\"line\">import org.springframework.cache.CacheManager;</span><br><span class=\"line\">import org.springframework.cache.annotation.CachingConfigurerSupport;</span><br><span class=\"line\">import org.springframework.cache.annotation.EnableCaching;</span><br><span class=\"line\">import org.springframework.cache.interceptor.KeyGenerator;</span><br><span class=\"line\">import org.springframework.context.annotation.Bean;</span><br><span class=\"line\">import org.springframework.context.annotation.Configuration;</span><br><span class=\"line\">import org.springframework.data.redis.cache.RedisCacheManager;</span><br><span class=\"line\">import org.springframework.data.redis.connection.RedisConnectionFactory;</span><br><span class=\"line\">import org.springframework.data.redis.core.RedisTemplate;</span><br><span class=\"line\">import org.springframework.data.redis.core.StringRedisTemplate;</span><br><span class=\"line\">import org.springframework.data.redis.serializer.Jackson2JsonRedisSerializer;</span><br><span class=\"line\">import com.fasterxml.jackson.annotation.JsonAutoDetect;</span><br><span class=\"line\">import com.fasterxml.jackson.annotation.PropertyAccessor;</span><br><span class=\"line\">import com.fasterxml.jackson.databind.ObjectMapper;</span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * 缓存管理（注解用）</span><br><span class=\"line\">     * @author Administrator</span><br><span class=\"line\">     *</span><br><span class=\"line\">     */</span><br><span class=\"line\">    @Configuration</span><br><span class=\"line\">    @EnableCaching</span><br><span class=\"line\">    public class CacheService extends CachingConfigurerSupport &#123;</span><br><span class=\"line\">            </span><br><span class=\"line\">        /**</span><br><span class=\"line\">     * 生成key的策略</span><br><span class=\"line\">     *</span><br><span class=\"line\">     * @return</span><br><span class=\"line\">     */</span><br><span class=\"line\">    @Bean</span><br><span class=\"line\">    public KeyGenerator keyGenerator() &#123;</span><br><span class=\"line\">        return new KeyGenerator() &#123;</span><br><span class=\"line\">            @Override</span><br><span class=\"line\">            public Object generate(Object target, Method method, Object... params) &#123;</span><br><span class=\"line\">                StringBuilder sb = new StringBuilder();</span><br><span class=\"line\">                sb.append(target.getClass().getName());</span><br><span class=\"line\">                sb.append(method.getName());</span><br><span class=\"line\">                for (Object obj : params) &#123;</span><br><span class=\"line\">                    sb.append(obj.toString());</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                return sb.toString();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * 管理缓存</span><br><span class=\"line\">     *</span><br><span class=\"line\">     * @param redisTemplate</span><br><span class=\"line\">     * @return</span><br><span class=\"line\">     */</span><br><span class=\"line\">    @SuppressWarnings(&quot;rawtypes&quot;)</span><br><span class=\"line\">    @Bean</span><br><span class=\"line\">    public CacheManager cacheManager(RedisTemplate redisTemplate) &#123;</span><br><span class=\"line\">        RedisCacheManager rcm = new RedisCacheManager(redisTemplate);</span><br><span class=\"line\">        //设置缓存过期时间</span><br><span class=\"line\">        // rcm.setDefaultExpiration(60);//秒</span><br><span class=\"line\">        //设置value的过期时间</span><br><span class=\"line\">        Map&lt;String,Long&gt; map=new HashMap();</span><br><span class=\"line\">        map.put(&quot;test&quot;,60L);</span><br><span class=\"line\">        rcm.setExpires(map);</span><br><span class=\"line\">        return rcm;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * RedisTemplate配置</span><br><span class=\"line\">     * @param factory</span><br><span class=\"line\">     * @return</span><br><span class=\"line\">     */</span><br><span class=\"line\">    @Bean</span><br><span class=\"line\">    public RedisTemplate&lt;String, String&gt; redisTemplate(RedisConnectionFactory factory) &#123;</span><br><span class=\"line\">        StringRedisTemplate template = new StringRedisTemplate(factory);</span><br><span class=\"line\">        Jackson2JsonRedisSerializer jackson2JsonRedisSerializer = new Jackson2JsonRedisSerializer(Object.class);</span><br><span class=\"line\">        ObjectMapper om = new ObjectMapper();</span><br><span class=\"line\">        om.setVisibility(PropertyAccessor.ALL, JsonAutoDetect.Visibility.ANY);</span><br><span class=\"line\">        om.enableDefaultTyping(ObjectMapper.DefaultTyping.NON_FINAL);</span><br><span class=\"line\">        jackson2JsonRedisSerializer.setObjectMapper(om);</span><br><span class=\"line\">        template.setValueSerializer(jackson2JsonRedisSerializer);</span><br><span class=\"line\">        template.afterPropertiesSet();</span><br><span class=\"line\">        return template;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2><span id=\"在方法前面加上缓存\">在方法前面加上缓存</span></h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">RequestMapping(&quot;/&quot;)</span><br><span class=\"line\">@Cacheable(value=&quot;test&quot;)</span><br><span class=\"line\">public String getSessionId(HttpSession session)&#123;</span><br><span class=\"line\">redisUtil.set(&quot;123&quot;, &quot;测试&quot;);</span><br><span class=\"line\">System.out.println(&quot;进入了方法&quot;);</span><br><span class=\"line\">String string= redisUtil.get(&quot;123&quot;).toString();</span><br><span class=\"line\">return string;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2><span id=\"附录\">附录</span></h2><p>@Cacheable参数<br>value  指明缓存将被存到什么地方。<br>key     Spring默认使用被@Cacheable注解的方法的签名来作为key<br>condition = “#age &lt; 25” 数将指明方法的返回结果是否被缓存。</p>\n<p>转载自<a href=\"https://my.oschina.net/wangnian/blog/661389\" target=\"_blank\" rel=\"noopener\">https://my.oschina.net/wangnian/blog/661389</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"spring-boot使用redis\"><a href=\"#spring-boot使用redis\" class=\"headerlink\" title=\"spring-boot使用redis\"></a>spring-boot使用redis</h1><h2 id=\"导入jar\"><a href=\"#导入jar\" class=\"headerlink\" title=\"导入jar\"></a>导入jar</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;dependency&gt;</span><br><span class=\"line\">     &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class=\"line\">     &lt;artifactId&gt;spring-boot-starter-redis&lt;/artifactId&gt;</span><br><span class=\"line\">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure>\n<h2 id=\"配置\"><a href=\"#配置\" class=\"headerlink\" title=\"配置\"></a>配置</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># REDIS (RedisProperties)</span><br><span class=\"line\">#spring.redis.database=</span><br><span class=\"line\">spring.redis.host=</span><br><span class=\"line\">spring.redis.password=</span><br><span class=\"line\">spring.redis.port=6379 </span><br><span class=\"line\">spring.redis.pool.max-idle=100 </span><br><span class=\"line\">spring.redis.pool.min-idle=1</span><br><span class=\"line\">spring.redis.pool.max-active=1000</span><br><span class=\"line\">spring.redis.pool.max-wait=-1</span><br><span class=\"line\">server.port=8081</span><br></pre></td></tr></table></figure>\n<h1 id=\"编写cache管理类\"><a href=\"#编写cache管理类\" class=\"headerlink\" title=\"编写cache管理类\"></a>编写cache管理类</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">package com.example;</span><br><span class=\"line\">import java.lang.reflect.Method;</span><br><span class=\"line\">import org.springframework.cache.CacheManager;</span><br><span class=\"line\">import org.springframework.cache.annotation.CachingConfigurerSupport;</span><br><span class=\"line\">import org.springframework.cache.annotation.EnableCaching;</span><br><span class=\"line\">import org.springframework.cache.interceptor.KeyGenerator;</span><br><span class=\"line\">import org.springframework.context.annotation.Bean;</span><br><span class=\"line\">import org.springframework.context.annotation.Configuration;</span><br><span class=\"line\">import org.springframework.data.redis.cache.RedisCacheManager;</span><br><span class=\"line\">import org.springframework.data.redis.connection.RedisConnectionFactory;</span><br><span class=\"line\">import org.springframework.data.redis.core.RedisTemplate;</span><br><span class=\"line\">import org.springframework.data.redis.core.StringRedisTemplate;</span><br><span class=\"line\">import org.springframework.data.redis.serializer.Jackson2JsonRedisSerializer;</span><br><span class=\"line\">import com.fasterxml.jackson.annotation.JsonAutoDetect;</span><br><span class=\"line\">import com.fasterxml.jackson.annotation.PropertyAccessor;</span><br><span class=\"line\">import com.fasterxml.jackson.databind.ObjectMapper;</span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * 缓存管理（注解用）</span><br><span class=\"line\">     * @author Administrator</span><br><span class=\"line\">     *</span><br><span class=\"line\">     */</span><br><span class=\"line\">    @Configuration</span><br><span class=\"line\">    @EnableCaching</span><br><span class=\"line\">    public class CacheService extends CachingConfigurerSupport &#123;</span><br><span class=\"line\">            </span><br><span class=\"line\">        /**</span><br><span class=\"line\">     * 生成key的策略</span><br><span class=\"line\">     *</span><br><span class=\"line\">     * @return</span><br><span class=\"line\">     */</span><br><span class=\"line\">    @Bean</span><br><span class=\"line\">    public KeyGenerator keyGenerator() &#123;</span><br><span class=\"line\">        return new KeyGenerator() &#123;</span><br><span class=\"line\">            @Override</span><br><span class=\"line\">            public Object generate(Object target, Method method, Object... params) &#123;</span><br><span class=\"line\">                StringBuilder sb = new StringBuilder();</span><br><span class=\"line\">                sb.append(target.getClass().getName());</span><br><span class=\"line\">                sb.append(method.getName());</span><br><span class=\"line\">                for (Object obj : params) &#123;</span><br><span class=\"line\">                    sb.append(obj.toString());</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                return sb.toString();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * 管理缓存</span><br><span class=\"line\">     *</span><br><span class=\"line\">     * @param redisTemplate</span><br><span class=\"line\">     * @return</span><br><span class=\"line\">     */</span><br><span class=\"line\">    @SuppressWarnings(&quot;rawtypes&quot;)</span><br><span class=\"line\">    @Bean</span><br><span class=\"line\">    public CacheManager cacheManager(RedisTemplate redisTemplate) &#123;</span><br><span class=\"line\">        RedisCacheManager rcm = new RedisCacheManager(redisTemplate);</span><br><span class=\"line\">        //设置缓存过期时间</span><br><span class=\"line\">        // rcm.setDefaultExpiration(60);//秒</span><br><span class=\"line\">        //设置value的过期时间</span><br><span class=\"line\">        Map&lt;String,Long&gt; map=new HashMap();</span><br><span class=\"line\">        map.put(&quot;test&quot;,60L);</span><br><span class=\"line\">        rcm.setExpires(map);</span><br><span class=\"line\">        return rcm;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * RedisTemplate配置</span><br><span class=\"line\">     * @param factory</span><br><span class=\"line\">     * @return</span><br><span class=\"line\">     */</span><br><span class=\"line\">    @Bean</span><br><span class=\"line\">    public RedisTemplate&lt;String, String&gt; redisTemplate(RedisConnectionFactory factory) &#123;</span><br><span class=\"line\">        StringRedisTemplate template = new StringRedisTemplate(factory);</span><br><span class=\"line\">        Jackson2JsonRedisSerializer jackson2JsonRedisSerializer = new Jackson2JsonRedisSerializer(Object.class);</span><br><span class=\"line\">        ObjectMapper om = new ObjectMapper();</span><br><span class=\"line\">        om.setVisibility(PropertyAccessor.ALL, JsonAutoDetect.Visibility.ANY);</span><br><span class=\"line\">        om.enableDefaultTyping(ObjectMapper.DefaultTyping.NON_FINAL);</span><br><span class=\"line\">        jackson2JsonRedisSerializer.setObjectMapper(om);</span><br><span class=\"line\">        template.setValueSerializer(jackson2JsonRedisSerializer);</span><br><span class=\"line\">        template.afterPropertiesSet();</span><br><span class=\"line\">        return template;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"在方法前面加上缓存\"><a href=\"#在方法前面加上缓存\" class=\"headerlink\" title=\"在方法前面加上缓存\"></a>在方法前面加上缓存</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">RequestMapping(&quot;/&quot;)</span><br><span class=\"line\">@Cacheable(value=&quot;test&quot;)</span><br><span class=\"line\">public String getSessionId(HttpSession session)&#123;</span><br><span class=\"line\">redisUtil.set(&quot;123&quot;, &quot;测试&quot;);</span><br><span class=\"line\">System.out.println(&quot;进入了方法&quot;);</span><br><span class=\"line\">String string= redisUtil.get(&quot;123&quot;).toString();</span><br><span class=\"line\">return string;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"附录\"><a href=\"#附录\" class=\"headerlink\" title=\"附录\"></a>附录</h2><p>@Cacheable参数<br>value  指明缓存将被存到什么地方。<br>key     Spring默认使用被@Cacheable注解的方法的签名来作为key<br>condition = “#age &lt; 25” 数将指明方法的返回结果是否被缓存。</p>\n<p>转载自<a href=\"https://my.oschina.net/wangnian/blog/661389\" target=\"_blank\" rel=\"noopener\">https://my.oschina.net/wangnian/blog/661389</a></p>\n"},{"_content":"# spring-boot 传统部署方式\n\n## war方式\n### 修改你的Application\n产生一个war包，应该提供一个SpringBootServletInitializer子类并覆盖它的configure 方法\n这样让spring framework Servlet 3.0 支持通过你的配置和应用程序产生一个Servlet容器。\n\n>The first step in producing a deployable war file is to provide a SpringBootServletInitializer subclass and override its configure method. This makes use of Spring Framework’s Servlet 3.0 support and allows you to configure your application when it’s launched by the servlet container. Typically, you update your application’s main class to extend SpringBootServletInitializer:\n\n上面的意思就是让你的Application入口文件继承SpringBootServletInitializer\n然后重写下configure \n\n代码如下\n\n```java\n@SpringBootApplication\npublic class Application extends SpringBootServletInitializer {\n\n    @Override\n    protected SpringApplicationBuilder configure(SpringApplicationBuilder application) {\n        return application.sources(Application.class);\n    }\n\n    public static void main(String[] args) throws Exception {\n        SpringApplication.run(Application.class, args);\n    }\n\n}\n\n```\n\n### maven or gradle 配置\n#### maven\n要先依赖spring-boot-starter-parent \n然后加上\n\n```java\n<packaging>war</packaging>\n```\n#### gradle\n\n```java\napply plugin: 'war'\n```\n\n### 去掉tomcat容器\n#### maven\n```\n<dependencies>\n    <!-- … -->\n    <dependency>\n        <groupId>org.springframework.boot</groupId>\n        <artifactId>spring-boot-starter-tomcat</artifactId>\n        <scope>provided</scope>\n    </dependency>\n    <!-- … -->\n</dependencies>\n\n```\n#### gradle\n```\ndependencies {\n    // …\n    providedRuntime 'org.springframework.boot:spring-boot-starter-tomcat'\n    // …\n}\n```\n\n\n### 附录\nhttp://docs.spring.io/spring-boot/docs/current/reference/htmlsingle/#howto-traditional-deployment\n\n\n\n","source":"_posts/spring-boot/war/war.md","raw":"# spring-boot 传统部署方式\n\n## war方式\n### 修改你的Application\n产生一个war包，应该提供一个SpringBootServletInitializer子类并覆盖它的configure 方法\n这样让spring framework Servlet 3.0 支持通过你的配置和应用程序产生一个Servlet容器。\n\n>The first step in producing a deployable war file is to provide a SpringBootServletInitializer subclass and override its configure method. This makes use of Spring Framework’s Servlet 3.0 support and allows you to configure your application when it’s launched by the servlet container. Typically, you update your application’s main class to extend SpringBootServletInitializer:\n\n上面的意思就是让你的Application入口文件继承SpringBootServletInitializer\n然后重写下configure \n\n代码如下\n\n```java\n@SpringBootApplication\npublic class Application extends SpringBootServletInitializer {\n\n    @Override\n    protected SpringApplicationBuilder configure(SpringApplicationBuilder application) {\n        return application.sources(Application.class);\n    }\n\n    public static void main(String[] args) throws Exception {\n        SpringApplication.run(Application.class, args);\n    }\n\n}\n\n```\n\n### maven or gradle 配置\n#### maven\n要先依赖spring-boot-starter-parent \n然后加上\n\n```java\n<packaging>war</packaging>\n```\n#### gradle\n\n```java\napply plugin: 'war'\n```\n\n### 去掉tomcat容器\n#### maven\n```\n<dependencies>\n    <!-- … -->\n    <dependency>\n        <groupId>org.springframework.boot</groupId>\n        <artifactId>spring-boot-starter-tomcat</artifactId>\n        <scope>provided</scope>\n    </dependency>\n    <!-- … -->\n</dependencies>\n\n```\n#### gradle\n```\ndependencies {\n    // …\n    providedRuntime 'org.springframework.boot:spring-boot-starter-tomcat'\n    // …\n}\n```\n\n\n### 附录\nhttp://docs.spring.io/spring-boot/docs/current/reference/htmlsingle/#howto-traditional-deployment\n\n\n\n","slug":"spring-boot/war/war","published":1,"date":"2018-11-20T14:55:26.981Z","updated":"2018-11-20T15:02:21.300Z","title":"","comments":1,"layout":"post","photos":[],"link":"","_id":"cjopxmsr9000twfo8am1rv44m","content":"<h1><span id=\"spring-boot-传统部署方式\">spring-boot 传统部署方式</span></h1><h2><span id=\"war方式\">war方式</span></h2><h3><span id=\"修改你的application\">修改你的Application</span></h3><p>产生一个war包，应该提供一个SpringBootServletInitializer子类并覆盖它的configure 方法<br>这样让spring framework Servlet 3.0 支持通过你的配置和应用程序产生一个Servlet容器。</p>\n<blockquote>\n<p>The first step in producing a deployable war file is to provide a SpringBootServletInitializer subclass and override its configure method. This makes use of Spring Framework’s Servlet 3.0 support and allows you to configure your application when it’s launched by the servlet container. Typically, you update your application’s main class to extend SpringBootServletInitializer:</p>\n</blockquote>\n<p>上面的意思就是让你的Application入口文件继承SpringBootServletInitializer<br>然后重写下configure </p>\n<p>代码如下</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@SpringBootApplication</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Application</span> <span class=\"keyword\">extends</span> <span class=\"title\">SpringBootServletInitializer</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> SpringApplicationBuilder <span class=\"title\">configure</span><span class=\"params\">(SpringApplicationBuilder application)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> application.sources(Application.class);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\">        SpringApplication.run(Application.class, args);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3><span id=\"maven-or-gradle-配置\">maven or gradle 配置</span></h3><h4><span id=\"maven\">maven</span></h4><p>要先依赖spring-boot-starter-parent<br>然后加上</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;packaging&gt;war&lt;/packaging&gt;</span><br></pre></td></tr></table></figure>\n<h4><span id=\"gradle\">gradle</span></h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">apply plugin: <span class=\"string\">'war'</span></span><br></pre></td></tr></table></figure>\n<h3><span id=\"去掉tomcat容器\">去掉tomcat容器</span></h3><h4><span id=\"maven\">maven</span></h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;dependencies&gt;</span><br><span class=\"line\">    &lt;!-- … --&gt;</span><br><span class=\"line\">    &lt;dependency&gt;</span><br><span class=\"line\">        &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class=\"line\">        &lt;artifactId&gt;spring-boot-starter-tomcat&lt;/artifactId&gt;</span><br><span class=\"line\">        &lt;scope&gt;provided&lt;/scope&gt;</span><br><span class=\"line\">    &lt;/dependency&gt;</span><br><span class=\"line\">    &lt;!-- … --&gt;</span><br><span class=\"line\">&lt;/dependencies&gt;</span><br></pre></td></tr></table></figure>\n<h4><span id=\"gradle\">gradle</span></h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">dependencies &#123;</span><br><span class=\"line\">    // …</span><br><span class=\"line\">    providedRuntime &apos;org.springframework.boot:spring-boot-starter-tomcat&apos;</span><br><span class=\"line\">    // …</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3><span id=\"附录\">附录</span></h3><p><a href=\"http://docs.spring.io/spring-boot/docs/current/reference/htmlsingle/#howto-traditional-deployment\" target=\"_blank\" rel=\"noopener\">http://docs.spring.io/spring-boot/docs/current/reference/htmlsingle/#howto-traditional-deployment</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"spring-boot-传统部署方式\"><a href=\"#spring-boot-传统部署方式\" class=\"headerlink\" title=\"spring-boot 传统部署方式\"></a>spring-boot 传统部署方式</h1><h2 id=\"war方式\"><a href=\"#war方式\" class=\"headerlink\" title=\"war方式\"></a>war方式</h2><h3 id=\"修改你的Application\"><a href=\"#修改你的Application\" class=\"headerlink\" title=\"修改你的Application\"></a>修改你的Application</h3><p>产生一个war包，应该提供一个SpringBootServletInitializer子类并覆盖它的configure 方法<br>这样让spring framework Servlet 3.0 支持通过你的配置和应用程序产生一个Servlet容器。</p>\n<blockquote>\n<p>The first step in producing a deployable war file is to provide a SpringBootServletInitializer subclass and override its configure method. This makes use of Spring Framework’s Servlet 3.0 support and allows you to configure your application when it’s launched by the servlet container. Typically, you update your application’s main class to extend SpringBootServletInitializer:</p>\n</blockquote>\n<p>上面的意思就是让你的Application入口文件继承SpringBootServletInitializer<br>然后重写下configure </p>\n<p>代码如下</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@SpringBootApplication</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Application</span> <span class=\"keyword\">extends</span> <span class=\"title\">SpringBootServletInitializer</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> SpringApplicationBuilder <span class=\"title\">configure</span><span class=\"params\">(SpringApplicationBuilder application)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> application.sources(Application.class);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\">        SpringApplication.run(Application.class, args);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"maven-or-gradle-配置\"><a href=\"#maven-or-gradle-配置\" class=\"headerlink\" title=\"maven or gradle 配置\"></a>maven or gradle 配置</h3><h4 id=\"maven\"><a href=\"#maven\" class=\"headerlink\" title=\"maven\"></a>maven</h4><p>要先依赖spring-boot-starter-parent<br>然后加上</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;packaging&gt;war&lt;/packaging&gt;</span><br></pre></td></tr></table></figure>\n<h4 id=\"gradle\"><a href=\"#gradle\" class=\"headerlink\" title=\"gradle\"></a>gradle</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">apply plugin: <span class=\"string\">'war'</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"去掉tomcat容器\"><a href=\"#去掉tomcat容器\" class=\"headerlink\" title=\"去掉tomcat容器\"></a>去掉tomcat容器</h3><h4 id=\"maven-1\"><a href=\"#maven-1\" class=\"headerlink\" title=\"maven\"></a>maven</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;dependencies&gt;</span><br><span class=\"line\">    &lt;!-- … --&gt;</span><br><span class=\"line\">    &lt;dependency&gt;</span><br><span class=\"line\">        &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class=\"line\">        &lt;artifactId&gt;spring-boot-starter-tomcat&lt;/artifactId&gt;</span><br><span class=\"line\">        &lt;scope&gt;provided&lt;/scope&gt;</span><br><span class=\"line\">    &lt;/dependency&gt;</span><br><span class=\"line\">    &lt;!-- … --&gt;</span><br><span class=\"line\">&lt;/dependencies&gt;</span><br></pre></td></tr></table></figure>\n<h4 id=\"gradle-1\"><a href=\"#gradle-1\" class=\"headerlink\" title=\"gradle\"></a>gradle</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">dependencies &#123;</span><br><span class=\"line\">    // …</span><br><span class=\"line\">    providedRuntime &apos;org.springframework.boot:spring-boot-starter-tomcat&apos;</span><br><span class=\"line\">    // …</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"附录\"><a href=\"#附录\" class=\"headerlink\" title=\"附录\"></a>附录</h3><p><a href=\"http://docs.spring.io/spring-boot/docs/current/reference/htmlsingle/#howto-traditional-deployment\" target=\"_blank\" rel=\"noopener\">http://docs.spring.io/spring-boot/docs/current/reference/htmlsingle/#howto-traditional-deployment</a></p>\n"},{"_content":"# ErrorController\n\n背景\n\nSpringboot 默认把异常的处理集中到一个ModelAndView中了，但项目的实际过程中，这样做，并不能满足我们的要求。具体的自定义异常的处理，参看以下\n\n在Spring MVC异常处理详解中，介绍了Spring MVC的异常处理体系，本文将讲解在此基础上Spring Boot为我们做了哪些工作。下图列出了Spring Boot中跟MVC异常处理相关的类。\n\n![alt](imgs/SpringBootWebExceptionResolver.png)\n\n\nSpring Boot在启动过程中会根据当前环境进行AutoConfiguration，其中跟MVC错误处理相关的配置内容，在ErrorMvcAutoConfiguration这个类中。以下会分块介绍这个类里面的配置。\n\n## 在Servlet容器中添加了一个默认的错误页面\n因为ErrorMvcAutoConfiguration类实现了EmbeddedServletContainerCustomizer接口，所以可以通过override customize方法来定制Servlet容器。以下代码摘自ErrorMvcAutoConfiguration：\n\n```java\n@Value(\"${error.path:/error}\")\nprivate String errorPath = \"/error\";\n\n@Override\npublic void customize(ConfigurableEmbeddedServletContainer container) {\n    container.addErrorPages(new ErrorPage(this.properties.getServletPrefix()\n        + this.errorPath));\n}\n```\n\n可以看到ErrorMvcAutoConfiguration在容器中，添加了一个错误页面/error。因为这项配置的存在，如果Spring MVC在处理过程抛出异常到Servlet容器，容器会定向到这个错误页面/error。\n\n那么我们有什么可以配置的呢？\n\n我们可以配置错误页面的url，/error是默认值，我们可以再application.properties中通过设置error.path的值来配置该页面的url；\n我们可以提供一个自定义的EmbeddedServletContainerCustomizer，添加更多的错误页面，比如对不同的http status code，使用不同的错误处理页面。就像下面这段代码一样：\n\n```java\n@Bean\npublic EmbeddedServletContainerCustomizer containerCustomizer() {\n    return new EmbeddedServletContainerCustomizer() {\n        @Override\n        public void customize(ConfigurableEmbeddedServletContainer container) {\n            container.addErrorPages(new ErrorPage(HttpStatus.NOT_FOUND, \"/404\"));\n            container.addErrorPages(new ErrorPage(HttpStatus.INTERNAL_SERVER_ERROR, \"/500\"));\n        }\n    };\n}\n```\n\n\n###定义了ErrorAttributes接口，并默认配置了一个DefaultErrorAttributes Bean\n\n以下代码摘自ErrorMvcAutoConfiguration：\n\n```java\n@Bean\n@ConditionalOnMissingBean(value = ErrorAttributes.class, search = SearchStrategy.CURRENT)\npublic DefaultErrorAttributes errorAttributes() {\n    return new DefaultErrorAttributes();\n}\n```\n\n以下代码摘自DefaultErrorAttributes, ErrorAttributes, HandlerExceptionResolver：\n\n```java\n@Order(Ordered.HIGHEST_PRECEDENCE)\npublic class DefaultErrorAttributes implements ErrorAttributes, HandlerExceptionResolver,\n    Ordered {\n    //篇幅原因，忽略类的实现代码。\n}\n\npublic interface ErrorAttributes {\n    public Map<String, Object> getErrorAttributes(RequestAttributes requestAttributes,\n        boolean includeStackTrace);\n    public Throwable getError(RequestAttributes requestAttributes);\n}\n\npublic interface HandlerExceptionResolver {\n    ModelAndView resolveException(\n        HttpServletRequest request, HttpServletResponse response, Object handler, Exception ex);\n}\n```\n\n这个DefaultErrorAttributes有什么用呢？主要有两个作用:\n\n1. 实现了ErrorAttributes接口，具备提供Error Attributes的能力，当处理/error错误页面时，需要从该bean中读取错误信息以供返回；\n2. 实现了HandlerExceptionResolver接口并具有最高优先级，即DispatcherServlet在doDispatch过程中有异常抛出时，先由DefaultErrorAttributes处理。从下面代码中可以发现，DefaultErrorAttributes在处理过程中，是讲ErrorAttributes保存到了request中。事实上，这是DefaultErrorAttributes能够在后面返回Error Attributes的原因，实现HandlerExceptionResolver接口，是DefaultErrorAttributes实现ErrorAttributes接口的手段。\n\n```java\n@Override\npublic ModelAndView resolveException(HttpServletRequest request,\n    HttpServletResponse response, Object handler, Exception ex) {\n    storeErrorAttributes(request, ex);\n    return null;\n}\n```\n\n我们有什么可以配置的呢？\n\n1、我们可以继承DefaultErrorAttributes，修改Error Attributes，比如下面这段代码，去掉了默认存在的error和exception这两个字段，以隐藏敏感信息。\n\n```java\n@Bean\npublic DefaultErrorAttributes errorAttributes() {\n    return new DefaultErrorAttributes() {\n        @Override\n        public Map<String, Object> getErrorAttributes (RequestAttributes requestAttributes,\n        boolean includeStackTrace){\n            Map<String, Object> errorAttributes = super.getErrorAttributes(requestAttributes, includeStackTrace);\n            errorAttributes.remove(\"error\");\n            errorAttributes.remove(\"exception\");\n            return errorAttributes;\n        }\n    };\n}\n```\n\n1. 我们可以自己实现ErrorAttributes接口，实现自己的Error Attributes方案, 只要配置一个类型为ErrorAttributes的bean，默认的DefaultErrorAttributes就不会被配置。\n\n###提供并配置了ErrorController和ErrorView\nErrorController和ErrorView提供了对错误页面/error的支持。ErrorMvcAutoConfiguration默认配置了BasicErrorController和WhiteLabelErrorView，以下代码摘自ErrorMvcAutoConfiguration:\n\n```java\n@Bean\n@ConditionalOnMissingBean(value = ErrorController.class, search = SearchStrategy.CURRENT)\npublic BasicErrorController basicErrorController(ErrorAttributes errorAttributes) {\n    return new BasicErrorController(errorAttributes);\n}\n\n@Configuration\n@ConditionalOnProperty(prefix = \"error.whitelabel\", name = \"enabled\", matchIfMissing = true)\n@Conditional(ErrorTemplateMissingCondition.class)\nprotected static class WhitelabelErrorViewConfiguration {\n    private final SpelView defaultErrorView = new SpelView(\n            \"<html><body><h1>Whitelabel Error Page</h1>\"\n                    + \"<p>This application has no explicit mapping for /error, so you are seeing this as a fallback.</p>\"\n                    + \"<div id='created'>${timestamp}</div>\"\n                    + \"<div>There was an unexpected error (type=${error}, status=${status}).</div>\"\n                    + \"<div>${message}</div></body></html>\");\n\n    @Bean(name = \"error\")\n    @ConditionalOnMissingBean(name = \"error\")\n    public View defaultErrorView() {\n        return this.defaultErrorView;\n    }\n\n    // If the user adds @EnableWebMvc then the bean name view resolver from\n    // WebMvcAutoConfiguration disappears, so add it back in to avoid disappointment.\n    @Bean\n    @ConditionalOnMissingBean(BeanNameViewResolver.class)\n    public BeanNameViewResolver beanNameViewResolver() {\n        BeanNameViewResolver resolver = new BeanNameViewResolver();\n        resolver.setOrder(Ordered.LOWEST_PRECEDENCE - 10);\n        return resolver;\n    }\n}\n```\n\nErrorController根据Accept头的内容，输出不同格式的错误响应。比如针对浏览器的请求生成html页面，针对其它请求生成json格式的返回。代码如下：\n\n```java\n@RequestMapping(value = \"${error.path:/error}\", produces = \"text/html\")\npublic ModelAndView errorHtml(HttpServletRequest request) {\n    return new ModelAndView(\"error\", getErrorAttributes(request, false));\n}\n\n@RequestMapping(value = \"${error.path:/error}\")\n@ResponseBody\npublic ResponseEntity<Map<String, Object>> error(HttpServletRequest request) {\n    Map<String, Object> body = getErrorAttributes(request, getTraceParameter(request));\n    HttpStatus status = getStatus(request);\n    return new ResponseEntity<Map<String, Object>>(body, status);\n}\n```\n\nWhitelabelErrorView则提供了一个默认的白板错误页面。\n\n我们有什么可以配置的呢？\n\n我们可以提供自己的名字为error的view，以替换掉默认的白板页面，提供自己想要的样式。\n我们可以继承BasicErrorController或者干脆自己实现ErrorController接口，用来响应/error这个错误页面请求，可以提供更多类型的错误格式等。\n总结\nSpring Boot提供了默认的统一错误页面，这是Spring MVC没有提供的。在理解了Spring Boot提供的错误处理相关内容之后，我们可以方便的定义自己的错误返回的格式和内容。不过，如果要实现统一的REST API接口的出错响应，就如这篇文章里的这样，还是要做不少工作的。\n\n","source":"_posts/spring-boot/exception/exception.md","raw":"# ErrorController\n\n背景\n\nSpringboot 默认把异常的处理集中到一个ModelAndView中了，但项目的实际过程中，这样做，并不能满足我们的要求。具体的自定义异常的处理，参看以下\n\n在Spring MVC异常处理详解中，介绍了Spring MVC的异常处理体系，本文将讲解在此基础上Spring Boot为我们做了哪些工作。下图列出了Spring Boot中跟MVC异常处理相关的类。\n\n![alt](imgs/SpringBootWebExceptionResolver.png)\n\n\nSpring Boot在启动过程中会根据当前环境进行AutoConfiguration，其中跟MVC错误处理相关的配置内容，在ErrorMvcAutoConfiguration这个类中。以下会分块介绍这个类里面的配置。\n\n## 在Servlet容器中添加了一个默认的错误页面\n因为ErrorMvcAutoConfiguration类实现了EmbeddedServletContainerCustomizer接口，所以可以通过override customize方法来定制Servlet容器。以下代码摘自ErrorMvcAutoConfiguration：\n\n```java\n@Value(\"${error.path:/error}\")\nprivate String errorPath = \"/error\";\n\n@Override\npublic void customize(ConfigurableEmbeddedServletContainer container) {\n    container.addErrorPages(new ErrorPage(this.properties.getServletPrefix()\n        + this.errorPath));\n}\n```\n\n可以看到ErrorMvcAutoConfiguration在容器中，添加了一个错误页面/error。因为这项配置的存在，如果Spring MVC在处理过程抛出异常到Servlet容器，容器会定向到这个错误页面/error。\n\n那么我们有什么可以配置的呢？\n\n我们可以配置错误页面的url，/error是默认值，我们可以再application.properties中通过设置error.path的值来配置该页面的url；\n我们可以提供一个自定义的EmbeddedServletContainerCustomizer，添加更多的错误页面，比如对不同的http status code，使用不同的错误处理页面。就像下面这段代码一样：\n\n```java\n@Bean\npublic EmbeddedServletContainerCustomizer containerCustomizer() {\n    return new EmbeddedServletContainerCustomizer() {\n        @Override\n        public void customize(ConfigurableEmbeddedServletContainer container) {\n            container.addErrorPages(new ErrorPage(HttpStatus.NOT_FOUND, \"/404\"));\n            container.addErrorPages(new ErrorPage(HttpStatus.INTERNAL_SERVER_ERROR, \"/500\"));\n        }\n    };\n}\n```\n\n\n###定义了ErrorAttributes接口，并默认配置了一个DefaultErrorAttributes Bean\n\n以下代码摘自ErrorMvcAutoConfiguration：\n\n```java\n@Bean\n@ConditionalOnMissingBean(value = ErrorAttributes.class, search = SearchStrategy.CURRENT)\npublic DefaultErrorAttributes errorAttributes() {\n    return new DefaultErrorAttributes();\n}\n```\n\n以下代码摘自DefaultErrorAttributes, ErrorAttributes, HandlerExceptionResolver：\n\n```java\n@Order(Ordered.HIGHEST_PRECEDENCE)\npublic class DefaultErrorAttributes implements ErrorAttributes, HandlerExceptionResolver,\n    Ordered {\n    //篇幅原因，忽略类的实现代码。\n}\n\npublic interface ErrorAttributes {\n    public Map<String, Object> getErrorAttributes(RequestAttributes requestAttributes,\n        boolean includeStackTrace);\n    public Throwable getError(RequestAttributes requestAttributes);\n}\n\npublic interface HandlerExceptionResolver {\n    ModelAndView resolveException(\n        HttpServletRequest request, HttpServletResponse response, Object handler, Exception ex);\n}\n```\n\n这个DefaultErrorAttributes有什么用呢？主要有两个作用:\n\n1. 实现了ErrorAttributes接口，具备提供Error Attributes的能力，当处理/error错误页面时，需要从该bean中读取错误信息以供返回；\n2. 实现了HandlerExceptionResolver接口并具有最高优先级，即DispatcherServlet在doDispatch过程中有异常抛出时，先由DefaultErrorAttributes处理。从下面代码中可以发现，DefaultErrorAttributes在处理过程中，是讲ErrorAttributes保存到了request中。事实上，这是DefaultErrorAttributes能够在后面返回Error Attributes的原因，实现HandlerExceptionResolver接口，是DefaultErrorAttributes实现ErrorAttributes接口的手段。\n\n```java\n@Override\npublic ModelAndView resolveException(HttpServletRequest request,\n    HttpServletResponse response, Object handler, Exception ex) {\n    storeErrorAttributes(request, ex);\n    return null;\n}\n```\n\n我们有什么可以配置的呢？\n\n1、我们可以继承DefaultErrorAttributes，修改Error Attributes，比如下面这段代码，去掉了默认存在的error和exception这两个字段，以隐藏敏感信息。\n\n```java\n@Bean\npublic DefaultErrorAttributes errorAttributes() {\n    return new DefaultErrorAttributes() {\n        @Override\n        public Map<String, Object> getErrorAttributes (RequestAttributes requestAttributes,\n        boolean includeStackTrace){\n            Map<String, Object> errorAttributes = super.getErrorAttributes(requestAttributes, includeStackTrace);\n            errorAttributes.remove(\"error\");\n            errorAttributes.remove(\"exception\");\n            return errorAttributes;\n        }\n    };\n}\n```\n\n1. 我们可以自己实现ErrorAttributes接口，实现自己的Error Attributes方案, 只要配置一个类型为ErrorAttributes的bean，默认的DefaultErrorAttributes就不会被配置。\n\n###提供并配置了ErrorController和ErrorView\nErrorController和ErrorView提供了对错误页面/error的支持。ErrorMvcAutoConfiguration默认配置了BasicErrorController和WhiteLabelErrorView，以下代码摘自ErrorMvcAutoConfiguration:\n\n```java\n@Bean\n@ConditionalOnMissingBean(value = ErrorController.class, search = SearchStrategy.CURRENT)\npublic BasicErrorController basicErrorController(ErrorAttributes errorAttributes) {\n    return new BasicErrorController(errorAttributes);\n}\n\n@Configuration\n@ConditionalOnProperty(prefix = \"error.whitelabel\", name = \"enabled\", matchIfMissing = true)\n@Conditional(ErrorTemplateMissingCondition.class)\nprotected static class WhitelabelErrorViewConfiguration {\n    private final SpelView defaultErrorView = new SpelView(\n            \"<html><body><h1>Whitelabel Error Page</h1>\"\n                    + \"<p>This application has no explicit mapping for /error, so you are seeing this as a fallback.</p>\"\n                    + \"<div id='created'>${timestamp}</div>\"\n                    + \"<div>There was an unexpected error (type=${error}, status=${status}).</div>\"\n                    + \"<div>${message}</div></body></html>\");\n\n    @Bean(name = \"error\")\n    @ConditionalOnMissingBean(name = \"error\")\n    public View defaultErrorView() {\n        return this.defaultErrorView;\n    }\n\n    // If the user adds @EnableWebMvc then the bean name view resolver from\n    // WebMvcAutoConfiguration disappears, so add it back in to avoid disappointment.\n    @Bean\n    @ConditionalOnMissingBean(BeanNameViewResolver.class)\n    public BeanNameViewResolver beanNameViewResolver() {\n        BeanNameViewResolver resolver = new BeanNameViewResolver();\n        resolver.setOrder(Ordered.LOWEST_PRECEDENCE - 10);\n        return resolver;\n    }\n}\n```\n\nErrorController根据Accept头的内容，输出不同格式的错误响应。比如针对浏览器的请求生成html页面，针对其它请求生成json格式的返回。代码如下：\n\n```java\n@RequestMapping(value = \"${error.path:/error}\", produces = \"text/html\")\npublic ModelAndView errorHtml(HttpServletRequest request) {\n    return new ModelAndView(\"error\", getErrorAttributes(request, false));\n}\n\n@RequestMapping(value = \"${error.path:/error}\")\n@ResponseBody\npublic ResponseEntity<Map<String, Object>> error(HttpServletRequest request) {\n    Map<String, Object> body = getErrorAttributes(request, getTraceParameter(request));\n    HttpStatus status = getStatus(request);\n    return new ResponseEntity<Map<String, Object>>(body, status);\n}\n```\n\nWhitelabelErrorView则提供了一个默认的白板错误页面。\n\n我们有什么可以配置的呢？\n\n我们可以提供自己的名字为error的view，以替换掉默认的白板页面，提供自己想要的样式。\n我们可以继承BasicErrorController或者干脆自己实现ErrorController接口，用来响应/error这个错误页面请求，可以提供更多类型的错误格式等。\n总结\nSpring Boot提供了默认的统一错误页面，这是Spring MVC没有提供的。在理解了Spring Boot提供的错误处理相关内容之后，我们可以方便的定义自己的错误返回的格式和内容。不过，如果要实现统一的REST API接口的出错响应，就如这篇文章里的这样，还是要做不少工作的。\n\n","slug":"spring-boot/exception/exception","published":1,"date":"2018-11-20T14:55:26.977Z","updated":"2018-11-20T15:03:07.149Z","title":"","comments":1,"layout":"post","photos":[],"link":"","_id":"cjopxmsra000uwfo8hrce5i48","content":"<h1><span id=\"errorcontroller\">ErrorController</span></h1><p>背景</p>\n<p>Springboot 默认把异常的处理集中到一个ModelAndView中了，但项目的实际过程中，这样做，并不能满足我们的要求。具体的自定义异常的处理，参看以下</p>\n<p>在Spring MVC异常处理详解中，介绍了Spring MVC的异常处理体系，本文将讲解在此基础上Spring Boot为我们做了哪些工作。下图列出了Spring Boot中跟MVC异常处理相关的类。</p>\n<p><img src=\"imgs/SpringBootWebExceptionResolver.png\" alt=\"alt\"></p>\n<p>Spring Boot在启动过程中会根据当前环境进行AutoConfiguration，其中跟MVC错误处理相关的配置内容，在ErrorMvcAutoConfiguration这个类中。以下会分块介绍这个类里面的配置。</p>\n<h2><span id=\"在servlet容器中添加了一个默认的错误页面\">在Servlet容器中添加了一个默认的错误页面</span></h2><p>因为ErrorMvcAutoConfiguration类实现了EmbeddedServletContainerCustomizer接口，所以可以通过override customize方法来定制Servlet容器。以下代码摘自ErrorMvcAutoConfiguration：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Value</span>(<span class=\"string\">\"$&#123;error.path:/error&#125;\"</span>)</span><br><span class=\"line\"><span class=\"keyword\">private</span> String errorPath = <span class=\"string\">\"/error\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">customize</span><span class=\"params\">(ConfigurableEmbeddedServletContainer container)</span> </span>&#123;</span><br><span class=\"line\">    container.addErrorPages(<span class=\"keyword\">new</span> ErrorPage(<span class=\"keyword\">this</span>.properties.getServletPrefix()</span><br><span class=\"line\">        + <span class=\"keyword\">this</span>.errorPath));</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>可以看到ErrorMvcAutoConfiguration在容器中，添加了一个错误页面/error。因为这项配置的存在，如果Spring MVC在处理过程抛出异常到Servlet容器，容器会定向到这个错误页面/error。</p>\n<p>那么我们有什么可以配置的呢？</p>\n<p>我们可以配置错误页面的url，/error是默认值，我们可以再application.properties中通过设置error.path的值来配置该页面的url；<br>我们可以提供一个自定义的EmbeddedServletContainerCustomizer，添加更多的错误页面，比如对不同的http status code，使用不同的错误处理页面。就像下面这段代码一样：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Bean</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> EmbeddedServletContainerCustomizer <span class=\"title\">containerCustomizer</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> EmbeddedServletContainerCustomizer() &#123;</span><br><span class=\"line\">        <span class=\"meta\">@Override</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">customize</span><span class=\"params\">(ConfigurableEmbeddedServletContainer container)</span> </span>&#123;</span><br><span class=\"line\">            container.addErrorPages(<span class=\"keyword\">new</span> ErrorPage(HttpStatus.NOT_FOUND, <span class=\"string\">\"/404\"</span>));</span><br><span class=\"line\">            container.addErrorPages(<span class=\"keyword\">new</span> ErrorPage(HttpStatus.INTERNAL_SERVER_ERROR, <span class=\"string\">\"/500\"</span>));</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>###定义了ErrorAttributes接口，并默认配置了一个DefaultErrorAttributes Bean</p>\n<p>以下代码摘自ErrorMvcAutoConfiguration：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Bean</span></span><br><span class=\"line\"><span class=\"meta\">@ConditionalOnMissingBean</span>(value = ErrorAttributes.class, search = SearchStrategy.CURRENT)</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> DefaultErrorAttributes <span class=\"title\">errorAttributes</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> DefaultErrorAttributes();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>以下代码摘自DefaultErrorAttributes, ErrorAttributes, HandlerExceptionResolver：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Order</span>(Ordered.HIGHEST_PRECEDENCE)</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">DefaultErrorAttributes</span> <span class=\"keyword\">implements</span> <span class=\"title\">ErrorAttributes</span>, <span class=\"title\">HandlerExceptionResolver</span>,</span></span><br><span class=\"line\"><span class=\"class\">    <span class=\"title\">Ordered</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//篇幅原因，忽略类的实现代码。</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">ErrorAttributes</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Map&lt;String, Object&gt; <span class=\"title\">getErrorAttributes</span><span class=\"params\">(RequestAttributes requestAttributes,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">        <span class=\"keyword\">boolean</span> includeStackTrace)</span></span>;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Throwable <span class=\"title\">getError</span><span class=\"params\">(RequestAttributes requestAttributes)</span></span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">HandlerExceptionResolver</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\">ModelAndView <span class=\"title\">resolveException</span><span class=\"params\">(</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">        HttpServletRequest request, HttpServletResponse response, Object handler, Exception ex)</span></span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这个DefaultErrorAttributes有什么用呢？主要有两个作用:</p>\n<ol>\n<li>实现了ErrorAttributes接口，具备提供Error Attributes的能力，当处理/error错误页面时，需要从该bean中读取错误信息以供返回；</li>\n<li>实现了HandlerExceptionResolver接口并具有最高优先级，即DispatcherServlet在doDispatch过程中有异常抛出时，先由DefaultErrorAttributes处理。从下面代码中可以发现，DefaultErrorAttributes在处理过程中，是讲ErrorAttributes保存到了request中。事实上，这是DefaultErrorAttributes能够在后面返回Error Attributes的原因，实现HandlerExceptionResolver接口，是DefaultErrorAttributes实现ErrorAttributes接口的手段。</li>\n</ol>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> ModelAndView <span class=\"title\">resolveException</span><span class=\"params\">(HttpServletRequest request,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">    HttpServletResponse response, Object handler, Exception ex)</span> </span>&#123;</span><br><span class=\"line\">    storeErrorAttributes(request, ex);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>我们有什么可以配置的呢？</p>\n<p>1、我们可以继承DefaultErrorAttributes，修改Error Attributes，比如下面这段代码，去掉了默认存在的error和exception这两个字段，以隐藏敏感信息。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Bean</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> DefaultErrorAttributes <span class=\"title\">errorAttributes</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> DefaultErrorAttributes() &#123;</span><br><span class=\"line\">        <span class=\"meta\">@Override</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> Map&lt;String, Object&gt; <span class=\"title\">getErrorAttributes</span> <span class=\"params\">(RequestAttributes requestAttributes,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">        <span class=\"keyword\">boolean</span> includeStackTrace)</span></span>&#123;</span><br><span class=\"line\">            Map&lt;String, Object&gt; errorAttributes = <span class=\"keyword\">super</span>.getErrorAttributes(requestAttributes, includeStackTrace);</span><br><span class=\"line\">            errorAttributes.remove(<span class=\"string\">\"error\"</span>);</span><br><span class=\"line\">            errorAttributes.remove(<span class=\"string\">\"exception\"</span>);</span><br><span class=\"line\">            <span class=\"keyword\">return</span> errorAttributes;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ol>\n<li>我们可以自己实现ErrorAttributes接口，实现自己的Error Attributes方案, 只要配置一个类型为ErrorAttributes的bean，默认的DefaultErrorAttributes就不会被配置。</li>\n</ol>\n<p>###提供并配置了ErrorController和ErrorView<br>ErrorController和ErrorView提供了对错误页面/error的支持。ErrorMvcAutoConfiguration默认配置了BasicErrorController和WhiteLabelErrorView，以下代码摘自ErrorMvcAutoConfiguration:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Bean</span></span><br><span class=\"line\"><span class=\"meta\">@ConditionalOnMissingBean</span>(value = ErrorController.class, search = SearchStrategy.CURRENT)</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> BasicErrorController <span class=\"title\">basicErrorController</span><span class=\"params\">(ErrorAttributes errorAttributes)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> BasicErrorController(errorAttributes);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Configuration</span></span><br><span class=\"line\"><span class=\"meta\">@ConditionalOnProperty</span>(prefix = <span class=\"string\">\"error.whitelabel\"</span>, name = <span class=\"string\">\"enabled\"</span>, matchIfMissing = <span class=\"keyword\">true</span>)</span><br><span class=\"line\"><span class=\"meta\">@Conditional</span>(ErrorTemplateMissingCondition.class)</span><br><span class=\"line\"><span class=\"keyword\">protected</span> <span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">WhitelabelErrorViewConfiguration</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> SpelView defaultErrorView = <span class=\"keyword\">new</span> SpelView(</span><br><span class=\"line\">            <span class=\"string\">\"&lt;html&gt;&lt;body&gt;&lt;h1&gt;Whitelabel Error Page&lt;/h1&gt;\"</span></span><br><span class=\"line\">                    + <span class=\"string\">\"&lt;p&gt;This application has no explicit mapping for /error, so you are seeing this as a fallback.&lt;/p&gt;\"</span></span><br><span class=\"line\">                    + <span class=\"string\">\"&lt;div id='created'&gt;$&#123;timestamp&#125;&lt;/div&gt;\"</span></span><br><span class=\"line\">                    + <span class=\"string\">\"&lt;div&gt;There was an unexpected error (type=$&#123;error&#125;, status=$&#123;status&#125;).&lt;/div&gt;\"</span></span><br><span class=\"line\">                    + <span class=\"string\">\"&lt;div&gt;$&#123;message&#125;&lt;/div&gt;&lt;/body&gt;&lt;/html&gt;\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Bean</span>(name = <span class=\"string\">\"error\"</span>)</span><br><span class=\"line\">    <span class=\"meta\">@ConditionalOnMissingBean</span>(name = <span class=\"string\">\"error\"</span>)</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> View <span class=\"title\">defaultErrorView</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.defaultErrorView;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// If the user adds @EnableWebMvc then the bean name view resolver from</span></span><br><span class=\"line\">    <span class=\"comment\">// WebMvcAutoConfiguration disappears, so add it back in to avoid disappointment.</span></span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"meta\">@ConditionalOnMissingBean</span>(BeanNameViewResolver.class)</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> BeanNameViewResolver <span class=\"title\">beanNameViewResolver</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        BeanNameViewResolver resolver = <span class=\"keyword\">new</span> BeanNameViewResolver();</span><br><span class=\"line\">        resolver.setOrder(Ordered.LOWEST_PRECEDENCE - <span class=\"number\">10</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> resolver;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>ErrorController根据Accept头的内容，输出不同格式的错误响应。比如针对浏览器的请求生成html页面，针对其它请求生成json格式的返回。代码如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@RequestMapping</span>(value = <span class=\"string\">\"$&#123;error.path:/error&#125;\"</span>, produces = <span class=\"string\">\"text/html\"</span>)</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> ModelAndView <span class=\"title\">errorHtml</span><span class=\"params\">(HttpServletRequest request)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> ModelAndView(<span class=\"string\">\"error\"</span>, getErrorAttributes(request, <span class=\"keyword\">false</span>));</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@RequestMapping</span>(value = <span class=\"string\">\"$&#123;error.path:/error&#125;\"</span>)</span><br><span class=\"line\"><span class=\"meta\">@ResponseBody</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> ResponseEntity&lt;Map&lt;String, Object&gt;&gt; error(HttpServletRequest request) &#123;</span><br><span class=\"line\">    Map&lt;String, Object&gt; body = getErrorAttributes(request, getTraceParameter(request));</span><br><span class=\"line\">    HttpStatus status = getStatus(request);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> ResponseEntity&lt;Map&lt;String, Object&gt;&gt;(body, status);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>WhitelabelErrorView则提供了一个默认的白板错误页面。</p>\n<p>我们有什么可以配置的呢？</p>\n<p>我们可以提供自己的名字为error的view，以替换掉默认的白板页面，提供自己想要的样式。<br>我们可以继承BasicErrorController或者干脆自己实现ErrorController接口，用来响应/error这个错误页面请求，可以提供更多类型的错误格式等。<br>总结<br>Spring Boot提供了默认的统一错误页面，这是Spring MVC没有提供的。在理解了Spring Boot提供的错误处理相关内容之后，我们可以方便的定义自己的错误返回的格式和内容。不过，如果要实现统一的REST API接口的出错响应，就如这篇文章里的这样，还是要做不少工作的。</p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"ErrorController\"><a href=\"#ErrorController\" class=\"headerlink\" title=\"ErrorController\"></a>ErrorController</h1><p>背景</p>\n<p>Springboot 默认把异常的处理集中到一个ModelAndView中了，但项目的实际过程中，这样做，并不能满足我们的要求。具体的自定义异常的处理，参看以下</p>\n<p>在Spring MVC异常处理详解中，介绍了Spring MVC的异常处理体系，本文将讲解在此基础上Spring Boot为我们做了哪些工作。下图列出了Spring Boot中跟MVC异常处理相关的类。</p>\n<p><img src=\"imgs/SpringBootWebExceptionResolver.png\" alt=\"alt\"></p>\n<p>Spring Boot在启动过程中会根据当前环境进行AutoConfiguration，其中跟MVC错误处理相关的配置内容，在ErrorMvcAutoConfiguration这个类中。以下会分块介绍这个类里面的配置。</p>\n<h2 id=\"在Servlet容器中添加了一个默认的错误页面\"><a href=\"#在Servlet容器中添加了一个默认的错误页面\" class=\"headerlink\" title=\"在Servlet容器中添加了一个默认的错误页面\"></a>在Servlet容器中添加了一个默认的错误页面</h2><p>因为ErrorMvcAutoConfiguration类实现了EmbeddedServletContainerCustomizer接口，所以可以通过override customize方法来定制Servlet容器。以下代码摘自ErrorMvcAutoConfiguration：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Value</span>(<span class=\"string\">\"$&#123;error.path:/error&#125;\"</span>)</span><br><span class=\"line\"><span class=\"keyword\">private</span> String errorPath = <span class=\"string\">\"/error\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">customize</span><span class=\"params\">(ConfigurableEmbeddedServletContainer container)</span> </span>&#123;</span><br><span class=\"line\">    container.addErrorPages(<span class=\"keyword\">new</span> ErrorPage(<span class=\"keyword\">this</span>.properties.getServletPrefix()</span><br><span class=\"line\">        + <span class=\"keyword\">this</span>.errorPath));</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>可以看到ErrorMvcAutoConfiguration在容器中，添加了一个错误页面/error。因为这项配置的存在，如果Spring MVC在处理过程抛出异常到Servlet容器，容器会定向到这个错误页面/error。</p>\n<p>那么我们有什么可以配置的呢？</p>\n<p>我们可以配置错误页面的url，/error是默认值，我们可以再application.properties中通过设置error.path的值来配置该页面的url；<br>我们可以提供一个自定义的EmbeddedServletContainerCustomizer，添加更多的错误页面，比如对不同的http status code，使用不同的错误处理页面。就像下面这段代码一样：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Bean</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> EmbeddedServletContainerCustomizer <span class=\"title\">containerCustomizer</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> EmbeddedServletContainerCustomizer() &#123;</span><br><span class=\"line\">        <span class=\"meta\">@Override</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">customize</span><span class=\"params\">(ConfigurableEmbeddedServletContainer container)</span> </span>&#123;</span><br><span class=\"line\">            container.addErrorPages(<span class=\"keyword\">new</span> ErrorPage(HttpStatus.NOT_FOUND, <span class=\"string\">\"/404\"</span>));</span><br><span class=\"line\">            container.addErrorPages(<span class=\"keyword\">new</span> ErrorPage(HttpStatus.INTERNAL_SERVER_ERROR, <span class=\"string\">\"/500\"</span>));</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>###定义了ErrorAttributes接口，并默认配置了一个DefaultErrorAttributes Bean</p>\n<p>以下代码摘自ErrorMvcAutoConfiguration：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Bean</span></span><br><span class=\"line\"><span class=\"meta\">@ConditionalOnMissingBean</span>(value = ErrorAttributes.class, search = SearchStrategy.CURRENT)</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> DefaultErrorAttributes <span class=\"title\">errorAttributes</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> DefaultErrorAttributes();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>以下代码摘自DefaultErrorAttributes, ErrorAttributes, HandlerExceptionResolver：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Order</span>(Ordered.HIGHEST_PRECEDENCE)</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">DefaultErrorAttributes</span> <span class=\"keyword\">implements</span> <span class=\"title\">ErrorAttributes</span>, <span class=\"title\">HandlerExceptionResolver</span>,</span></span><br><span class=\"line\"><span class=\"class\">    <span class=\"title\">Ordered</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//篇幅原因，忽略类的实现代码。</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">ErrorAttributes</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Map&lt;String, Object&gt; <span class=\"title\">getErrorAttributes</span><span class=\"params\">(RequestAttributes requestAttributes,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">        <span class=\"keyword\">boolean</span> includeStackTrace)</span></span>;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Throwable <span class=\"title\">getError</span><span class=\"params\">(RequestAttributes requestAttributes)</span></span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">HandlerExceptionResolver</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\">ModelAndView <span class=\"title\">resolveException</span><span class=\"params\">(</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">        HttpServletRequest request, HttpServletResponse response, Object handler, Exception ex)</span></span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这个DefaultErrorAttributes有什么用呢？主要有两个作用:</p>\n<ol>\n<li>实现了ErrorAttributes接口，具备提供Error Attributes的能力，当处理/error错误页面时，需要从该bean中读取错误信息以供返回；</li>\n<li>实现了HandlerExceptionResolver接口并具有最高优先级，即DispatcherServlet在doDispatch过程中有异常抛出时，先由DefaultErrorAttributes处理。从下面代码中可以发现，DefaultErrorAttributes在处理过程中，是讲ErrorAttributes保存到了request中。事实上，这是DefaultErrorAttributes能够在后面返回Error Attributes的原因，实现HandlerExceptionResolver接口，是DefaultErrorAttributes实现ErrorAttributes接口的手段。</li>\n</ol>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> ModelAndView <span class=\"title\">resolveException</span><span class=\"params\">(HttpServletRequest request,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">    HttpServletResponse response, Object handler, Exception ex)</span> </span>&#123;</span><br><span class=\"line\">    storeErrorAttributes(request, ex);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>我们有什么可以配置的呢？</p>\n<p>1、我们可以继承DefaultErrorAttributes，修改Error Attributes，比如下面这段代码，去掉了默认存在的error和exception这两个字段，以隐藏敏感信息。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Bean</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> DefaultErrorAttributes <span class=\"title\">errorAttributes</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> DefaultErrorAttributes() &#123;</span><br><span class=\"line\">        <span class=\"meta\">@Override</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> Map&lt;String, Object&gt; <span class=\"title\">getErrorAttributes</span> <span class=\"params\">(RequestAttributes requestAttributes,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">        <span class=\"keyword\">boolean</span> includeStackTrace)</span></span>&#123;</span><br><span class=\"line\">            Map&lt;String, Object&gt; errorAttributes = <span class=\"keyword\">super</span>.getErrorAttributes(requestAttributes, includeStackTrace);</span><br><span class=\"line\">            errorAttributes.remove(<span class=\"string\">\"error\"</span>);</span><br><span class=\"line\">            errorAttributes.remove(<span class=\"string\">\"exception\"</span>);</span><br><span class=\"line\">            <span class=\"keyword\">return</span> errorAttributes;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ol>\n<li>我们可以自己实现ErrorAttributes接口，实现自己的Error Attributes方案, 只要配置一个类型为ErrorAttributes的bean，默认的DefaultErrorAttributes就不会被配置。</li>\n</ol>\n<p>###提供并配置了ErrorController和ErrorView<br>ErrorController和ErrorView提供了对错误页面/error的支持。ErrorMvcAutoConfiguration默认配置了BasicErrorController和WhiteLabelErrorView，以下代码摘自ErrorMvcAutoConfiguration:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Bean</span></span><br><span class=\"line\"><span class=\"meta\">@ConditionalOnMissingBean</span>(value = ErrorController.class, search = SearchStrategy.CURRENT)</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> BasicErrorController <span class=\"title\">basicErrorController</span><span class=\"params\">(ErrorAttributes errorAttributes)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> BasicErrorController(errorAttributes);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Configuration</span></span><br><span class=\"line\"><span class=\"meta\">@ConditionalOnProperty</span>(prefix = <span class=\"string\">\"error.whitelabel\"</span>, name = <span class=\"string\">\"enabled\"</span>, matchIfMissing = <span class=\"keyword\">true</span>)</span><br><span class=\"line\"><span class=\"meta\">@Conditional</span>(ErrorTemplateMissingCondition.class)</span><br><span class=\"line\"><span class=\"keyword\">protected</span> <span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">WhitelabelErrorViewConfiguration</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> SpelView defaultErrorView = <span class=\"keyword\">new</span> SpelView(</span><br><span class=\"line\">            <span class=\"string\">\"&lt;html&gt;&lt;body&gt;&lt;h1&gt;Whitelabel Error Page&lt;/h1&gt;\"</span></span><br><span class=\"line\">                    + <span class=\"string\">\"&lt;p&gt;This application has no explicit mapping for /error, so you are seeing this as a fallback.&lt;/p&gt;\"</span></span><br><span class=\"line\">                    + <span class=\"string\">\"&lt;div id='created'&gt;$&#123;timestamp&#125;&lt;/div&gt;\"</span></span><br><span class=\"line\">                    + <span class=\"string\">\"&lt;div&gt;There was an unexpected error (type=$&#123;error&#125;, status=$&#123;status&#125;).&lt;/div&gt;\"</span></span><br><span class=\"line\">                    + <span class=\"string\">\"&lt;div&gt;$&#123;message&#125;&lt;/div&gt;&lt;/body&gt;&lt;/html&gt;\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Bean</span>(name = <span class=\"string\">\"error\"</span>)</span><br><span class=\"line\">    <span class=\"meta\">@ConditionalOnMissingBean</span>(name = <span class=\"string\">\"error\"</span>)</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> View <span class=\"title\">defaultErrorView</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.defaultErrorView;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// If the user adds @EnableWebMvc then the bean name view resolver from</span></span><br><span class=\"line\">    <span class=\"comment\">// WebMvcAutoConfiguration disappears, so add it back in to avoid disappointment.</span></span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"meta\">@ConditionalOnMissingBean</span>(BeanNameViewResolver.class)</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> BeanNameViewResolver <span class=\"title\">beanNameViewResolver</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        BeanNameViewResolver resolver = <span class=\"keyword\">new</span> BeanNameViewResolver();</span><br><span class=\"line\">        resolver.setOrder(Ordered.LOWEST_PRECEDENCE - <span class=\"number\">10</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> resolver;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>ErrorController根据Accept头的内容，输出不同格式的错误响应。比如针对浏览器的请求生成html页面，针对其它请求生成json格式的返回。代码如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@RequestMapping</span>(value = <span class=\"string\">\"$&#123;error.path:/error&#125;\"</span>, produces = <span class=\"string\">\"text/html\"</span>)</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> ModelAndView <span class=\"title\">errorHtml</span><span class=\"params\">(HttpServletRequest request)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> ModelAndView(<span class=\"string\">\"error\"</span>, getErrorAttributes(request, <span class=\"keyword\">false</span>));</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@RequestMapping</span>(value = <span class=\"string\">\"$&#123;error.path:/error&#125;\"</span>)</span><br><span class=\"line\"><span class=\"meta\">@ResponseBody</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> ResponseEntity&lt;Map&lt;String, Object&gt;&gt; error(HttpServletRequest request) &#123;</span><br><span class=\"line\">    Map&lt;String, Object&gt; body = getErrorAttributes(request, getTraceParameter(request));</span><br><span class=\"line\">    HttpStatus status = getStatus(request);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> ResponseEntity&lt;Map&lt;String, Object&gt;&gt;(body, status);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>WhitelabelErrorView则提供了一个默认的白板错误页面。</p>\n<p>我们有什么可以配置的呢？</p>\n<p>我们可以提供自己的名字为error的view，以替换掉默认的白板页面，提供自己想要的样式。<br>我们可以继承BasicErrorController或者干脆自己实现ErrorController接口，用来响应/error这个错误页面请求，可以提供更多类型的错误格式等。<br>总结<br>Spring Boot提供了默认的统一错误页面，这是Spring MVC没有提供的。在理解了Spring Boot提供的错误处理相关内容之后，我们可以方便的定义自己的错误返回的格式和内容。不过，如果要实现统一的REST API接口的出错响应，就如这篇文章里的这样，还是要做不少工作的。</p>\n"},{"_content":"# Spring MVC中异常处理的类体系结构\n\n下图展示异常处理的相关的主要类和接口\n\n![alt](img/SpringMVCExceptionResolver.png)\n\n在Spring MVC中，所有用于处理在请求映射和请求处理过程中抛出的异常的类，都要实现HandlerExceptionResolver接口。AbstractHandlerExceptionResolver实现该接口和Orderd接口，是HandlerExceptionResolver类的实现的基类。ResponseStatusExceptionResolver等具体的异常处理类均在AbstractHandlerExceptionResolver之上，实现了具体的异常处理方式。一个基于Spring MVC的Web应用程序中，可以存在多个实现了HandlerExceptionResolver的异常处理类，他们的执行顺序，由其order属性决定, order值越小，越是优先执行, 在执行到第一个返回不是null的ModelAndView的Resolver时，不再执行后续的尚未执行的Resolver的异常处理方法。。\n\n下面我逐个介绍一下SpringMVC提供的这些异常处理类的功能。\n\n### DefaultHandlerExceptionResolver\nHandlerExceptionResolver接口的默认实现，基本上是Spring MVC内部使用，用来处理Spring定义的各种标准异常，将其转化为相对应的HTTP Status Code。其处理的异常类型有：\n\n```java\nhandleNoSuchRequestHandlingMethod\nhandleHttpRequestMethodNotSupported\nhandleHttpMediaTypeNotSupported\nhandleMissingServletRequestParameter\nhandleServletRequestBindingException\nhandleTypeMismatch\nhandleHttpMessageNotReadable\nhandleHttpMessageNotWritable\nhandleMethodArgumentNotValidException\nhandleMissingServletRequestParameter\nhandleMissingServletRequestPartException\nhandleBindException\n```\n\n### ResponseStatusExceptionResolver\n用来支持ResponseStatus的使用，处理使用了ResponseStatus注解的异常，根据注解的内容，返回相应的HTTP Status Code和内容给客户端。如果Web应用程序中配置了ResponseStatusExceptionResolver，那么我们就可以使用ResponseStatus注解来注解我们自己编写的异常类，并在Controller中抛出该异常类，之后ResponseStatusExceptionResolver就会自动帮我们处理剩下的工作。\n\n这是一个自己编写的异常，用来表示订单不存在：\n\n```java\n @ResponseStatus(value=HttpStatus.NOT_FOUND, reason=\"No such Order\")  // 404\n    public class OrderNotFoundException extends RuntimeException {\n        // ...\n    }\n```\n\n这是一个使用该异常的Controller方法：\n\n```java\n@RequestMapping(value=\"/orders/{id}\", method=GET)\n    public String showOrder(@PathVariable(\"id\") long id, Model model) {\n        Order order = orderRepository.findOrderById(id);\n        if (order == null) throw new OrderNotFoundException(id);\n        model.addAttribute(order);\n        return \"orderDetail\";\n    }\n```\n\n这样，当OrderNotFoundException被抛出时，ResponseStatusExceptionResolver会返回给客户端一个HTTP Status Code为404的响应。\n\n### AnnotationMethodHandlerExceptionResolver和ExceptionHandlerExceptionResolver\n\n用来支持ExceptionHandler注解，使用被ExceptionHandler注解所标记的方法来处理异常。其中AnnotationMethodHandlerExceptionResolver在3.0版本中开始提供，ExceptionHandlerExceptionResolver在3.1版本中开始提供，从3.2版本开始，Spring推荐使用ExceptionHandlerExceptionResolver。\n如果配置了AnnotationMethodHandlerExceptionResolver和ExceptionHandlerExceptionResolver这两个异常处理bean之一，那么我们就可以使用ExceptionHandler注解来处理异常。\n\n下面是几个ExceptionHandler注解的使用例子：\n\n```java\n@Controller\npublic class ExceptionHandlingController {\n\n  // @RequestHandler methods\n  ...\n  \n  // 以下是异常处理方法\n  \n  // 将DataIntegrityViolationException转化为Http Status Code为409的响应\n  @ResponseStatus(value=HttpStatus.CONFLICT, reason=\"Data integrity violation\")  // 409\n  @ExceptionHandler(DataIntegrityViolationException.class)\n  public void conflict() {\n    // Nothing to do\n  }\n  \n  // 针对SQLException和DataAccessException返回视图databaseError\n  @ExceptionHandler({SQLException.class,DataAccessException.class})\n  public String databaseError() {\n    // Nothing to do.  Returns the logical view name of an error page, passed to\n    // the view-resolver(s) in usual way.\n    // Note that the exception is _not_ available to this view (it is not added to\n    // the model) but see \"Extending ExceptionHandlerExceptionResolver\" below.\n    return \"databaseError\";\n  }\n\n  // 创建ModleAndView，将异常和请求的信息放入到Model中，指定视图名字，并返回该ModleAndView\n  @ExceptionHandler(Exception.class)\n  public ModelAndView handleError(HttpServletRequest req, Exception exception) {\n    logger.error(\"Request: \" + req.getRequestURL() + \" raised \" + exception);\n\n    ModelAndView mav = new ModelAndView();\n    mav.addObject(\"exception\", exception);\n    mav.addObject(\"url\", req.getRequestURL());\n    mav.setViewName(\"error\");\n    return mav;\n  }\n}\n```\n\n需要注意的是，上面例子中的ExceptionHandler方法的作用域，只是在本Controller类中。如果需要使用ExceptionHandler来处理全局的Exception，则需要使用ControllerAdvice注解。\n\n```java\n@ControllerAdvice\nclass GlobalDefaultExceptionHandler {\n    public static final String DEFAULT_ERROR_VIEW = \"error\";\n\n    @ExceptionHandler(value = Exception.class)\n    public ModelAndView defaultErrorHandler(HttpServletRequest req, Exception e) throws Exception {\n        // 如果异常使用了ResponseStatus注解，那么重新抛出该异常，Spring框架会处理该异常。 \n        if (AnnotationUtils.findAnnotation(e.getClass(), ResponseStatus.class) != null)\n            throw e;\n\n        // 否则创建ModleAndView，处理该异常。\n        ModelAndView mav = new ModelAndView();\n        mav.addObject(\"exception\", e);\n        mav.addObject(\"url\", req.getRequestURL());\n        mav.setViewName(DEFAULT_ERROR_VIEW);\n        return mav;\n    }\n}\n```\n\n### SimpleMappingExceptionResolver\n提供了将异常映射为视图的能力，高度可定制化。其提供的能力有：\n\n1. 根据异常的类型，将异常映射到视图；\n2. 可以为不符合处理条件没有被处理的异常，指定一个默认的错误返回；\n3. 处理异常时，记录log信息；\n4. 指定需要添加到Modle中的Exception属性，从而在视图中展示该属性。\n\n```java\n@Configuration\n@EnableWebMvc \npublic class MvcConfiguration extends WebMvcConfigurerAdapter {\n    @Bean(name=\"simpleMappingExceptionResolver\")\n    public SimpleMappingExceptionResolver createSimpleMappingExceptionResolver() {\n        SimpleMappingExceptionResolver r = new SimpleMappingExceptionResolver();\n\n        Properties mappings = new Properties();\n        mappings.setProperty(\"DatabaseException\", \"databaseError\");\n        mappings.setProperty(\"InvalidCreditCardException\", \"creditCardError\");\n\n        r.setExceptionMappings(mappings);  // 默认为空\n        r.setDefaultErrorView(\"error\");    // 默认没有\n        r.setExceptionAttribute(\"ex\"); \n        r.setWarnLogCategory(\"example.MvcLogger\"); \n        return r;\n    }\n    ...\n}\n```\n\n### 自定义ExceptionResolver\nSpring MVC的异常处理非常的灵活，如果提供的ExceptionResolver类不能满足使用，我们可以实现自己的异常处理类。可以通过继承SimpleMappingExceptionResolver来定制Mapping的方式和能力，也可以直接继承AbstractHandlerExceptionResolver来实现其它类型的异常处理类。\n\n## Spring MVC是如何创建和使用这些Resolver的？\n\n首先看Spring MVC是怎么加载异常处理bean的。\n\nSpring MVC有两种加载异常处理类的方式，一种是根据类型，这种情况下，会加载ApplicationContext下所有实现了\n\n1. ExceptionResolver接口的bean，并根据其order属性排序，依次调用；一种是根据名字，这种情况下会加载ApplicationContext下，名字为handlerExceptionResolver的bean。\n2. 不管使用那种加载方式，如果在ApplicationContext中没有找到异常处理bean，那么Spring MVC会加载默认的异常处理bean。\n3. 默认的异常处理bean定义在DispatcherServlet.properties中。\n\n\n```java\norg.springframework.web.servlet.HandlerExceptionResolver=org.springframework.web.servlet.mvc.annotation.AnnotationMethodHandlerExceptionResolver,\\\n    org.springframework.web.servlet.mvc.annotation.ResponseStatusExceptionResolver,\\\n    org.springframework.web.servlet.mvc.support.DefaultHandlerExceptionResolver\n```\n\n以下代码摘自ispatcherServlet，描述了异常处理类的加载过程：\n\n```java\n/**\n * Initialize the HandlerMappings used by this class.\n * <p>If no HandlerMapping beans are defined in the BeanFactory for this namespace,\n * we default to BeanNameUrlHandlerMapping.\n */\nprivate void initHandlerMappings(ApplicationContext context) {\n    this.handlerMappings = null;\n\n    if (this.detectAllHandlerMappings) {\n        // Find all HandlerMappings in the ApplicationContext, including ancestor contexts.\n        Map<String, HandlerMapping> matchingBeans =\n                BeanFactoryUtils.beansOfTypeIncludingAncestors(context, HandlerMapping.class, true, false);\n        if (!matchingBeans.isEmpty()) {\n            this.handlerMappings = new ArrayList<HandlerMapping>(matchingBeans.values());\n            // We keep HandlerMappings in sorted order.\n            OrderComparator.sort(this.handlerMappings);\n        }\n    }\n    else {\n        try {\n            HandlerMapping hm = context.getBean(HANDLER_MAPPING_BEAN_NAME, HandlerMapping.class);\n            this.handlerMappings = Collections.singletonList(hm);\n        }\n        catch (NoSuchBeanDefinitionException ex) {\n            // Ignore, we'll add a default HandlerMapping later.\n        }\n    }\n\n    // Ensure we have at least one HandlerMapping, by registering\n    // a default HandlerMapping if no other mappings are found.\n    if (this.handlerMappings == null) {\n        this.handlerMappings = getDefaultStrategies(context, HandlerMapping.class);\n        if (logger.isDebugEnabled()) {\n            logger.debug(\"No HandlerMappings found in servlet '\" + getServletName() + \"': using default\");\n        }\n    }\n}\n\n```\n\n然后看Spring MVC是怎么使用异常处理bean的。\n\n1. Spring MVC把请求映射和处理过程放到try catch中，捕获到异常后，使用异常处理bean进行处理。\n2. 所有异常处理bean按照order属性排序，在处理过程中，遇到第一个成功处理异常的异常处理bean之后，不再调用后续的异常处理bean。\n\n以下代码摘自DispatcherServlet，描述了处理异常的过程。\n\n```java\n/**\n * Process the actual dispatching to the handler.\n * <p>The handler will be obtained by applying the servlet's HandlerMappings in order.\n * The HandlerAdapter will be obtained by querying the servlet's installed HandlerAdapters\n * to find the first that supports the handler class.\n * <p>All HTTP methods are handled by this method. It's up to HandlerAdapters or handlers\n * themselves to decide which methods are acceptable.\n * @param request current HTTP request\n * @param response current HTTP response\n * @throws Exception in case of any kind of processing failure\n */\nprotected void doDispatch(HttpServletRequest request, HttpServletResponse response) throws Exception {\n    HttpServletRequest processedRequest = request;\n    HandlerExecutionChain mappedHandler = null;\n    boolean multipartRequestParsed = false;\n\n    WebAsyncManager asyncManager = WebAsyncUtils.getAsyncManager(request);\n\n    try {\n        ModelAndView mv = null;\n        Exception dispatchException = null;\n\n        try {\n            processedRequest = checkMultipart(request);\n            multipartRequestParsed = (processedRequest != request);\n\n            // Determine handler for the current request.\n            mappedHandler = getHandler(processedRequest);\n            if (mappedHandler == null || mappedHandler.getHandler() == null) {\n                noHandlerFound(processedRequest, response);\n                return;\n            }\n\n            // Determine handler adapter for the current request.\n            HandlerAdapter ha = getHandlerAdapter(mappedHandler.getHandler());\n\n            // Process last-modified header, if supported by the handler.\n            String method = request.getMethod();\n            boolean isGet = \"GET\".equals(method);\n            if (isGet || \"HEAD\".equals(method)) {\n                long lastModified = ha.getLastModified(request, mappedHandler.getHandler());\n                if (logger.isDebugEnabled()) {\n                    logger.debug(\"Last-Modified value for [\" + getRequestUri(request) + \"] is: \" + lastModified);\n                }\n                if (new ServletWebRequest(request, response).checkNotModified(lastModified) && isGet) {\n                    return;\n                }\n            }\n\n            if (!mappedHandler.applyPreHandle(processedRequest, response)) {\n                return;\n            }\n\n            // Actually invoke the handler.\n            mv = ha.handle(processedRequest, response, mappedHandler.getHandler());\n\n            if (asyncManager.isConcurrentHandlingStarted()) {\n                return;\n            }\n\n            applyDefaultViewName(request, mv);\n            mappedHandler.applyPostHandle(processedRequest, response, mv);\n        }\n        catch (Exception ex) {\n            dispatchException = ex;\n        }\n        processDispatchResult(processedRequest, response, mappedHandler, mv, dispatchException);\n    }\n    catch (Exception ex) {\n        triggerAfterCompletion(processedRequest, response, mappedHandler, ex);\n    }\n    catch (Error err) {\n        triggerAfterCompletionWithError(processedRequest, response, mappedHandler, err);\n    }\n    finally {\n        if (asyncManager.isConcurrentHandlingStarted()) {\n            // Instead of postHandle and afterCompletion\n            if (mappedHandler != null) {\n                mappedHandler.applyAfterConcurrentHandlingStarted(processedRequest, response);\n            }\n        }\n        else {\n            // Clean up any resources used by a multipart request.\n            if (multipartRequestParsed) {\n                cleanupMultipart(processedRequest);\n            }\n        }\n    }\n}\n\n\n/**\n * Determine an error ModelAndView via the registered HandlerExceptionResolvers.\n * @param request current HTTP request\n * @param response current HTTP response\n * @param handler the executed handler, or {@code null} if none chosen at the time of the exception\n * (for example, if multipart resolution failed)\n * @param ex the exception that got thrown during handler execution\n * @return a corresponding ModelAndView to forward to\n * @throws Exception if no error ModelAndView found\n */\nprotected ModelAndView processHandlerException(HttpServletRequest request, HttpServletResponse response,\n        Object handler, Exception ex) throws Exception {\n\n    // Check registered HandlerExceptionResolvers...\n    ModelAndView exMv = null;\n    for (HandlerExceptionResolver handlerExceptionResolver : this.handlerExceptionResolvers) {\n        exMv = handlerExceptionResolver.resolveException(request, response, handler, ex);\n        if (exMv != null) {\n            break;\n        }\n    }\n    if (exMv != null) {\n        if (exMv.isEmpty()) {\n            request.setAttribute(EXCEPTION_ATTRIBUTE, ex);\n            return null;\n        }\n        // We might still need view name translation for a plain error model...\n        if (!exMv.hasView()) {\n            exMv.setViewName(getDefaultViewName(request));\n        }\n        if (logger.isDebugEnabled()) {\n            logger.debug(\"Handler execution resulted in exception - forwarding to resolved error view: \" + exMv, ex);\n        }\n        WebUtils.exposeErrorRequestAttributes(request, ex, getServletName());\n        return exMv;\n    }\n\n    throw ex;\n}\n```\n\n## 何时该使用何种ExceptionResolver？\nSpring提供了很多选择和非常灵活的使用方式，下面是一些使用建议：\n\n1. 如果自定义异常类，考虑加上ResponseStatus注解；\n2. 对于没有ResponseStatus注解的异常，可以通过使用ExceptionHandler+ControllerAdvice注解，或者通过配置SimpleMappingExceptionResolver，来为整个Web应用提供统一的异常处理。\n3. 如果应用中有些异常处理方式，只针对特定的Controller使用，那么在这个Controller中使用ExceptionHandler注解。\n4. 不要使用过多的异常处理方式，不然的话，维护起来会很苦恼，因为异常的处理分散在很多不同的地方。\n\n","source":"_posts/spring/mvc/exceptionHandler.md","raw":"# Spring MVC中异常处理的类体系结构\n\n下图展示异常处理的相关的主要类和接口\n\n![alt](img/SpringMVCExceptionResolver.png)\n\n在Spring MVC中，所有用于处理在请求映射和请求处理过程中抛出的异常的类，都要实现HandlerExceptionResolver接口。AbstractHandlerExceptionResolver实现该接口和Orderd接口，是HandlerExceptionResolver类的实现的基类。ResponseStatusExceptionResolver等具体的异常处理类均在AbstractHandlerExceptionResolver之上，实现了具体的异常处理方式。一个基于Spring MVC的Web应用程序中，可以存在多个实现了HandlerExceptionResolver的异常处理类，他们的执行顺序，由其order属性决定, order值越小，越是优先执行, 在执行到第一个返回不是null的ModelAndView的Resolver时，不再执行后续的尚未执行的Resolver的异常处理方法。。\n\n下面我逐个介绍一下SpringMVC提供的这些异常处理类的功能。\n\n### DefaultHandlerExceptionResolver\nHandlerExceptionResolver接口的默认实现，基本上是Spring MVC内部使用，用来处理Spring定义的各种标准异常，将其转化为相对应的HTTP Status Code。其处理的异常类型有：\n\n```java\nhandleNoSuchRequestHandlingMethod\nhandleHttpRequestMethodNotSupported\nhandleHttpMediaTypeNotSupported\nhandleMissingServletRequestParameter\nhandleServletRequestBindingException\nhandleTypeMismatch\nhandleHttpMessageNotReadable\nhandleHttpMessageNotWritable\nhandleMethodArgumentNotValidException\nhandleMissingServletRequestParameter\nhandleMissingServletRequestPartException\nhandleBindException\n```\n\n### ResponseStatusExceptionResolver\n用来支持ResponseStatus的使用，处理使用了ResponseStatus注解的异常，根据注解的内容，返回相应的HTTP Status Code和内容给客户端。如果Web应用程序中配置了ResponseStatusExceptionResolver，那么我们就可以使用ResponseStatus注解来注解我们自己编写的异常类，并在Controller中抛出该异常类，之后ResponseStatusExceptionResolver就会自动帮我们处理剩下的工作。\n\n这是一个自己编写的异常，用来表示订单不存在：\n\n```java\n @ResponseStatus(value=HttpStatus.NOT_FOUND, reason=\"No such Order\")  // 404\n    public class OrderNotFoundException extends RuntimeException {\n        // ...\n    }\n```\n\n这是一个使用该异常的Controller方法：\n\n```java\n@RequestMapping(value=\"/orders/{id}\", method=GET)\n    public String showOrder(@PathVariable(\"id\") long id, Model model) {\n        Order order = orderRepository.findOrderById(id);\n        if (order == null) throw new OrderNotFoundException(id);\n        model.addAttribute(order);\n        return \"orderDetail\";\n    }\n```\n\n这样，当OrderNotFoundException被抛出时，ResponseStatusExceptionResolver会返回给客户端一个HTTP Status Code为404的响应。\n\n### AnnotationMethodHandlerExceptionResolver和ExceptionHandlerExceptionResolver\n\n用来支持ExceptionHandler注解，使用被ExceptionHandler注解所标记的方法来处理异常。其中AnnotationMethodHandlerExceptionResolver在3.0版本中开始提供，ExceptionHandlerExceptionResolver在3.1版本中开始提供，从3.2版本开始，Spring推荐使用ExceptionHandlerExceptionResolver。\n如果配置了AnnotationMethodHandlerExceptionResolver和ExceptionHandlerExceptionResolver这两个异常处理bean之一，那么我们就可以使用ExceptionHandler注解来处理异常。\n\n下面是几个ExceptionHandler注解的使用例子：\n\n```java\n@Controller\npublic class ExceptionHandlingController {\n\n  // @RequestHandler methods\n  ...\n  \n  // 以下是异常处理方法\n  \n  // 将DataIntegrityViolationException转化为Http Status Code为409的响应\n  @ResponseStatus(value=HttpStatus.CONFLICT, reason=\"Data integrity violation\")  // 409\n  @ExceptionHandler(DataIntegrityViolationException.class)\n  public void conflict() {\n    // Nothing to do\n  }\n  \n  // 针对SQLException和DataAccessException返回视图databaseError\n  @ExceptionHandler({SQLException.class,DataAccessException.class})\n  public String databaseError() {\n    // Nothing to do.  Returns the logical view name of an error page, passed to\n    // the view-resolver(s) in usual way.\n    // Note that the exception is _not_ available to this view (it is not added to\n    // the model) but see \"Extending ExceptionHandlerExceptionResolver\" below.\n    return \"databaseError\";\n  }\n\n  // 创建ModleAndView，将异常和请求的信息放入到Model中，指定视图名字，并返回该ModleAndView\n  @ExceptionHandler(Exception.class)\n  public ModelAndView handleError(HttpServletRequest req, Exception exception) {\n    logger.error(\"Request: \" + req.getRequestURL() + \" raised \" + exception);\n\n    ModelAndView mav = new ModelAndView();\n    mav.addObject(\"exception\", exception);\n    mav.addObject(\"url\", req.getRequestURL());\n    mav.setViewName(\"error\");\n    return mav;\n  }\n}\n```\n\n需要注意的是，上面例子中的ExceptionHandler方法的作用域，只是在本Controller类中。如果需要使用ExceptionHandler来处理全局的Exception，则需要使用ControllerAdvice注解。\n\n```java\n@ControllerAdvice\nclass GlobalDefaultExceptionHandler {\n    public static final String DEFAULT_ERROR_VIEW = \"error\";\n\n    @ExceptionHandler(value = Exception.class)\n    public ModelAndView defaultErrorHandler(HttpServletRequest req, Exception e) throws Exception {\n        // 如果异常使用了ResponseStatus注解，那么重新抛出该异常，Spring框架会处理该异常。 \n        if (AnnotationUtils.findAnnotation(e.getClass(), ResponseStatus.class) != null)\n            throw e;\n\n        // 否则创建ModleAndView，处理该异常。\n        ModelAndView mav = new ModelAndView();\n        mav.addObject(\"exception\", e);\n        mav.addObject(\"url\", req.getRequestURL());\n        mav.setViewName(DEFAULT_ERROR_VIEW);\n        return mav;\n    }\n}\n```\n\n### SimpleMappingExceptionResolver\n提供了将异常映射为视图的能力，高度可定制化。其提供的能力有：\n\n1. 根据异常的类型，将异常映射到视图；\n2. 可以为不符合处理条件没有被处理的异常，指定一个默认的错误返回；\n3. 处理异常时，记录log信息；\n4. 指定需要添加到Modle中的Exception属性，从而在视图中展示该属性。\n\n```java\n@Configuration\n@EnableWebMvc \npublic class MvcConfiguration extends WebMvcConfigurerAdapter {\n    @Bean(name=\"simpleMappingExceptionResolver\")\n    public SimpleMappingExceptionResolver createSimpleMappingExceptionResolver() {\n        SimpleMappingExceptionResolver r = new SimpleMappingExceptionResolver();\n\n        Properties mappings = new Properties();\n        mappings.setProperty(\"DatabaseException\", \"databaseError\");\n        mappings.setProperty(\"InvalidCreditCardException\", \"creditCardError\");\n\n        r.setExceptionMappings(mappings);  // 默认为空\n        r.setDefaultErrorView(\"error\");    // 默认没有\n        r.setExceptionAttribute(\"ex\"); \n        r.setWarnLogCategory(\"example.MvcLogger\"); \n        return r;\n    }\n    ...\n}\n```\n\n### 自定义ExceptionResolver\nSpring MVC的异常处理非常的灵活，如果提供的ExceptionResolver类不能满足使用，我们可以实现自己的异常处理类。可以通过继承SimpleMappingExceptionResolver来定制Mapping的方式和能力，也可以直接继承AbstractHandlerExceptionResolver来实现其它类型的异常处理类。\n\n## Spring MVC是如何创建和使用这些Resolver的？\n\n首先看Spring MVC是怎么加载异常处理bean的。\n\nSpring MVC有两种加载异常处理类的方式，一种是根据类型，这种情况下，会加载ApplicationContext下所有实现了\n\n1. ExceptionResolver接口的bean，并根据其order属性排序，依次调用；一种是根据名字，这种情况下会加载ApplicationContext下，名字为handlerExceptionResolver的bean。\n2. 不管使用那种加载方式，如果在ApplicationContext中没有找到异常处理bean，那么Spring MVC会加载默认的异常处理bean。\n3. 默认的异常处理bean定义在DispatcherServlet.properties中。\n\n\n```java\norg.springframework.web.servlet.HandlerExceptionResolver=org.springframework.web.servlet.mvc.annotation.AnnotationMethodHandlerExceptionResolver,\\\n    org.springframework.web.servlet.mvc.annotation.ResponseStatusExceptionResolver,\\\n    org.springframework.web.servlet.mvc.support.DefaultHandlerExceptionResolver\n```\n\n以下代码摘自ispatcherServlet，描述了异常处理类的加载过程：\n\n```java\n/**\n * Initialize the HandlerMappings used by this class.\n * <p>If no HandlerMapping beans are defined in the BeanFactory for this namespace,\n * we default to BeanNameUrlHandlerMapping.\n */\nprivate void initHandlerMappings(ApplicationContext context) {\n    this.handlerMappings = null;\n\n    if (this.detectAllHandlerMappings) {\n        // Find all HandlerMappings in the ApplicationContext, including ancestor contexts.\n        Map<String, HandlerMapping> matchingBeans =\n                BeanFactoryUtils.beansOfTypeIncludingAncestors(context, HandlerMapping.class, true, false);\n        if (!matchingBeans.isEmpty()) {\n            this.handlerMappings = new ArrayList<HandlerMapping>(matchingBeans.values());\n            // We keep HandlerMappings in sorted order.\n            OrderComparator.sort(this.handlerMappings);\n        }\n    }\n    else {\n        try {\n            HandlerMapping hm = context.getBean(HANDLER_MAPPING_BEAN_NAME, HandlerMapping.class);\n            this.handlerMappings = Collections.singletonList(hm);\n        }\n        catch (NoSuchBeanDefinitionException ex) {\n            // Ignore, we'll add a default HandlerMapping later.\n        }\n    }\n\n    // Ensure we have at least one HandlerMapping, by registering\n    // a default HandlerMapping if no other mappings are found.\n    if (this.handlerMappings == null) {\n        this.handlerMappings = getDefaultStrategies(context, HandlerMapping.class);\n        if (logger.isDebugEnabled()) {\n            logger.debug(\"No HandlerMappings found in servlet '\" + getServletName() + \"': using default\");\n        }\n    }\n}\n\n```\n\n然后看Spring MVC是怎么使用异常处理bean的。\n\n1. Spring MVC把请求映射和处理过程放到try catch中，捕获到异常后，使用异常处理bean进行处理。\n2. 所有异常处理bean按照order属性排序，在处理过程中，遇到第一个成功处理异常的异常处理bean之后，不再调用后续的异常处理bean。\n\n以下代码摘自DispatcherServlet，描述了处理异常的过程。\n\n```java\n/**\n * Process the actual dispatching to the handler.\n * <p>The handler will be obtained by applying the servlet's HandlerMappings in order.\n * The HandlerAdapter will be obtained by querying the servlet's installed HandlerAdapters\n * to find the first that supports the handler class.\n * <p>All HTTP methods are handled by this method. It's up to HandlerAdapters or handlers\n * themselves to decide which methods are acceptable.\n * @param request current HTTP request\n * @param response current HTTP response\n * @throws Exception in case of any kind of processing failure\n */\nprotected void doDispatch(HttpServletRequest request, HttpServletResponse response) throws Exception {\n    HttpServletRequest processedRequest = request;\n    HandlerExecutionChain mappedHandler = null;\n    boolean multipartRequestParsed = false;\n\n    WebAsyncManager asyncManager = WebAsyncUtils.getAsyncManager(request);\n\n    try {\n        ModelAndView mv = null;\n        Exception dispatchException = null;\n\n        try {\n            processedRequest = checkMultipart(request);\n            multipartRequestParsed = (processedRequest != request);\n\n            // Determine handler for the current request.\n            mappedHandler = getHandler(processedRequest);\n            if (mappedHandler == null || mappedHandler.getHandler() == null) {\n                noHandlerFound(processedRequest, response);\n                return;\n            }\n\n            // Determine handler adapter for the current request.\n            HandlerAdapter ha = getHandlerAdapter(mappedHandler.getHandler());\n\n            // Process last-modified header, if supported by the handler.\n            String method = request.getMethod();\n            boolean isGet = \"GET\".equals(method);\n            if (isGet || \"HEAD\".equals(method)) {\n                long lastModified = ha.getLastModified(request, mappedHandler.getHandler());\n                if (logger.isDebugEnabled()) {\n                    logger.debug(\"Last-Modified value for [\" + getRequestUri(request) + \"] is: \" + lastModified);\n                }\n                if (new ServletWebRequest(request, response).checkNotModified(lastModified) && isGet) {\n                    return;\n                }\n            }\n\n            if (!mappedHandler.applyPreHandle(processedRequest, response)) {\n                return;\n            }\n\n            // Actually invoke the handler.\n            mv = ha.handle(processedRequest, response, mappedHandler.getHandler());\n\n            if (asyncManager.isConcurrentHandlingStarted()) {\n                return;\n            }\n\n            applyDefaultViewName(request, mv);\n            mappedHandler.applyPostHandle(processedRequest, response, mv);\n        }\n        catch (Exception ex) {\n            dispatchException = ex;\n        }\n        processDispatchResult(processedRequest, response, mappedHandler, mv, dispatchException);\n    }\n    catch (Exception ex) {\n        triggerAfterCompletion(processedRequest, response, mappedHandler, ex);\n    }\n    catch (Error err) {\n        triggerAfterCompletionWithError(processedRequest, response, mappedHandler, err);\n    }\n    finally {\n        if (asyncManager.isConcurrentHandlingStarted()) {\n            // Instead of postHandle and afterCompletion\n            if (mappedHandler != null) {\n                mappedHandler.applyAfterConcurrentHandlingStarted(processedRequest, response);\n            }\n        }\n        else {\n            // Clean up any resources used by a multipart request.\n            if (multipartRequestParsed) {\n                cleanupMultipart(processedRequest);\n            }\n        }\n    }\n}\n\n\n/**\n * Determine an error ModelAndView via the registered HandlerExceptionResolvers.\n * @param request current HTTP request\n * @param response current HTTP response\n * @param handler the executed handler, or {@code null} if none chosen at the time of the exception\n * (for example, if multipart resolution failed)\n * @param ex the exception that got thrown during handler execution\n * @return a corresponding ModelAndView to forward to\n * @throws Exception if no error ModelAndView found\n */\nprotected ModelAndView processHandlerException(HttpServletRequest request, HttpServletResponse response,\n        Object handler, Exception ex) throws Exception {\n\n    // Check registered HandlerExceptionResolvers...\n    ModelAndView exMv = null;\n    for (HandlerExceptionResolver handlerExceptionResolver : this.handlerExceptionResolvers) {\n        exMv = handlerExceptionResolver.resolveException(request, response, handler, ex);\n        if (exMv != null) {\n            break;\n        }\n    }\n    if (exMv != null) {\n        if (exMv.isEmpty()) {\n            request.setAttribute(EXCEPTION_ATTRIBUTE, ex);\n            return null;\n        }\n        // We might still need view name translation for a plain error model...\n        if (!exMv.hasView()) {\n            exMv.setViewName(getDefaultViewName(request));\n        }\n        if (logger.isDebugEnabled()) {\n            logger.debug(\"Handler execution resulted in exception - forwarding to resolved error view: \" + exMv, ex);\n        }\n        WebUtils.exposeErrorRequestAttributes(request, ex, getServletName());\n        return exMv;\n    }\n\n    throw ex;\n}\n```\n\n## 何时该使用何种ExceptionResolver？\nSpring提供了很多选择和非常灵活的使用方式，下面是一些使用建议：\n\n1. 如果自定义异常类，考虑加上ResponseStatus注解；\n2. 对于没有ResponseStatus注解的异常，可以通过使用ExceptionHandler+ControllerAdvice注解，或者通过配置SimpleMappingExceptionResolver，来为整个Web应用提供统一的异常处理。\n3. 如果应用中有些异常处理方式，只针对特定的Controller使用，那么在这个Controller中使用ExceptionHandler注解。\n4. 不要使用过多的异常处理方式，不然的话，维护起来会很苦恼，因为异常的处理分散在很多不同的地方。\n\n","slug":"spring/mvc/exceptionHandler","published":1,"date":"2018-11-20T14:55:26.990Z","updated":"2018-11-20T14:57:59.162Z","title":"","comments":1,"layout":"post","photos":[],"link":"","_id":"cjopxmsrc000vwfo8sq9uh3af","content":"<h1><span id=\"spring-mvc中异常处理的类体系结构\">Spring MVC中异常处理的类体系结构</span></h1><p>下图展示异常处理的相关的主要类和接口</p>\n<p><img src=\"img/SpringMVCExceptionResolver.png\" alt=\"alt\"></p>\n<p>在Spring MVC中，所有用于处理在请求映射和请求处理过程中抛出的异常的类，都要实现HandlerExceptionResolver接口。AbstractHandlerExceptionResolver实现该接口和Orderd接口，是HandlerExceptionResolver类的实现的基类。ResponseStatusExceptionResolver等具体的异常处理类均在AbstractHandlerExceptionResolver之上，实现了具体的异常处理方式。一个基于Spring MVC的Web应用程序中，可以存在多个实现了HandlerExceptionResolver的异常处理类，他们的执行顺序，由其order属性决定, order值越小，越是优先执行, 在执行到第一个返回不是null的ModelAndView的Resolver时，不再执行后续的尚未执行的Resolver的异常处理方法。。</p>\n<p>下面我逐个介绍一下SpringMVC提供的这些异常处理类的功能。</p>\n<h3><span id=\"defaulthandlerexceptionresolver\">DefaultHandlerExceptionResolver</span></h3><p>HandlerExceptionResolver接口的默认实现，基本上是Spring MVC内部使用，用来处理Spring定义的各种标准异常，将其转化为相对应的HTTP Status Code。其处理的异常类型有：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">handleNoSuchRequestHandlingMethod</span><br><span class=\"line\">handleHttpRequestMethodNotSupported</span><br><span class=\"line\">handleHttpMediaTypeNotSupported</span><br><span class=\"line\">handleMissingServletRequestParameter</span><br><span class=\"line\">handleServletRequestBindingException</span><br><span class=\"line\">handleTypeMismatch</span><br><span class=\"line\">handleHttpMessageNotReadable</span><br><span class=\"line\">handleHttpMessageNotWritable</span><br><span class=\"line\">handleMethodArgumentNotValidException</span><br><span class=\"line\">handleMissingServletRequestParameter</span><br><span class=\"line\">handleMissingServletRequestPartException</span><br><span class=\"line\">handleBindException</span><br></pre></td></tr></table></figure>\n<h3><span id=\"responsestatusexceptionresolver\">ResponseStatusExceptionResolver</span></h3><p>用来支持ResponseStatus的使用，处理使用了ResponseStatus注解的异常，根据注解的内容，返回相应的HTTP Status Code和内容给客户端。如果Web应用程序中配置了ResponseStatusExceptionResolver，那么我们就可以使用ResponseStatus注解来注解我们自己编写的异常类，并在Controller中抛出该异常类，之后ResponseStatusExceptionResolver就会自动帮我们处理剩下的工作。</p>\n<p>这是一个自己编写的异常，用来表示订单不存在：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@ResponseStatus</span>(value=HttpStatus.NOT_FOUND, reason=<span class=\"string\">\"No such Order\"</span>)  <span class=\"comment\">// 404</span></span><br><span class=\"line\">   <span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">OrderNotFoundException</span> <span class=\"keyword\">extends</span> <span class=\"title\">RuntimeException</span> </span>&#123;</span><br><span class=\"line\">       <span class=\"comment\">// ...</span></span><br><span class=\"line\">   &#125;</span><br></pre></td></tr></table></figure>\n<p>这是一个使用该异常的Controller方法：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@RequestMapping</span>(value=<span class=\"string\">\"/orders/&#123;id&#125;\"</span>, method=GET)</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">showOrder</span><span class=\"params\">(@PathVariable(<span class=\"string\">\"id\"</span>)</span> <span class=\"keyword\">long</span> id, Model model) </span>&#123;</span><br><span class=\"line\">        Order order = orderRepository.findOrderById(id);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (order == <span class=\"keyword\">null</span>) <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> OrderNotFoundException(id);</span><br><span class=\"line\">        model.addAttribute(order);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">\"orderDetail\"</span>;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n<p>这样，当OrderNotFoundException被抛出时，ResponseStatusExceptionResolver会返回给客户端一个HTTP Status Code为404的响应。</p>\n<h3><span id=\"annotationmethodhandlerexceptionresolver和exceptionhandlerexceptionresolver\">AnnotationMethodHandlerExceptionResolver和ExceptionHandlerExceptionResolver</span></h3><p>用来支持ExceptionHandler注解，使用被ExceptionHandler注解所标记的方法来处理异常。其中AnnotationMethodHandlerExceptionResolver在3.0版本中开始提供，ExceptionHandlerExceptionResolver在3.1版本中开始提供，从3.2版本开始，Spring推荐使用ExceptionHandlerExceptionResolver。<br>如果配置了AnnotationMethodHandlerExceptionResolver和ExceptionHandlerExceptionResolver这两个异常处理bean之一，那么我们就可以使用ExceptionHandler注解来处理异常。</p>\n<p>下面是几个ExceptionHandler注解的使用例子：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Controller</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ExceptionHandlingController</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// @RequestHandler methods</span></span><br><span class=\"line\">  ...</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"comment\">// 以下是异常处理方法</span></span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"comment\">// 将DataIntegrityViolationException转化为Http Status Code为409的响应</span></span><br><span class=\"line\">  <span class=\"meta\">@ResponseStatus</span>(value=HttpStatus.CONFLICT, reason=<span class=\"string\">\"Data integrity violation\"</span>)  <span class=\"comment\">// 409</span></span><br><span class=\"line\">  <span class=\"meta\">@ExceptionHandler</span>(DataIntegrityViolationException.class)</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">conflict</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// Nothing to do</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"comment\">// 针对SQLException和DataAccessException返回视图databaseError</span></span><br><span class=\"line\">  <span class=\"meta\">@ExceptionHandler</span>(&#123;SQLException.class,DataAccessException.class&#125;)</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">databaseError</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// Nothing to do.  Returns the logical view name of an error page, passed to</span></span><br><span class=\"line\">    <span class=\"comment\">// the view-resolver(s) in usual way.</span></span><br><span class=\"line\">    <span class=\"comment\">// Note that the exception is _not_ available to this view (it is not added to</span></span><br><span class=\"line\">    <span class=\"comment\">// the model) but see \"Extending ExceptionHandlerExceptionResolver\" below.</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">\"databaseError\"</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 创建ModleAndView，将异常和请求的信息放入到Model中，指定视图名字，并返回该ModleAndView</span></span><br><span class=\"line\">  <span class=\"meta\">@ExceptionHandler</span>(Exception.class)</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> ModelAndView <span class=\"title\">handleError</span><span class=\"params\">(HttpServletRequest req, Exception exception)</span> </span>&#123;</span><br><span class=\"line\">    logger.error(<span class=\"string\">\"Request: \"</span> + req.getRequestURL() + <span class=\"string\">\" raised \"</span> + exception);</span><br><span class=\"line\"></span><br><span class=\"line\">    ModelAndView mav = <span class=\"keyword\">new</span> ModelAndView();</span><br><span class=\"line\">    mav.addObject(<span class=\"string\">\"exception\"</span>, exception);</span><br><span class=\"line\">    mav.addObject(<span class=\"string\">\"url\"</span>, req.getRequestURL());</span><br><span class=\"line\">    mav.setViewName(<span class=\"string\">\"error\"</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> mav;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>需要注意的是，上面例子中的ExceptionHandler方法的作用域，只是在本Controller类中。如果需要使用ExceptionHandler来处理全局的Exception，则需要使用ControllerAdvice注解。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@ControllerAdvice</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">GlobalDefaultExceptionHandler</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> String DEFAULT_ERROR_VIEW = <span class=\"string\">\"error\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@ExceptionHandler</span>(value = Exception.class)</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> ModelAndView <span class=\"title\">defaultErrorHandler</span><span class=\"params\">(HttpServletRequest req, Exception e)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 如果异常使用了ResponseStatus注解，那么重新抛出该异常，Spring框架会处理该异常。 </span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (AnnotationUtils.findAnnotation(e.getClass(), ResponseStatus.class) != <span class=\"keyword\">null</span>)</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> e;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 否则创建ModleAndView，处理该异常。</span></span><br><span class=\"line\">        ModelAndView mav = <span class=\"keyword\">new</span> ModelAndView();</span><br><span class=\"line\">        mav.addObject(<span class=\"string\">\"exception\"</span>, e);</span><br><span class=\"line\">        mav.addObject(<span class=\"string\">\"url\"</span>, req.getRequestURL());</span><br><span class=\"line\">        mav.setViewName(DEFAULT_ERROR_VIEW);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> mav;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3><span id=\"simplemappingexceptionresolver\">SimpleMappingExceptionResolver</span></h3><p>提供了将异常映射为视图的能力，高度可定制化。其提供的能力有：</p>\n<ol>\n<li>根据异常的类型，将异常映射到视图；</li>\n<li>可以为不符合处理条件没有被处理的异常，指定一个默认的错误返回；</li>\n<li>处理异常时，记录log信息；</li>\n<li>指定需要添加到Modle中的Exception属性，从而在视图中展示该属性。</li>\n</ol>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Configuration</span></span><br><span class=\"line\"><span class=\"meta\">@EnableWebMvc</span> </span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MvcConfiguration</span> <span class=\"keyword\">extends</span> <span class=\"title\">WebMvcConfigurerAdapter</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Bean</span>(name=<span class=\"string\">\"simpleMappingExceptionResolver\"</span>)</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> SimpleMappingExceptionResolver <span class=\"title\">createSimpleMappingExceptionResolver</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        SimpleMappingExceptionResolver r = <span class=\"keyword\">new</span> SimpleMappingExceptionResolver();</span><br><span class=\"line\"></span><br><span class=\"line\">        Properties mappings = <span class=\"keyword\">new</span> Properties();</span><br><span class=\"line\">        mappings.setProperty(<span class=\"string\">\"DatabaseException\"</span>, <span class=\"string\">\"databaseError\"</span>);</span><br><span class=\"line\">        mappings.setProperty(<span class=\"string\">\"InvalidCreditCardException\"</span>, <span class=\"string\">\"creditCardError\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        r.setExceptionMappings(mappings);  <span class=\"comment\">// 默认为空</span></span><br><span class=\"line\">        r.setDefaultErrorView(<span class=\"string\">\"error\"</span>);    <span class=\"comment\">// 默认没有</span></span><br><span class=\"line\">        r.setExceptionAttribute(<span class=\"string\">\"ex\"</span>); </span><br><span class=\"line\">        r.setWarnLogCategory(<span class=\"string\">\"example.MvcLogger\"</span>); </span><br><span class=\"line\">        <span class=\"keyword\">return</span> r;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3><span id=\"自定义exceptionresolver\">自定义ExceptionResolver</span></h3><p>Spring MVC的异常处理非常的灵活，如果提供的ExceptionResolver类不能满足使用，我们可以实现自己的异常处理类。可以通过继承SimpleMappingExceptionResolver来定制Mapping的方式和能力，也可以直接继承AbstractHandlerExceptionResolver来实现其它类型的异常处理类。</p>\n<h2><span id=\"spring-mvc是如何创建和使用这些resolver的\">Spring MVC是如何创建和使用这些Resolver的？</span></h2><p>首先看Spring MVC是怎么加载异常处理bean的。</p>\n<p>Spring MVC有两种加载异常处理类的方式，一种是根据类型，这种情况下，会加载ApplicationContext下所有实现了</p>\n<ol>\n<li>ExceptionResolver接口的bean，并根据其order属性排序，依次调用；一种是根据名字，这种情况下会加载ApplicationContext下，名字为handlerExceptionResolver的bean。</li>\n<li>不管使用那种加载方式，如果在ApplicationContext中没有找到异常处理bean，那么Spring MVC会加载默认的异常处理bean。</li>\n<li>默认的异常处理bean定义在DispatcherServlet.properties中。</li>\n</ol>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">org.springframework.web.servlet.HandlerExceptionResolver=org.springframework.web.servlet.mvc.annotation.AnnotationMethodHandlerExceptionResolver,\\</span><br><span class=\"line\">    org.springframework.web.servlet.mvc.annotation.ResponseStatusExceptionResolver,\\</span><br><span class=\"line\">    org.springframework.web.servlet.mvc.support.DefaultHandlerExceptionResolver</span><br></pre></td></tr></table></figure>\n<p>以下代码摘自ispatcherServlet，描述了异常处理类的加载过程：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Initialize the HandlerMappings used by this class.</span></span><br><span class=\"line\"><span class=\"comment\"> * &lt;p&gt;If no HandlerMapping beans are defined in the BeanFactory for this namespace,</span></span><br><span class=\"line\"><span class=\"comment\"> * we default to BeanNameUrlHandlerMapping.</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">initHandlerMappings</span><span class=\"params\">(ApplicationContext context)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.handlerMappings = <span class=\"keyword\">null</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.detectAllHandlerMappings) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// Find all HandlerMappings in the ApplicationContext, including ancestor contexts.</span></span><br><span class=\"line\">        Map&lt;String, HandlerMapping&gt; matchingBeans =</span><br><span class=\"line\">                BeanFactoryUtils.beansOfTypeIncludingAncestors(context, HandlerMapping.class, <span class=\"keyword\">true</span>, <span class=\"keyword\">false</span>);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!matchingBeans.isEmpty()) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.handlerMappings = <span class=\"keyword\">new</span> ArrayList&lt;HandlerMapping&gt;(matchingBeans.values());</span><br><span class=\"line\">            <span class=\"comment\">// We keep HandlerMappings in sorted order.</span></span><br><span class=\"line\">            OrderComparator.sort(<span class=\"keyword\">this</span>.handlerMappings);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            HandlerMapping hm = context.getBean(HANDLER_MAPPING_BEAN_NAME, HandlerMapping.class);</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.handlerMappings = Collections.singletonList(hm);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">catch</span> (NoSuchBeanDefinitionException ex) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// Ignore, we'll add a default HandlerMapping later.</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// Ensure we have at least one HandlerMapping, by registering</span></span><br><span class=\"line\">    <span class=\"comment\">// a default HandlerMapping if no other mappings are found.</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.handlerMappings == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.handlerMappings = getDefaultStrategies(context, HandlerMapping.class);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (logger.isDebugEnabled()) &#123;</span><br><span class=\"line\">            logger.debug(<span class=\"string\">\"No HandlerMappings found in servlet '\"</span> + getServletName() + <span class=\"string\">\"': using default\"</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>然后看Spring MVC是怎么使用异常处理bean的。</p>\n<ol>\n<li>Spring MVC把请求映射和处理过程放到try catch中，捕获到异常后，使用异常处理bean进行处理。</li>\n<li>所有异常处理bean按照order属性排序，在处理过程中，遇到第一个成功处理异常的异常处理bean之后，不再调用后续的异常处理bean。</li>\n</ol>\n<p>以下代码摘自DispatcherServlet，描述了处理异常的过程。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Process the actual dispatching to the handler.</span></span><br><span class=\"line\"><span class=\"comment\"> * &lt;p&gt;The handler will be obtained by applying the servlet's HandlerMappings in order.</span></span><br><span class=\"line\"><span class=\"comment\"> * The HandlerAdapter will be obtained by querying the servlet's installed HandlerAdapters</span></span><br><span class=\"line\"><span class=\"comment\"> * to find the first that supports the handler class.</span></span><br><span class=\"line\"><span class=\"comment\"> * &lt;p&gt;All HTTP methods are handled by this method. It's up to HandlerAdapters or handlers</span></span><br><span class=\"line\"><span class=\"comment\"> * themselves to decide which methods are acceptable.</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> request current HTTP request</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> response current HTTP response</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@throws</span> Exception in case of any kind of processing failure</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">doDispatch</span><span class=\"params\">(HttpServletRequest request, HttpServletResponse response)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\">    HttpServletRequest processedRequest = request;</span><br><span class=\"line\">    HandlerExecutionChain mappedHandler = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">    <span class=\"keyword\">boolean</span> multipartRequestParsed = <span class=\"keyword\">false</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    WebAsyncManager asyncManager = WebAsyncUtils.getAsyncManager(request);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">        ModelAndView mv = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">        Exception dispatchException = <span class=\"keyword\">null</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            processedRequest = checkMultipart(request);</span><br><span class=\"line\">            multipartRequestParsed = (processedRequest != request);</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\">// Determine handler for the current request.</span></span><br><span class=\"line\">            mappedHandler = getHandler(processedRequest);</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (mappedHandler == <span class=\"keyword\">null</span> || mappedHandler.getHandler() == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                noHandlerFound(processedRequest, response);</span><br><span class=\"line\">                <span class=\"keyword\">return</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\">// Determine handler adapter for the current request.</span></span><br><span class=\"line\">            HandlerAdapter ha = getHandlerAdapter(mappedHandler.getHandler());</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\">// Process last-modified header, if supported by the handler.</span></span><br><span class=\"line\">            String method = request.getMethod();</span><br><span class=\"line\">            <span class=\"keyword\">boolean</span> isGet = <span class=\"string\">\"GET\"</span>.equals(method);</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (isGet || <span class=\"string\">\"HEAD\"</span>.equals(method)) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">long</span> lastModified = ha.getLastModified(request, mappedHandler.getHandler());</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (logger.isDebugEnabled()) &#123;</span><br><span class=\"line\">                    logger.debug(<span class=\"string\">\"Last-Modified value for [\"</span> + getRequestUri(request) + <span class=\"string\">\"] is: \"</span> + lastModified);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (<span class=\"keyword\">new</span> ServletWebRequest(request, response).checkNotModified(lastModified) &amp;&amp; isGet) &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">return</span>;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (!mappedHandler.applyPreHandle(processedRequest, response)) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\">// Actually invoke the handler.</span></span><br><span class=\"line\">            mv = ha.handle(processedRequest, response, mappedHandler.getHandler());</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (asyncManager.isConcurrentHandlingStarted()) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            applyDefaultViewName(request, mv);</span><br><span class=\"line\">            mappedHandler.applyPostHandle(processedRequest, response, mv);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">catch</span> (Exception ex) &#123;</span><br><span class=\"line\">            dispatchException = ex;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        processDispatchResult(processedRequest, response, mappedHandler, mv, dispatchException);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">catch</span> (Exception ex) &#123;</span><br><span class=\"line\">        triggerAfterCompletion(processedRequest, response, mappedHandler, ex);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">catch</span> (Error err) &#123;</span><br><span class=\"line\">        triggerAfterCompletionWithError(processedRequest, response, mappedHandler, err);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (asyncManager.isConcurrentHandlingStarted()) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// Instead of postHandle and afterCompletion</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (mappedHandler != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                mappedHandler.applyAfterConcurrentHandlingStarted(processedRequest, response);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"comment\">// Clean up any resources used by a multipart request.</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (multipartRequestParsed) &#123;</span><br><span class=\"line\">                cleanupMultipart(processedRequest);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Determine an error ModelAndView via the registered HandlerExceptionResolvers.</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> request current HTTP request</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> response current HTTP response</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> handler the executed handler, or &#123;<span class=\"doctag\">@code</span> null&#125; if none chosen at the time of the exception</span></span><br><span class=\"line\"><span class=\"comment\"> * (for example, if multipart resolution failed)</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> ex the exception that got thrown during handler execution</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span> a corresponding ModelAndView to forward to</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@throws</span> Exception if no error ModelAndView found</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">protected</span> ModelAndView <span class=\"title\">processHandlerException</span><span class=\"params\">(HttpServletRequest request, HttpServletResponse response,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">        Object handler, Exception ex)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// Check registered HandlerExceptionResolvers...</span></span><br><span class=\"line\">    ModelAndView exMv = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (HandlerExceptionResolver handlerExceptionResolver : <span class=\"keyword\">this</span>.handlerExceptionResolvers) &#123;</span><br><span class=\"line\">        exMv = handlerExceptionResolver.resolveException(request, response, handler, ex);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (exMv != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (exMv != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (exMv.isEmpty()) &#123;</span><br><span class=\"line\">            request.setAttribute(EXCEPTION_ATTRIBUTE, ex);</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// We might still need view name translation for a plain error model...</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!exMv.hasView()) &#123;</span><br><span class=\"line\">            exMv.setViewName(getDefaultViewName(request));</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (logger.isDebugEnabled()) &#123;</span><br><span class=\"line\">            logger.debug(<span class=\"string\">\"Handler execution resulted in exception - forwarding to resolved error view: \"</span> + exMv, ex);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        WebUtils.exposeErrorRequestAttributes(request, ex, getServletName());</span><br><span class=\"line\">        <span class=\"keyword\">return</span> exMv;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">throw</span> ex;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2><span id=\"何时该使用何种exceptionresolver\">何时该使用何种ExceptionResolver？</span></h2><p>Spring提供了很多选择和非常灵活的使用方式，下面是一些使用建议：</p>\n<ol>\n<li>如果自定义异常类，考虑加上ResponseStatus注解；</li>\n<li>对于没有ResponseStatus注解的异常，可以通过使用ExceptionHandler+ControllerAdvice注解，或者通过配置SimpleMappingExceptionResolver，来为整个Web应用提供统一的异常处理。</li>\n<li>如果应用中有些异常处理方式，只针对特定的Controller使用，那么在这个Controller中使用ExceptionHandler注解。</li>\n<li>不要使用过多的异常处理方式，不然的话，维护起来会很苦恼，因为异常的处理分散在很多不同的地方。</li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"Spring-MVC中异常处理的类体系结构\"><a href=\"#Spring-MVC中异常处理的类体系结构\" class=\"headerlink\" title=\"Spring MVC中异常处理的类体系结构\"></a>Spring MVC中异常处理的类体系结构</h1><p>下图展示异常处理的相关的主要类和接口</p>\n<p><img src=\"img/SpringMVCExceptionResolver.png\" alt=\"alt\"></p>\n<p>在Spring MVC中，所有用于处理在请求映射和请求处理过程中抛出的异常的类，都要实现HandlerExceptionResolver接口。AbstractHandlerExceptionResolver实现该接口和Orderd接口，是HandlerExceptionResolver类的实现的基类。ResponseStatusExceptionResolver等具体的异常处理类均在AbstractHandlerExceptionResolver之上，实现了具体的异常处理方式。一个基于Spring MVC的Web应用程序中，可以存在多个实现了HandlerExceptionResolver的异常处理类，他们的执行顺序，由其order属性决定, order值越小，越是优先执行, 在执行到第一个返回不是null的ModelAndView的Resolver时，不再执行后续的尚未执行的Resolver的异常处理方法。。</p>\n<p>下面我逐个介绍一下SpringMVC提供的这些异常处理类的功能。</p>\n<h3 id=\"DefaultHandlerExceptionResolver\"><a href=\"#DefaultHandlerExceptionResolver\" class=\"headerlink\" title=\"DefaultHandlerExceptionResolver\"></a>DefaultHandlerExceptionResolver</h3><p>HandlerExceptionResolver接口的默认实现，基本上是Spring MVC内部使用，用来处理Spring定义的各种标准异常，将其转化为相对应的HTTP Status Code。其处理的异常类型有：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">handleNoSuchRequestHandlingMethod</span><br><span class=\"line\">handleHttpRequestMethodNotSupported</span><br><span class=\"line\">handleHttpMediaTypeNotSupported</span><br><span class=\"line\">handleMissingServletRequestParameter</span><br><span class=\"line\">handleServletRequestBindingException</span><br><span class=\"line\">handleTypeMismatch</span><br><span class=\"line\">handleHttpMessageNotReadable</span><br><span class=\"line\">handleHttpMessageNotWritable</span><br><span class=\"line\">handleMethodArgumentNotValidException</span><br><span class=\"line\">handleMissingServletRequestParameter</span><br><span class=\"line\">handleMissingServletRequestPartException</span><br><span class=\"line\">handleBindException</span><br></pre></td></tr></table></figure>\n<h3 id=\"ResponseStatusExceptionResolver\"><a href=\"#ResponseStatusExceptionResolver\" class=\"headerlink\" title=\"ResponseStatusExceptionResolver\"></a>ResponseStatusExceptionResolver</h3><p>用来支持ResponseStatus的使用，处理使用了ResponseStatus注解的异常，根据注解的内容，返回相应的HTTP Status Code和内容给客户端。如果Web应用程序中配置了ResponseStatusExceptionResolver，那么我们就可以使用ResponseStatus注解来注解我们自己编写的异常类，并在Controller中抛出该异常类，之后ResponseStatusExceptionResolver就会自动帮我们处理剩下的工作。</p>\n<p>这是一个自己编写的异常，用来表示订单不存在：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@ResponseStatus</span>(value=HttpStatus.NOT_FOUND, reason=<span class=\"string\">\"No such Order\"</span>)  <span class=\"comment\">// 404</span></span><br><span class=\"line\">   <span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">OrderNotFoundException</span> <span class=\"keyword\">extends</span> <span class=\"title\">RuntimeException</span> </span>&#123;</span><br><span class=\"line\">       <span class=\"comment\">// ...</span></span><br><span class=\"line\">   &#125;</span><br></pre></td></tr></table></figure>\n<p>这是一个使用该异常的Controller方法：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@RequestMapping</span>(value=<span class=\"string\">\"/orders/&#123;id&#125;\"</span>, method=GET)</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">showOrder</span><span class=\"params\">(@PathVariable(<span class=\"string\">\"id\"</span>)</span> <span class=\"keyword\">long</span> id, Model model) </span>&#123;</span><br><span class=\"line\">        Order order = orderRepository.findOrderById(id);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (order == <span class=\"keyword\">null</span>) <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> OrderNotFoundException(id);</span><br><span class=\"line\">        model.addAttribute(order);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">\"orderDetail\"</span>;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n<p>这样，当OrderNotFoundException被抛出时，ResponseStatusExceptionResolver会返回给客户端一个HTTP Status Code为404的响应。</p>\n<h3 id=\"AnnotationMethodHandlerExceptionResolver和ExceptionHandlerExceptionResolver\"><a href=\"#AnnotationMethodHandlerExceptionResolver和ExceptionHandlerExceptionResolver\" class=\"headerlink\" title=\"AnnotationMethodHandlerExceptionResolver和ExceptionHandlerExceptionResolver\"></a>AnnotationMethodHandlerExceptionResolver和ExceptionHandlerExceptionResolver</h3><p>用来支持ExceptionHandler注解，使用被ExceptionHandler注解所标记的方法来处理异常。其中AnnotationMethodHandlerExceptionResolver在3.0版本中开始提供，ExceptionHandlerExceptionResolver在3.1版本中开始提供，从3.2版本开始，Spring推荐使用ExceptionHandlerExceptionResolver。<br>如果配置了AnnotationMethodHandlerExceptionResolver和ExceptionHandlerExceptionResolver这两个异常处理bean之一，那么我们就可以使用ExceptionHandler注解来处理异常。</p>\n<p>下面是几个ExceptionHandler注解的使用例子：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Controller</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ExceptionHandlingController</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// @RequestHandler methods</span></span><br><span class=\"line\">  ...</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"comment\">// 以下是异常处理方法</span></span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"comment\">// 将DataIntegrityViolationException转化为Http Status Code为409的响应</span></span><br><span class=\"line\">  <span class=\"meta\">@ResponseStatus</span>(value=HttpStatus.CONFLICT, reason=<span class=\"string\">\"Data integrity violation\"</span>)  <span class=\"comment\">// 409</span></span><br><span class=\"line\">  <span class=\"meta\">@ExceptionHandler</span>(DataIntegrityViolationException.class)</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">conflict</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// Nothing to do</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"comment\">// 针对SQLException和DataAccessException返回视图databaseError</span></span><br><span class=\"line\">  <span class=\"meta\">@ExceptionHandler</span>(&#123;SQLException.class,DataAccessException.class&#125;)</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">databaseError</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// Nothing to do.  Returns the logical view name of an error page, passed to</span></span><br><span class=\"line\">    <span class=\"comment\">// the view-resolver(s) in usual way.</span></span><br><span class=\"line\">    <span class=\"comment\">// Note that the exception is _not_ available to this view (it is not added to</span></span><br><span class=\"line\">    <span class=\"comment\">// the model) but see \"Extending ExceptionHandlerExceptionResolver\" below.</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">\"databaseError\"</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 创建ModleAndView，将异常和请求的信息放入到Model中，指定视图名字，并返回该ModleAndView</span></span><br><span class=\"line\">  <span class=\"meta\">@ExceptionHandler</span>(Exception.class)</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> ModelAndView <span class=\"title\">handleError</span><span class=\"params\">(HttpServletRequest req, Exception exception)</span> </span>&#123;</span><br><span class=\"line\">    logger.error(<span class=\"string\">\"Request: \"</span> + req.getRequestURL() + <span class=\"string\">\" raised \"</span> + exception);</span><br><span class=\"line\"></span><br><span class=\"line\">    ModelAndView mav = <span class=\"keyword\">new</span> ModelAndView();</span><br><span class=\"line\">    mav.addObject(<span class=\"string\">\"exception\"</span>, exception);</span><br><span class=\"line\">    mav.addObject(<span class=\"string\">\"url\"</span>, req.getRequestURL());</span><br><span class=\"line\">    mav.setViewName(<span class=\"string\">\"error\"</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> mav;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>需要注意的是，上面例子中的ExceptionHandler方法的作用域，只是在本Controller类中。如果需要使用ExceptionHandler来处理全局的Exception，则需要使用ControllerAdvice注解。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@ControllerAdvice</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">GlobalDefaultExceptionHandler</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> String DEFAULT_ERROR_VIEW = <span class=\"string\">\"error\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@ExceptionHandler</span>(value = Exception.class)</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> ModelAndView <span class=\"title\">defaultErrorHandler</span><span class=\"params\">(HttpServletRequest req, Exception e)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 如果异常使用了ResponseStatus注解，那么重新抛出该异常，Spring框架会处理该异常。 </span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (AnnotationUtils.findAnnotation(e.getClass(), ResponseStatus.class) != <span class=\"keyword\">null</span>)</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> e;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 否则创建ModleAndView，处理该异常。</span></span><br><span class=\"line\">        ModelAndView mav = <span class=\"keyword\">new</span> ModelAndView();</span><br><span class=\"line\">        mav.addObject(<span class=\"string\">\"exception\"</span>, e);</span><br><span class=\"line\">        mav.addObject(<span class=\"string\">\"url\"</span>, req.getRequestURL());</span><br><span class=\"line\">        mav.setViewName(DEFAULT_ERROR_VIEW);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> mav;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"SimpleMappingExceptionResolver\"><a href=\"#SimpleMappingExceptionResolver\" class=\"headerlink\" title=\"SimpleMappingExceptionResolver\"></a>SimpleMappingExceptionResolver</h3><p>提供了将异常映射为视图的能力，高度可定制化。其提供的能力有：</p>\n<ol>\n<li>根据异常的类型，将异常映射到视图；</li>\n<li>可以为不符合处理条件没有被处理的异常，指定一个默认的错误返回；</li>\n<li>处理异常时，记录log信息；</li>\n<li>指定需要添加到Modle中的Exception属性，从而在视图中展示该属性。</li>\n</ol>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Configuration</span></span><br><span class=\"line\"><span class=\"meta\">@EnableWebMvc</span> </span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MvcConfiguration</span> <span class=\"keyword\">extends</span> <span class=\"title\">WebMvcConfigurerAdapter</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Bean</span>(name=<span class=\"string\">\"simpleMappingExceptionResolver\"</span>)</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> SimpleMappingExceptionResolver <span class=\"title\">createSimpleMappingExceptionResolver</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        SimpleMappingExceptionResolver r = <span class=\"keyword\">new</span> SimpleMappingExceptionResolver();</span><br><span class=\"line\"></span><br><span class=\"line\">        Properties mappings = <span class=\"keyword\">new</span> Properties();</span><br><span class=\"line\">        mappings.setProperty(<span class=\"string\">\"DatabaseException\"</span>, <span class=\"string\">\"databaseError\"</span>);</span><br><span class=\"line\">        mappings.setProperty(<span class=\"string\">\"InvalidCreditCardException\"</span>, <span class=\"string\">\"creditCardError\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        r.setExceptionMappings(mappings);  <span class=\"comment\">// 默认为空</span></span><br><span class=\"line\">        r.setDefaultErrorView(<span class=\"string\">\"error\"</span>);    <span class=\"comment\">// 默认没有</span></span><br><span class=\"line\">        r.setExceptionAttribute(<span class=\"string\">\"ex\"</span>); </span><br><span class=\"line\">        r.setWarnLogCategory(<span class=\"string\">\"example.MvcLogger\"</span>); </span><br><span class=\"line\">        <span class=\"keyword\">return</span> r;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"自定义ExceptionResolver\"><a href=\"#自定义ExceptionResolver\" class=\"headerlink\" title=\"自定义ExceptionResolver\"></a>自定义ExceptionResolver</h3><p>Spring MVC的异常处理非常的灵活，如果提供的ExceptionResolver类不能满足使用，我们可以实现自己的异常处理类。可以通过继承SimpleMappingExceptionResolver来定制Mapping的方式和能力，也可以直接继承AbstractHandlerExceptionResolver来实现其它类型的异常处理类。</p>\n<h2 id=\"Spring-MVC是如何创建和使用这些Resolver的？\"><a href=\"#Spring-MVC是如何创建和使用这些Resolver的？\" class=\"headerlink\" title=\"Spring MVC是如何创建和使用这些Resolver的？\"></a>Spring MVC是如何创建和使用这些Resolver的？</h2><p>首先看Spring MVC是怎么加载异常处理bean的。</p>\n<p>Spring MVC有两种加载异常处理类的方式，一种是根据类型，这种情况下，会加载ApplicationContext下所有实现了</p>\n<ol>\n<li>ExceptionResolver接口的bean，并根据其order属性排序，依次调用；一种是根据名字，这种情况下会加载ApplicationContext下，名字为handlerExceptionResolver的bean。</li>\n<li>不管使用那种加载方式，如果在ApplicationContext中没有找到异常处理bean，那么Spring MVC会加载默认的异常处理bean。</li>\n<li>默认的异常处理bean定义在DispatcherServlet.properties中。</li>\n</ol>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">org.springframework.web.servlet.HandlerExceptionResolver=org.springframework.web.servlet.mvc.annotation.AnnotationMethodHandlerExceptionResolver,\\</span><br><span class=\"line\">    org.springframework.web.servlet.mvc.annotation.ResponseStatusExceptionResolver,\\</span><br><span class=\"line\">    org.springframework.web.servlet.mvc.support.DefaultHandlerExceptionResolver</span><br></pre></td></tr></table></figure>\n<p>以下代码摘自ispatcherServlet，描述了异常处理类的加载过程：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Initialize the HandlerMappings used by this class.</span></span><br><span class=\"line\"><span class=\"comment\"> * &lt;p&gt;If no HandlerMapping beans are defined in the BeanFactory for this namespace,</span></span><br><span class=\"line\"><span class=\"comment\"> * we default to BeanNameUrlHandlerMapping.</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">initHandlerMappings</span><span class=\"params\">(ApplicationContext context)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.handlerMappings = <span class=\"keyword\">null</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.detectAllHandlerMappings) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// Find all HandlerMappings in the ApplicationContext, including ancestor contexts.</span></span><br><span class=\"line\">        Map&lt;String, HandlerMapping&gt; matchingBeans =</span><br><span class=\"line\">                BeanFactoryUtils.beansOfTypeIncludingAncestors(context, HandlerMapping.class, <span class=\"keyword\">true</span>, <span class=\"keyword\">false</span>);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!matchingBeans.isEmpty()) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.handlerMappings = <span class=\"keyword\">new</span> ArrayList&lt;HandlerMapping&gt;(matchingBeans.values());</span><br><span class=\"line\">            <span class=\"comment\">// We keep HandlerMappings in sorted order.</span></span><br><span class=\"line\">            OrderComparator.sort(<span class=\"keyword\">this</span>.handlerMappings);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            HandlerMapping hm = context.getBean(HANDLER_MAPPING_BEAN_NAME, HandlerMapping.class);</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.handlerMappings = Collections.singletonList(hm);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">catch</span> (NoSuchBeanDefinitionException ex) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// Ignore, we'll add a default HandlerMapping later.</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// Ensure we have at least one HandlerMapping, by registering</span></span><br><span class=\"line\">    <span class=\"comment\">// a default HandlerMapping if no other mappings are found.</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.handlerMappings == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.handlerMappings = getDefaultStrategies(context, HandlerMapping.class);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (logger.isDebugEnabled()) &#123;</span><br><span class=\"line\">            logger.debug(<span class=\"string\">\"No HandlerMappings found in servlet '\"</span> + getServletName() + <span class=\"string\">\"': using default\"</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>然后看Spring MVC是怎么使用异常处理bean的。</p>\n<ol>\n<li>Spring MVC把请求映射和处理过程放到try catch中，捕获到异常后，使用异常处理bean进行处理。</li>\n<li>所有异常处理bean按照order属性排序，在处理过程中，遇到第一个成功处理异常的异常处理bean之后，不再调用后续的异常处理bean。</li>\n</ol>\n<p>以下代码摘自DispatcherServlet，描述了处理异常的过程。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Process the actual dispatching to the handler.</span></span><br><span class=\"line\"><span class=\"comment\"> * &lt;p&gt;The handler will be obtained by applying the servlet's HandlerMappings in order.</span></span><br><span class=\"line\"><span class=\"comment\"> * The HandlerAdapter will be obtained by querying the servlet's installed HandlerAdapters</span></span><br><span class=\"line\"><span class=\"comment\"> * to find the first that supports the handler class.</span></span><br><span class=\"line\"><span class=\"comment\"> * &lt;p&gt;All HTTP methods are handled by this method. It's up to HandlerAdapters or handlers</span></span><br><span class=\"line\"><span class=\"comment\"> * themselves to decide which methods are acceptable.</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> request current HTTP request</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> response current HTTP response</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@throws</span> Exception in case of any kind of processing failure</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">doDispatch</span><span class=\"params\">(HttpServletRequest request, HttpServletResponse response)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\">    HttpServletRequest processedRequest = request;</span><br><span class=\"line\">    HandlerExecutionChain mappedHandler = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">    <span class=\"keyword\">boolean</span> multipartRequestParsed = <span class=\"keyword\">false</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    WebAsyncManager asyncManager = WebAsyncUtils.getAsyncManager(request);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">        ModelAndView mv = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">        Exception dispatchException = <span class=\"keyword\">null</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            processedRequest = checkMultipart(request);</span><br><span class=\"line\">            multipartRequestParsed = (processedRequest != request);</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\">// Determine handler for the current request.</span></span><br><span class=\"line\">            mappedHandler = getHandler(processedRequest);</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (mappedHandler == <span class=\"keyword\">null</span> || mappedHandler.getHandler() == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                noHandlerFound(processedRequest, response);</span><br><span class=\"line\">                <span class=\"keyword\">return</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\">// Determine handler adapter for the current request.</span></span><br><span class=\"line\">            HandlerAdapter ha = getHandlerAdapter(mappedHandler.getHandler());</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\">// Process last-modified header, if supported by the handler.</span></span><br><span class=\"line\">            String method = request.getMethod();</span><br><span class=\"line\">            <span class=\"keyword\">boolean</span> isGet = <span class=\"string\">\"GET\"</span>.equals(method);</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (isGet || <span class=\"string\">\"HEAD\"</span>.equals(method)) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">long</span> lastModified = ha.getLastModified(request, mappedHandler.getHandler());</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (logger.isDebugEnabled()) &#123;</span><br><span class=\"line\">                    logger.debug(<span class=\"string\">\"Last-Modified value for [\"</span> + getRequestUri(request) + <span class=\"string\">\"] is: \"</span> + lastModified);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (<span class=\"keyword\">new</span> ServletWebRequest(request, response).checkNotModified(lastModified) &amp;&amp; isGet) &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">return</span>;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (!mappedHandler.applyPreHandle(processedRequest, response)) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\">// Actually invoke the handler.</span></span><br><span class=\"line\">            mv = ha.handle(processedRequest, response, mappedHandler.getHandler());</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (asyncManager.isConcurrentHandlingStarted()) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            applyDefaultViewName(request, mv);</span><br><span class=\"line\">            mappedHandler.applyPostHandle(processedRequest, response, mv);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">catch</span> (Exception ex) &#123;</span><br><span class=\"line\">            dispatchException = ex;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        processDispatchResult(processedRequest, response, mappedHandler, mv, dispatchException);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">catch</span> (Exception ex) &#123;</span><br><span class=\"line\">        triggerAfterCompletion(processedRequest, response, mappedHandler, ex);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">catch</span> (Error err) &#123;</span><br><span class=\"line\">        triggerAfterCompletionWithError(processedRequest, response, mappedHandler, err);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (asyncManager.isConcurrentHandlingStarted()) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// Instead of postHandle and afterCompletion</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (mappedHandler != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                mappedHandler.applyAfterConcurrentHandlingStarted(processedRequest, response);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"comment\">// Clean up any resources used by a multipart request.</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (multipartRequestParsed) &#123;</span><br><span class=\"line\">                cleanupMultipart(processedRequest);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Determine an error ModelAndView via the registered HandlerExceptionResolvers.</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> request current HTTP request</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> response current HTTP response</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> handler the executed handler, or &#123;<span class=\"doctag\">@code</span> null&#125; if none chosen at the time of the exception</span></span><br><span class=\"line\"><span class=\"comment\"> * (for example, if multipart resolution failed)</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> ex the exception that got thrown during handler execution</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span> a corresponding ModelAndView to forward to</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@throws</span> Exception if no error ModelAndView found</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">protected</span> ModelAndView <span class=\"title\">processHandlerException</span><span class=\"params\">(HttpServletRequest request, HttpServletResponse response,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">        Object handler, Exception ex)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// Check registered HandlerExceptionResolvers...</span></span><br><span class=\"line\">    ModelAndView exMv = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (HandlerExceptionResolver handlerExceptionResolver : <span class=\"keyword\">this</span>.handlerExceptionResolvers) &#123;</span><br><span class=\"line\">        exMv = handlerExceptionResolver.resolveException(request, response, handler, ex);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (exMv != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (exMv != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (exMv.isEmpty()) &#123;</span><br><span class=\"line\">            request.setAttribute(EXCEPTION_ATTRIBUTE, ex);</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// We might still need view name translation for a plain error model...</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!exMv.hasView()) &#123;</span><br><span class=\"line\">            exMv.setViewName(getDefaultViewName(request));</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (logger.isDebugEnabled()) &#123;</span><br><span class=\"line\">            logger.debug(<span class=\"string\">\"Handler execution resulted in exception - forwarding to resolved error view: \"</span> + exMv, ex);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        WebUtils.exposeErrorRequestAttributes(request, ex, getServletName());</span><br><span class=\"line\">        <span class=\"keyword\">return</span> exMv;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">throw</span> ex;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"何时该使用何种ExceptionResolver？\"><a href=\"#何时该使用何种ExceptionResolver？\" class=\"headerlink\" title=\"何时该使用何种ExceptionResolver？\"></a>何时该使用何种ExceptionResolver？</h2><p>Spring提供了很多选择和非常灵活的使用方式，下面是一些使用建议：</p>\n<ol>\n<li>如果自定义异常类，考虑加上ResponseStatus注解；</li>\n<li>对于没有ResponseStatus注解的异常，可以通过使用ExceptionHandler+ControllerAdvice注解，或者通过配置SimpleMappingExceptionResolver，来为整个Web应用提供统一的异常处理。</li>\n<li>如果应用中有些异常处理方式，只针对特定的Controller使用，那么在这个Controller中使用ExceptionHandler注解。</li>\n<li>不要使用过多的异常处理方式，不然的话，维护起来会很苦恼，因为异常的处理分散在很多不同的地方。</li>\n</ol>\n"},{"_content":"# thymeleaf介绍\n\n在Java世界的MVC框架里，使用的视图技术不少，最基本的是JSP，还有知名的FreeMarker和Velocity等模板引擎。Thymeleaf也是一款优秀的模板引擎，它在HTML5/XHTML的视图层表现的很好，也能在离线情况下处理任何XML文件。它是完全可以替代JSP+JSTL的。\n\n下面是来自于Thymeleaf官方的Q&A：\n\nQ: 和FreeMarker,Velocity相比，Thymeleaf表现得怎样呢？\n\nA：FreeMarker和Velocity都是软件领域杰出的作品，但它们在解决模板问题上的处理哲学和Thymeleaf不一样。\n\nThymeleaf强调的是自然模板，也就是允许模板作为产品原型使用(笔者注:因为其后缀名就是.html，可以直接在浏览器打开)，而FreeMarker和Velocity不行。并且Thymeleaf的语法更简洁、更和目前Web开发的趋势相一致。其次，从架构的角度看，FreeMarker和Velocity更像个文本处理器，所以它们能够处理很多类型的内容，而Thymeleaf是基于XML的，只能处理XML格式的数据。因此这样看，FreeMarker和Velocity更通用些，但恰恰如此，Thymeleaf更能利用XML的特性，尤其是在Web应用中。\n\n[官网地址](http://www.thymeleaf.org/doc/tutorials/3.0/thymeleafspring.html#the-controller)\n\n[spring-boot示例](https://spring.io/guides/gs/serving-web-content/)\n\n\n","source":"_posts/spring-boot/web/Thymeleaf/README.md","raw":"# thymeleaf介绍\n\n在Java世界的MVC框架里，使用的视图技术不少，最基本的是JSP，还有知名的FreeMarker和Velocity等模板引擎。Thymeleaf也是一款优秀的模板引擎，它在HTML5/XHTML的视图层表现的很好，也能在离线情况下处理任何XML文件。它是完全可以替代JSP+JSTL的。\n\n下面是来自于Thymeleaf官方的Q&A：\n\nQ: 和FreeMarker,Velocity相比，Thymeleaf表现得怎样呢？\n\nA：FreeMarker和Velocity都是软件领域杰出的作品，但它们在解决模板问题上的处理哲学和Thymeleaf不一样。\n\nThymeleaf强调的是自然模板，也就是允许模板作为产品原型使用(笔者注:因为其后缀名就是.html，可以直接在浏览器打开)，而FreeMarker和Velocity不行。并且Thymeleaf的语法更简洁、更和目前Web开发的趋势相一致。其次，从架构的角度看，FreeMarker和Velocity更像个文本处理器，所以它们能够处理很多类型的内容，而Thymeleaf是基于XML的，只能处理XML格式的数据。因此这样看，FreeMarker和Velocity更通用些，但恰恰如此，Thymeleaf更能利用XML的特性，尤其是在Web应用中。\n\n[官网地址](http://www.thymeleaf.org/doc/tutorials/3.0/thymeleafspring.html#the-controller)\n\n[spring-boot示例](https://spring.io/guides/gs/serving-web-content/)\n\n\n","slug":"spring-boot/web/Thymeleaf/README","published":1,"date":"2018-11-20T14:55:26.982Z","updated":"2018-11-20T14:55:26.982Z","title":"","comments":1,"layout":"post","photos":[],"link":"","_id":"cjopxmsrc000wwfo8h98t3psg","content":"<h1><span id=\"thymeleaf介绍\">thymeleaf介绍</span></h1><p>在Java世界的MVC框架里，使用的视图技术不少，最基本的是JSP，还有知名的FreeMarker和Velocity等模板引擎。Thymeleaf也是一款优秀的模板引擎，它在HTML5/XHTML的视图层表现的很好，也能在离线情况下处理任何XML文件。它是完全可以替代JSP+JSTL的。</p>\n<p>下面是来自于Thymeleaf官方的Q&amp;A：</p>\n<p>Q: 和FreeMarker,Velocity相比，Thymeleaf表现得怎样呢？</p>\n<p>A：FreeMarker和Velocity都是软件领域杰出的作品，但它们在解决模板问题上的处理哲学和Thymeleaf不一样。</p>\n<p>Thymeleaf强调的是自然模板，也就是允许模板作为产品原型使用(笔者注:因为其后缀名就是.html，可以直接在浏览器打开)，而FreeMarker和Velocity不行。并且Thymeleaf的语法更简洁、更和目前Web开发的趋势相一致。其次，从架构的角度看，FreeMarker和Velocity更像个文本处理器，所以它们能够处理很多类型的内容，而Thymeleaf是基于XML的，只能处理XML格式的数据。因此这样看，FreeMarker和Velocity更通用些，但恰恰如此，Thymeleaf更能利用XML的特性，尤其是在Web应用中。</p>\n<p><a href=\"http://www.thymeleaf.org/doc/tutorials/3.0/thymeleafspring.html#the-controller\" target=\"_blank\" rel=\"noopener\">官网地址</a></p>\n<p><a href=\"https://spring.io/guides/gs/serving-web-content/\" target=\"_blank\" rel=\"noopener\">spring-boot示例</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"thymeleaf介绍\"><a href=\"#thymeleaf介绍\" class=\"headerlink\" title=\"thymeleaf介绍\"></a>thymeleaf介绍</h1><p>在Java世界的MVC框架里，使用的视图技术不少，最基本的是JSP，还有知名的FreeMarker和Velocity等模板引擎。Thymeleaf也是一款优秀的模板引擎，它在HTML5/XHTML的视图层表现的很好，也能在离线情况下处理任何XML文件。它是完全可以替代JSP+JSTL的。</p>\n<p>下面是来自于Thymeleaf官方的Q&amp;A：</p>\n<p>Q: 和FreeMarker,Velocity相比，Thymeleaf表现得怎样呢？</p>\n<p>A：FreeMarker和Velocity都是软件领域杰出的作品，但它们在解决模板问题上的处理哲学和Thymeleaf不一样。</p>\n<p>Thymeleaf强调的是自然模板，也就是允许模板作为产品原型使用(笔者注:因为其后缀名就是.html，可以直接在浏览器打开)，而FreeMarker和Velocity不行。并且Thymeleaf的语法更简洁、更和目前Web开发的趋势相一致。其次，从架构的角度看，FreeMarker和Velocity更像个文本处理器，所以它们能够处理很多类型的内容，而Thymeleaf是基于XML的，只能处理XML格式的数据。因此这样看，FreeMarker和Velocity更通用些，但恰恰如此，Thymeleaf更能利用XML的特性，尤其是在Web应用中。</p>\n<p><a href=\"http://www.thymeleaf.org/doc/tutorials/3.0/thymeleafspring.html#the-controller\" target=\"_blank\" rel=\"noopener\">官网地址</a></p>\n<p><a href=\"https://spring.io/guides/gs/serving-web-content/\" target=\"_blank\" rel=\"noopener\">spring-boot示例</a></p>\n"},{"_content":"# application.properties相关通用属性\n\n\n```xml\n# ===================================================================\n# COMMON SPRING BOOT PROPERTIES\n#\n# This sample file is provided as a guideline. Do NOT copy it in its\n# entirety to your own application.               ^^^\n# ===================================================================\n\n\n# ----------------------------------------\n# CORE PROPERTIES\n# ----------------------------------------\n\n# BANNER\nbanner.charset=UTF-8 # Banner file encoding.\nbanner.location=classpath:banner.txt # Banner file location.\nbanner.image.location=classpath:banner.gif # Banner image file location (jpg/png can also be used).\nbanner.image.width= # Width of the banner image in chars (default 76)\nbanner.image.height= # Height of the banner image in chars (default based on image height)\nbanner.image.margin= # Left hand image margin in chars (default 2)\nbanner.image.invert= # If images should be inverted for dark terminal themes (default false)\n\n# LOGGING\nlogging.config= # Location of the logging configuration file. For instance `classpath:logback.xml` for Logback\nlogging.exception-conversion-word=%wEx # Conversion word used when logging exceptions.\nlogging.file= # Log file name. For instance `myapp.log`\nlogging.level.*= # Log levels severity mapping. For instance `logging.level.org.springframework=DEBUG`\nlogging.path= # Location of the log file. For instance `/var/log`\nlogging.pattern.console= # Appender pattern for output to the console. Only supported with the default logback setup.\nlogging.pattern.file= # Appender pattern for output to the file. Only supported with the default logback setup.\nlogging.pattern.level= # Appender pattern for log level (default %5p). Only supported with the default logback setup.\nlogging.register-shutdown-hook=false # Register a shutdown hook for the logging system when it is initialized.\n\n# AOP\nspring.aop.auto=true # Add @EnableAspectJAutoProxy.\nspring.aop.proxy-target-class=false # Whether subclass-based (CGLIB) proxies are to be created (true) as opposed to standard Java interface-based proxies (false).\n\n# IDENTITY (ContextIdApplicationContextInitializer)\nspring.application.index= # Application index.\nspring.application.name= # Application name.\n\n# ADMIN (SpringApplicationAdminJmxAutoConfiguration)\nspring.application.admin.enabled=false # Enable admin features for the application.\nspring.application.admin.jmx-name=org.springframework.boot:type=Admin,name=SpringApplication # JMX name of the application admin MBean.\n\n# AUTO-CONFIGURATION\nspring.autoconfigure.exclude= # Auto-configuration classes to exclude.\n\n# SPRING CORE\nspring.beaninfo.ignore=true # Skip search of BeanInfo classes.\n\n# SPRING CACHE (CacheProperties)\nspring.cache.cache-names= # Comma-separated list of cache names to create if supported by the underlying cache manager.\nspring.cache.caffeine.spec= # The spec to use to create caches. Check CaffeineSpec for more details on the spec format.\nspring.cache.couchbase.expiration=0 # Entry expiration in milliseconds. By default the entries never expire.\nspring.cache.ehcache.config= # The location of the configuration file to use to initialize EhCache.\nspring.cache.guava.spec= # The spec to use to create caches. Check CacheBuilderSpec for more details on the spec format.\nspring.cache.hazelcast.config= # The location of the configuration file to use to initialize Hazelcast.\nspring.cache.infinispan.config= # The location of the configuration file to use to initialize Infinispan.\nspring.cache.jcache.config= # The location of the configuration file to use to initialize the cache manager.\nspring.cache.jcache.provider= # Fully qualified name of the CachingProvider implementation to use to retrieve the JSR-107 compliant cache manager. Only needed if more than one JSR-107 implementation is available on the classpath.\nspring.cache.type= # Cache type, auto-detected according to the environment by default.\n\n# SPRING CONFIG - using environment property only (ConfigFileApplicationListener)\nspring.config.location= # Config file locations.\nspring.config.name=application # Config file name.\n\n# HAZELCAST (HazelcastProperties)\nspring.hazelcast.config= # The location of the configuration file to use to initialize Hazelcast.\n\n# PROJECT INFORMATION (ProjectInfoProperties)\nspring.info.build.location=classpath:META-INF/build-info.properties # Location of the generated build-info.properties file.\nspring.info.git.location=classpath:git.properties # Location of the generated git.properties file.\n\n# JMX\nspring.jmx.default-domain= # JMX domain name.\nspring.jmx.enabled=true # Expose management beans to the JMX domain.\nspring.jmx.server=mbeanServer # MBeanServer bean name.\n\n# Email (MailProperties)\nspring.mail.default-encoding=UTF-8 # Default MimeMessage encoding.\nspring.mail.host= # SMTP server host. For instance `smtp.example.com`\nspring.mail.jndi-name= # Session JNDI name. When set, takes precedence to others mail settings.\nspring.mail.password= # Login password of the SMTP server.\nspring.mail.port= # SMTP server port.\nspring.mail.properties.*= # Additional JavaMail session properties.\nspring.mail.protocol=smtp # Protocol used by the SMTP server.\nspring.mail.test-connection=false # Test that the mail server is available on startup.\nspring.mail.username= # Login user of the SMTP server.\n\n# APPLICATION SETTINGS (SpringApplication)\nspring.main.banner-mode=console # Mode used to display the banner when the application runs.\nspring.main.sources= # Sources (class name, package name or XML resource location) to include in the ApplicationContext.\nspring.main.web-environment= # Run the application in a web environment (auto-detected by default).\n\n# FILE ENCODING (FileEncodingApplicationListener)\nspring.mandatory-file-encoding= # Expected character encoding the application must use.\n\n# INTERNATIONALIZATION (MessageSourceAutoConfiguration)\nspring.messages.always-use-message-format=false # Set whether to always apply the MessageFormat rules, parsing even messages without arguments.\nspring.messages.basename=messages # Comma-separated list of basenames, each following the ResourceBundle convention.\nspring.messages.cache-seconds=-1 # Loaded resource bundle files cache expiration, in seconds. When set to -1, bundles are cached forever.\nspring.messages.encoding=UTF-8 # Message bundles encoding.\nspring.messages.fallback-to-system-locale=true # Set whether to fall back to the system Locale if no files for a specific Locale have been found.\n\n# OUTPUT\nspring.output.ansi.enabled=detect # Configure the ANSI output (can be \"detect\", \"always\", \"never\").\n\n# PID FILE (ApplicationPidFileWriter)\nspring.pid.fail-on-write-error= # Fail if ApplicationPidFileWriter is used but it cannot write the PID file.\nspring.pid.file= # Location of the PID file to write (if ApplicationPidFileWriter is used).\n\n# PROFILES\nspring.profiles.active= # Comma-separated list of active profiles.\nspring.profiles.include= # Unconditionally activate the specified comma separated profiles.\n\n# SENDGRID (SendGridAutoConfiguration)\nspring.sendgrid.api-key= # SendGrid api key (alternative to username/password)\nspring.sendgrid.username= # SendGrid account username\nspring.sendgrid.password= # SendGrid account password\nspring.sendgrid.proxy.host= # SendGrid proxy host\nspring.sendgrid.proxy.port= # SendGrid proxy port\n\n\n# ----------------------------------------\n# WEB PROPERTIES\n# ----------------------------------------\n\n# EMBEDDED SERVER CONFIGURATION (ServerProperties)\nserver.address= # Network address to which the server should bind to.\nserver.compression.enabled=false # If response compression is enabled.\nserver.compression.excluded-user-agents= # List of user-agents to exclude from compression.\nserver.compression.mime-types= # Comma-separated list of MIME types that should be compressed. For instance `text/html,text/css,application/json`\nserver.compression.min-response-size= # Minimum response size that is required for compression to be performed. For instance 2048\nserver.connection-timeout= # Time in milliseconds that connectors will wait for another HTTP request before closing the connection. When not set, the connector's container-specific default will be used. Use a value of -1 to indicate no (i.e. infinite) timeout.\nserver.context-parameters.*= # Servlet context init parameters. For instance `server.context-parameters.a=alpha`\nserver.context-path= # Context path of the application.\nserver.display-name=application # Display name of the application.\nserver.max-http-header-size=0 # Maximum size in bytes of the HTTP message header.\nserver.max-http-post-size=0 # Maximum size in bytes of the HTTP post content.\nserver.error.include-stacktrace=never # When to include a \"stacktrace\" attribute.\nserver.error.path=/error # Path of the error controller.\nserver.error.whitelabel.enabled=true # Enable the default error page displayed in browsers in case of a server error.\nserver.jetty.acceptors= # Number of acceptor threads to use.\nserver.jetty.selectors= # Number of selector threads to use.\nserver.jsp-servlet.class-name=org.apache.jasper.servlet.JspServlet # The class name of the JSP servlet.\nserver.jsp-servlet.init-parameters.*= # Init parameters used to configure the JSP servlet\nserver.jsp-servlet.registered=true # Whether or not the JSP servlet is registered\nserver.port=8080 # Server HTTP port.\nserver.server-header= # Value to use for the Server response header (no header is sent if empty)\nserver.servlet-path=/ # Path of the main dispatcher servlet.\nserver.use-forward-headers= # If X-Forwarded-* headers should be applied to the HttpRequest.\nserver.session.cookie.comment= # Comment for the session cookie.\nserver.session.cookie.domain= # Domain for the session cookie.\nserver.session.cookie.http-only= # \"HttpOnly\" flag for the session cookie.\nserver.session.cookie.max-age= # Maximum age of the session cookie in seconds.\nserver.session.cookie.name= # Session cookie name.\nserver.session.cookie.path= # Path of the session cookie.\nserver.session.cookie.secure= # \"Secure\" flag for the session cookie.\nserver.session.persistent=false # Persist session data between restarts.\nserver.session.store-dir= # Directory used to store session data.\nserver.session.timeout= # Session timeout in seconds.\nserver.session.tracking-modes= # Session tracking modes (one or more of the following: \"cookie\", \"url\", \"ssl\").\nserver.ssl.ciphers= # Supported SSL ciphers.\nserver.ssl.client-auth= # Whether client authentication is wanted (\"want\") or needed (\"need\"). Requires a trust store.\nserver.ssl.enabled= # Enable SSL support.\nserver.ssl.enabled-protocols= # Enabled SSL protocols.\nserver.ssl.key-alias= # Alias that identifies the key in the key store.\nserver.ssl.key-password= # Password used to access the key in the key store.\nserver.ssl.key-store= # Path to the key store that holds the SSL certificate (typically a jks file).\nserver.ssl.key-store-password= # Password used to access the key store.\nserver.ssl.key-store-provider= # Provider for the key store.\nserver.ssl.key-store-type= # Type of the key store.\nserver.ssl.protocol=TLS # SSL protocol to use.\nserver.ssl.trust-store= # Trust store that holds SSL certificates.\nserver.ssl.trust-store-password= # Password used to access the trust store.\nserver.ssl.trust-store-provider= # Provider for the trust store.\nserver.ssl.trust-store-type= # Type of the trust store.\nserver.tomcat.accesslog.directory=logs # Directory in which log files are created. Can be relative to the tomcat base dir or absolute.\nserver.tomcat.accesslog.enabled=false # Enable access log.\nserver.tomcat.accesslog.pattern=common # Format pattern for access logs.\nserver.tomcat.accesslog.prefix=access_log # Log file name prefix.\nserver.tomcat.accesslog.rename-on-rotate=false # Defer inclusion of the date stamp in the file name until rotate time.\nserver.tomcat.accesslog.suffix=.log # Log file name suffix.\nserver.tomcat.background-processor-delay=30 # Delay in seconds between the invocation of backgroundProcess methods.\nserver.tomcat.basedir= # Tomcat base directory. If not specified a temporary directory will be used.\nserver.tomcat.internal-proxies=10\\\\.\\\\d{1,3}\\\\.\\\\d{1,3}\\\\.\\\\d{1,3}|\\\\\n        192\\\\.168\\\\.\\\\d{1,3}\\\\.\\\\d{1,3}|\\\\\n        169\\\\.254\\\\.\\\\d{1,3}\\\\.\\\\d{1,3}|\\\\\n        127\\\\.\\\\d{1,3}\\\\.\\\\d{1,3}\\\\.\\\\d{1,3}|\\\\\n        172\\\\.1[6-9]{1}\\\\.\\\\d{1,3}\\\\.\\\\d{1,3}|\\\\\n        172\\\\.2[0-9]{1}\\\\.\\\\d{1,3}\\\\.\\\\d{1,3}|\\\\\n        172\\\\.3[0-1]{1}\\\\.\\\\d{1,3}\\\\.\\\\d{1,3} # regular expression matching trusted IP addresses.\nserver.tomcat.max-threads=0 # Maximum amount of worker threads.\nserver.tomcat.min-spare-threads=0 # Minimum amount of worker threads.\nserver.tomcat.port-header=X-Forwarded-Port # Name of the HTTP header used to override the original port value.\nserver.tomcat.protocol-header= # Header that holds the incoming protocol, usually named \"X-Forwarded-Proto\".\nserver.tomcat.protocol-header-https-value=https # Value of the protocol header that indicates that the incoming request uses SSL.\nserver.tomcat.redirect-context-root= # Whether requests to the context root should be redirected by appending a / to the path.\nserver.tomcat.remote-ip-header= # Name of the http header from which the remote ip is extracted. For instance `X-FORWARDED-FOR`\nserver.tomcat.uri-encoding=UTF-8 # Character encoding to use to decode the URI.\nserver.undertow.accesslog.dir= # Undertow access log directory.\nserver.undertow.accesslog.enabled=false # Enable access log.\nserver.undertow.accesslog.pattern=common # Format pattern for access logs.\nserver.undertow.buffer-size= # Size of each buffer in bytes.\nserver.undertow.buffers-per-region= # Number of buffer per region.\nserver.undertow.direct-buffers= # Allocate buffers outside the Java heap.\nserver.undertow.io-threads= # Number of I/O threads to create for the worker.\nserver.undertow.worker-threads= # Number of worker threads.\n\n# FREEMARKER (FreeMarkerAutoConfiguration)\nspring.freemarker.allow-request-override=false # Set whether HttpServletRequest attributes are allowed to override (hide) controller generated model attributes of the same name.\nspring.freemarker.allow-session-override=false # Set whether HttpSession attributes are allowed to override (hide) controller generated model attributes of the same name.\nspring.freemarker.cache=false # Enable template caching.\nspring.freemarker.charset=UTF-8 # Template encoding.\nspring.freemarker.check-template-location=true # Check that the templates location exists.\nspring.freemarker.content-type=text/html # Content-Type value.\nspring.freemarker.enabled=true # Enable MVC view resolution for this technology.\nspring.freemarker.expose-request-attributes=false # Set whether all request attributes should be added to the model prior to merging with the template.\nspring.freemarker.expose-session-attributes=false # Set whether all HttpSession attributes should be added to the model prior to merging with the template.\nspring.freemarker.expose-spring-macro-helpers=true # Set whether to expose a RequestContext for use by Spring's macro library, under the name \"springMacroRequestContext\".\nspring.freemarker.prefer-file-system-access=true # Prefer file system access for template loading. File system access enables hot detection of template changes.\nspring.freemarker.prefix= # Prefix that gets prepended to view names when building a URL.\nspring.freemarker.request-context-attribute= # Name of the RequestContext attribute for all views.\nspring.freemarker.settings.*= # Well-known FreeMarker keys which will be passed to FreeMarker's Configuration.\nspring.freemarker.suffix= # Suffix that gets appended to view names when building a URL.\nspring.freemarker.template-loader-path=classpath:/templates/ # Comma-separated list of template paths.\nspring.freemarker.view-names= # White list of view names that can be resolved.\n\n# GROOVY TEMPLATES (GroovyTemplateAutoConfiguration)\nspring.groovy.template.allow-request-override=false # Set whether HttpServletRequest attributes are allowed to override (hide) controller generated model attributes of the same name.\nspring.groovy.template.allow-session-override=false # Set whether HttpSession attributes are allowed to override (hide) controller generated model attributes of the same name.\nspring.groovy.template.cache= # Enable template caching.\nspring.groovy.template.charset=UTF-8 # Template encoding.\nspring.groovy.template.check-template-location=true # Check that the templates location exists.\nspring.groovy.template.configuration.*= # See GroovyMarkupConfigurer\nspring.groovy.template.content-type=test/html # Content-Type value.\nspring.groovy.template.enabled=true # Enable MVC view resolution for this technology.\nspring.groovy.template.expose-request-attributes=false # Set whether all request attributes should be added to the model prior to merging with the template.\nspring.groovy.template.expose-session-attributes=false # Set whether all HttpSession attributes should be added to the model prior to merging with the template.\nspring.groovy.template.expose-spring-macro-helpers=true # Set whether to expose a RequestContext for use by Spring's macro library, under the name \"springMacroRequestContext\".\nspring.groovy.template.prefix= # Prefix that gets prepended to view names when building a URL.\nspring.groovy.template.request-context-attribute= # Name of the RequestContext attribute for all views.\nspring.groovy.template.resource-loader-path=classpath:/templates/ # Template path.\nspring.groovy.template.suffix=.tpl # Suffix that gets appended to view names when building a URL.\nspring.groovy.template.view-names= # White list of view names that can be resolved.\n\n# SPRING HATEOAS (HateoasProperties)\nspring.hateoas.use-hal-as-default-json-media-type=true # Specify if application/hal+json responses should be sent to requests that accept application/json.\n\n# HTTP message conversion\nspring.http.converters.preferred-json-mapper=jackson # Preferred JSON mapper to use for HTTP message conversion. Set to \"gson\" to force the use of Gson when both it and Jackson are on the classpath.\n\n# HTTP encoding (HttpEncodingProperties)\nspring.http.encoding.charset=UTF-8 # Charset of HTTP requests and responses. Added to the \"Content-Type\" header if not set explicitly.\nspring.http.encoding.enabled=true # Enable http encoding support.\nspring.http.encoding.force= # Force the encoding to the configured charset on HTTP requests and responses.\nspring.http.encoding.force-request= # Force the encoding to the configured charset on HTTP requests. Defaults to true when \"force\" has not been specified.\nspring.http.encoding.force-response= # Force the encoding to the configured charset on HTTP responses.\n\n# MULTIPART (MultipartProperties)\nspring.http.multipart.enabled=true # Enable support of multi-part uploads.\nspring.http.multipart.file-size-threshold=0 # Threshold after which files will be written to disk. Values can use the suffixed \"MB\" or \"KB\" to indicate a Megabyte or Kilobyte size.\nspring.http.multipart.location= # Intermediate location of uploaded files.\nspring.http.multipart.max-file-size=1Mb # Max file size. Values can use the suffixed \"MB\" or \"KB\" to indicate a Megabyte or Kilobyte size.\nspring.http.multipart.max-request-size=10Mb # Max request size. Values can use the suffixed \"MB\" or \"KB\" to indicate a Megabyte or Kilobyte size.\n\n# JACKSON (JacksonProperties)\nspring.jackson.date-format= # Date format string or a fully-qualified date format class name. For instance `yyyy-MM-dd HH:mm:ss`.\nspring.jackson.default-property-inclusion= # Controls the inclusion of properties during serialization.\nspring.jackson.deserialization.*= # Jackson on/off features that affect the way Java objects are deserialized.\nspring.jackson.generator.*= # Jackson on/off features for generators.\nspring.jackson.joda-date-time-format= # Joda date time format string. If not configured, \"date-format\" will be used as a fallback if it is configured with a format string.\nspring.jackson.locale= # Locale used for formatting.\nspring.jackson.mapper.*= # Jackson general purpose on/off features.\nspring.jackson.parser.*= # Jackson on/off features for parsers.\nspring.jackson.property-naming-strategy= # One of the constants on Jackson's PropertyNamingStrategy. Can also be a fully-qualified class name of a PropertyNamingStrategy subclass.\nspring.jackson.serialization.*= # Jackson on/off features that affect the way Java objects are serialized.\nspring.jackson.serialization-inclusion= # Controls the inclusion of properties during serialization. Configured with one of the values in Jackson's JsonInclude.Include enumeration.\nspring.jackson.time-zone= # Time zone used when formatting dates. For instance `America/Los_Angeles`\n\n# JERSEY (JerseyProperties)\nspring.jersey.application-path= # Path that serves as the base URI for the application. Overrides the value of \"@ApplicationPath\" if specified.\nspring.jersey.filter.order=0 # Jersey filter chain order.\nspring.jersey.init.*= # Init parameters to pass to Jersey via the servlet or filter.\nspring.jersey.servlet.load-on-startup=-1 # Load on startup priority of the Jersey servlet.\nspring.jersey.type=servlet # Jersey integration type. Can be either \"servlet\" or \"filter\".\n\n# SPRING MOBILE DEVICE VIEWS (DeviceDelegatingViewResolverAutoConfiguration)\nspring.mobile.devicedelegatingviewresolver.enable-fallback=false # Enable support for fallback resolution.\nspring.mobile.devicedelegatingviewresolver.enabled=false # Enable device view resolver.\nspring.mobile.devicedelegatingviewresolver.mobile-prefix=mobile/ # Prefix that gets prepended to view names for mobile devices.\nspring.mobile.devicedelegatingviewresolver.mobile-suffix= # Suffix that gets appended to view names for mobile devices.\nspring.mobile.devicedelegatingviewresolver.normal-prefix= # Prefix that gets prepended to view names for normal devices.\nspring.mobile.devicedelegatingviewresolver.normal-suffix= # Suffix that gets appended to view names for normal devices.\nspring.mobile.devicedelegatingviewresolver.tablet-prefix=tablet/ # Prefix that gets prepended to view names for tablet devices.\nspring.mobile.devicedelegatingviewresolver.tablet-suffix= # Suffix that gets appended to view names for tablet devices.\n\n# SPRING MOBILE SITE PREFERENCE (SitePreferenceAutoConfiguration)\nspring.mobile.sitepreference.enabled=true # Enable SitePreferenceHandler.\n\n# MUSTACHE TEMPLATES (MustacheAutoConfiguration)\nspring.mustache.allow-request-override= # Set whether HttpServletRequest attributes are allowed to override (hide) controller generated model attributes of the same name.\nspring.mustache.allow-session-override= # Set whether HttpSession attributes are allowed to override (hide) controller generated model attributes of the same name.\nspring.mustache.cache= # Enable template caching.\nspring.mustache.charset= # Template encoding.\nspring.mustache.check-template-location= # Check that the templates location exists.\nspring.mustache.content-type= # Content-Type value.\nspring.mustache.enabled= # Enable MVC view resolution for this technology.\nspring.mustache.expose-request-attributes= # Set whether all request attributes should be added to the model prior to merging with the template.\nspring.mustache.expose-session-attributes= # Set whether all HttpSession attributes should be added to the model prior to merging with the template.\nspring.mustache.expose-spring-macro-helpers= # Set whether to expose a RequestContext for use by Spring's macro library, under the name \"springMacroRequestContext\".\nspring.mustache.prefix=classpath:/templates/ # Prefix to apply to template names.\nspring.mustache.request-context-attribute= # Name of the RequestContext attribute for all views.\nspring.mustache.suffix=.html # Suffix to apply to template names.\nspring.mustache.view-names= # White list of view names that can be resolved.\n\n# SPRING MVC (WebMvcProperties)\nspring.mvc.async.request-timeout= # Amount of time (in milliseconds) before asynchronous request handling times out.\nspring.mvc.date-format= # Date format to use. For instance `dd/MM/yyyy`.\nspring.mvc.dispatch-trace-request=false # Dispatch TRACE requests to the FrameworkServlet doService method.\nspring.mvc.dispatch-options-request=true # Dispatch OPTIONS requests to the FrameworkServlet doService method.\nspring.mvc.favicon.enabled=true # Enable resolution of favicon.ico.\nspring.mvc.ignore-default-model-on-redirect=true # If the content of the \"default\" model should be ignored during redirect scenarios.\nspring.mvc.locale= # Locale to use. By default, this locale is overridden by the \"Accept-Language\" header.\nspring.mvc.locale-resolver=accept-header # Define how the locale should be resolved.\nspring.mvc.log-resolved-exception=false # Enable warn logging of exceptions resolved by a \"HandlerExceptionResolver\".\nspring.mvc.media-types.*= # Maps file extensions to media types for content negotiation.\nspring.mvc.message-codes-resolver-format= # Formatting strategy for message codes. For instance `PREFIX_ERROR_CODE`.\nspring.mvc.servlet.load-on-startup=-1 # Load on startup priority of the Spring Web Services servlet.\nspring.mvc.static-path-pattern=/** # Path pattern used for static resources.\nspring.mvc.throw-exception-if-no-handler-found=false # If a \"NoHandlerFoundException\" should be thrown if no Handler was found to process a request.\nspring.mvc.view.prefix= # Spring MVC view prefix.\nspring.mvc.view.suffix= # Spring MVC view suffix.\n\n# SPRING RESOURCES HANDLING (ResourceProperties)\nspring.resources.add-mappings=true # Enable default resource handling.\nspring.resources.cache-period= # Cache period for the resources served by the resource handler, in seconds.\nspring.resources.chain.cache=true # Enable caching in the Resource chain.\nspring.resources.chain.enabled= # Enable the Spring Resource Handling chain. Disabled by default unless at least one strategy has been enabled.\nspring.resources.chain.gzipped=false # Enable resolution of already gzipped resources.\nspring.resources.chain.html-application-cache=false # Enable HTML5 application cache manifest rewriting.\nspring.resources.chain.strategy.content.enabled=false # Enable the content Version Strategy.\nspring.resources.chain.strategy.content.paths=/** # Comma-separated list of patterns to apply to the Version Strategy.\nspring.resources.chain.strategy.fixed.enabled=false # Enable the fixed Version Strategy.\nspring.resources.chain.strategy.fixed.paths=/** # Comma-separated list of patterns to apply to the Version Strategy.\nspring.resources.chain.strategy.fixed.version= # Version string to use for the Version Strategy.\nspring.resources.static-locations=classpath:/META-INF/resources/,classpath:/resources/,classpath:/static/,classpath:/public/ # Locations of static resources.\n\n# SPRING SESSION (SessionProperties)\nspring.session.hazelcast.map-name=spring:session:sessions # Name of the map used to store sessions.\nspring.session.jdbc.initializer.enabled=true # Create the required session tables on startup if necessary.\nspring.session.jdbc.schema=classpath:org/springframework/session/jdbc/schema-@@platform@@.sql # Path to the SQL file to use to initialize the database schema.\nspring.session.jdbc.table-name=SPRING_SESSION # Name of database table used to store sessions.\nspring.session.mongo.collection-name=sessions # Collection name used to store sessions.\nspring.session.redis.flush-mode= # Flush mode for the Redis sessions.\nspring.session.redis.namespace= # Namespace for keys used to store sessions.\nspring.session.store-type= # Session store type.\n\n# SPRING SOCIAL (SocialWebAutoConfiguration)\nspring.social.auto-connection-views=false # Enable the connection status view for supported providers.\n\n# SPRING SOCIAL FACEBOOK (FacebookAutoConfiguration)\nspring.social.facebook.app-id= # your application's Facebook App ID\nspring.social.facebook.app-secret= # your application's Facebook App Secret\n\n# SPRING SOCIAL LINKEDIN (LinkedInAutoConfiguration)\nspring.social.linkedin.app-id= # your application's LinkedIn App ID\nspring.social.linkedin.app-secret= # your application's LinkedIn App Secret\n\n# SPRING SOCIAL TWITTER (TwitterAutoConfiguration)\nspring.social.twitter.app-id= # your application's Twitter App ID\nspring.social.twitter.app-secret= # your application's Twitter App Secret\n\n# THYMELEAF (ThymeleafAutoConfiguration)\nspring.thymeleaf.cache=true # Enable template caching.\nspring.thymeleaf.check-template-location=true # Check that the templates location exists.\nspring.thymeleaf.content-type=text/html # Content-Type value.\nspring.thymeleaf.enabled=true # Enable MVC Thymeleaf view resolution.\nspring.thymeleaf.encoding=UTF-8 # Template encoding.\nspring.thymeleaf.excluded-view-names= # Comma-separated list of view names that should be excluded from resolution.\nspring.thymeleaf.mode=HTML5 # Template mode to be applied to templates. See also StandardTemplateModeHandlers.\nspring.thymeleaf.prefix=classpath:/templates/ # Prefix that gets prepended to view names when building a URL.\nspring.thymeleaf.suffix=.html # Suffix that gets appended to view names when building a URL.\nspring.thymeleaf.template-resolver-order= # Order of the template resolver in the chain.\nspring.thymeleaf.view-names= # Comma-separated list of view names that can be resolved.\n\n# VELOCITY TEMPLATES (VelocityAutoConfiguration)\nspring.velocity.allow-request-override=false # Set whether HttpServletRequest attributes are allowed to override (hide) controller generated model attributes of the same name.\nspring.velocity.allow-session-override=false # Set whether HttpSession attributes are allowed to override (hide) controller generated model attributes of the same name.\nspring.velocity.cache= # Enable template caching.\nspring.velocity.charset=UTF-8 # Template encoding.\nspring.velocity.check-template-location=true # Check that the templates location exists.\nspring.velocity.content-type=text/html # Content-Type value.\nspring.velocity.date-tool-attribute= # Name of the DateTool helper object to expose in the Velocity context of the view.\nspring.velocity.enabled=true # Enable MVC view resolution for this technology.\nspring.velocity.expose-request-attributes=false # Set whether all request attributes should be added to the model prior to merging with the template.\nspring.velocity.expose-session-attributes=false # Set whether all HttpSession attributes should be added to the model prior to merging with the template.\nspring.velocity.expose-spring-macro-helpers=true # Set whether to expose a RequestContext for use by Spring's macro library, under the name \"springMacroRequestContext\".\nspring.velocity.number-tool-attribute= # Name of the NumberTool helper object to expose in the Velocity context of the view.\nspring.velocity.prefer-file-system-access=true # Prefer file system access for template loading. File system access enables hot detection of template changes.\nspring.velocity.prefix= # Prefix that gets prepended to view names when building a URL.\nspring.velocity.properties.*= # Additional velocity properties.\nspring.velocity.request-context-attribute= # Name of the RequestContext attribute for all views.\nspring.velocity.resource-loader-path=classpath:/templates/ # Template path.\nspring.velocity.suffix=.vm # Suffix that gets appended to view names when building a URL.\nspring.velocity.toolbox-config-location= # Velocity Toolbox config location. For instance `/WEB-INF/toolbox.xml`\nspring.velocity.view-names= # White list of view names that can be resolved.\n\n# SPRING WEB SERVICES (WebServicesProperties)\nspring.webservices.path=/services # Path that serves as the base URI for the services.\nspring.webservices.servlet.init= # Servlet init parameters to pass to Spring Web Services.\nspring.webservices.servlet.load-on-startup=-1 # Load on startup priority of the Spring Web Services servlet.\n\n\n\n# ----------------------------------------\n# SECURITY PROPERTIES\n# ----------------------------------------\n# SECURITY (SecurityProperties)\nsecurity.basic.authorize-mode=role # Security authorize mode to apply.\nsecurity.basic.enabled=true # Enable basic authentication.\nsecurity.basic.path=/** # Comma-separated list of paths to secure.\nsecurity.basic.realm=Spring # HTTP basic realm name.\nsecurity.enable-csrf=false # Enable Cross Site Request Forgery support.\nsecurity.filter-order=0 # Security filter chain order.\nsecurity.filter-dispatcher-types=ASYNC, FORWARD, INCLUDE, REQUEST # Security filter chain dispatcher types.\nsecurity.headers.cache=true # Enable cache control HTTP headers.\nsecurity.headers.content-type=true # Enable \"X-Content-Type-Options\" header.\nsecurity.headers.frame=true # Enable \"X-Frame-Options\" header.\nsecurity.headers.hsts= # HTTP Strict Transport Security (HSTS) mode (none, domain, all).\nsecurity.headers.xss=true # Enable cross site scripting (XSS) protection.\nsecurity.ignored= # Comma-separated list of paths to exclude from the default secured paths.\nsecurity.require-ssl=false # Enable secure channel for all requests.\nsecurity.sessions=stateless # Session creation policy (always, never, if_required, stateless).\nsecurity.user.name=user # Default user name.\nsecurity.user.password= # Password for the default user name. A random password is logged on startup by default.\nsecurity.user.role=USER # Granted roles for the default user name.\n\n# SECURITY OAUTH2 CLIENT (OAuth2ClientProperties\nsecurity.oauth2.client.client-id= # OAuth2 client id.\nsecurity.oauth2.client.client-secret= # OAuth2 client secret. A random secret is generated by default\n\n# SECURITY OAUTH2 RESOURCES (ResourceServerProperties\nsecurity.oauth2.resource.id= # Identifier of the resource.\nsecurity.oauth2.resource.jwt.key-uri= # The URI of the JWT token. Can be set if the value is not available and the key is public.\nsecurity.oauth2.resource.jwt.key-value= # The verification key of the JWT token. Can either be a symmetric secret or PEM-encoded RSA public key.\nsecurity.oauth2.resource.prefer-token-info=true # Use the token info, can be set to false to use the user info.\nsecurity.oauth2.resource.service-id=resource #\nsecurity.oauth2.resource.token-info-uri= # URI of the token decoding endpoint.\nsecurity.oauth2.resource.token-type= # The token type to send when using the userInfoUri.\nsecurity.oauth2.resource.user-info-uri= # URI of the user endpoint.\n\n# SECURITY OAUTH2 SSO (OAuth2SsoProperties\nsecurity.oauth2.sso.filter-order= # Filter order to apply if not providing an explicit WebSecurityConfigurerAdapter\nsecurity.oauth2.sso.login-path=/login # Path to the login page, i.e. the one that triggers the redirect to the OAuth2 Authorization Server\n\n\n# ----------------------------------------\n# DATA PROPERTIES\n# ----------------------------------------\n\n# FLYWAY (FlywayProperties)\nflyway.baseline-description= #\nflyway.baseline-version=1 # version to start migration\nflyway.baseline-on-migrate= #\nflyway.check-location=false # Check that migration scripts location exists.\nflyway.clean-on-validation-error= #\nflyway.enabled=true # Enable flyway.\nflyway.encoding= #\nflyway.ignore-failed-future-migration= #\nflyway.init-sqls= # SQL statements to execute to initialize a connection immediately after obtaining it.\nflyway.locations=classpath:db/migration # locations of migrations scripts\nflyway.out-of-order= #\nflyway.password= # JDBC password if you want Flyway to create its own DataSource\nflyway.placeholder-prefix= #\nflyway.placeholder-replacement= #\nflyway.placeholder-suffix= #\nflyway.placeholders.*= #\nflyway.schemas= # schemas to update\nflyway.sql-migration-prefix=V #\nflyway.sql-migration-separator= #\nflyway.sql-migration-suffix=.sql #\nflyway.table= #\nflyway.url= # JDBC url of the database to migrate. If not set, the primary configured data source is used.\nflyway.user= # Login user of the database to migrate.\nflyway.validate-on-migrate= #\n\n# LIQUIBASE (LiquibaseProperties)\nliquibase.change-log=classpath:/db/changelog/db.changelog-master.yaml # Change log configuration path.\nliquibase.check-change-log-location=true # Check the change log location exists.\nliquibase.contexts= # Comma-separated list of runtime contexts to use.\nliquibase.default-schema= # Default database schema.\nliquibase.drop-first=false # Drop the database schema first.\nliquibase.enabled=true # Enable liquibase support.\nliquibase.labels= # Comma-separated list of runtime labels to use.\nliquibase.parameters.*= # Change log parameters.\nliquibase.password= # Login password of the database to migrate.\nliquibase.rollback-file= # File to which rollback SQL will be written when an update is performed.\nliquibase.url= # JDBC url of the database to migrate. If not set, the primary configured data source is used.\nliquibase.user= # Login user of the database to migrate.\n\n# COUCHBASE (CouchbaseProperties)\nspring.couchbase.bootstrap-hosts= # Couchbase nodes (host or IP address) to bootstrap from.\nspring.couchbase.bucket.name=default # Name of the bucket to connect to.\nspring.couchbase.bucket.password=  # Password of the bucket.\nspring.couchbase.env.endpoints.key-value=1 # Number of sockets per node against the Key/value service.\nspring.couchbase.env.endpoints.query=1 # Number of sockets per node against the Query (N1QL) service.\nspring.couchbase.env.endpoints.view=1 # Number of sockets per node against the view service.\nspring.couchbase.env.ssl.enabled= # Enable SSL support. Enabled automatically if a \"keyStore\" is provided unless specified otherwise.\nspring.couchbase.env.ssl.key-store= # Path to the JVM key store that holds the certificates.\nspring.couchbase.env.ssl.key-store-password= # Password used to access the key store.\nspring.couchbase.env.timeouts.connect=5000 # Bucket connections timeout in milliseconds.\nspring.couchbase.env.timeouts.key-value=2500 # Blocking operations performed on a specific key timeout in milliseconds.\nspring.couchbase.env.timeouts.query=7500 # N1QL query operations timeout in milliseconds.\nspring.couchbase.env.timeouts.socket-connect=1000 # Socket connect connections timeout in milliseconds.\nspring.couchbase.env.timeouts.view=7500 # Regular and geospatial view operations timeout in milliseconds.\n\n# DAO (PersistenceExceptionTranslationAutoConfiguration)\nspring.dao.exceptiontranslation.enabled=true # Enable the PersistenceExceptionTranslationPostProcessor.\n\n# CASSANDRA (CassandraProperties)\nspring.data.cassandra.cluster-name= # Name of the Cassandra cluster.\nspring.data.cassandra.compression= # Compression supported by the Cassandra binary protocol.\nspring.data.cassandra.connect-timeout-millis= # Socket option: connection time out.\nspring.data.cassandra.consistency-level= # Queries consistency level.\nspring.data.cassandra.contact-points=localhost # Comma-separated list of cluster node addresses.\nspring.data.cassandra.fetch-size= # Queries default fetch size.\nspring.data.cassandra.keyspace-name= # Keyspace name to use.\nspring.data.cassandra.load-balancing-policy= # Class name of the load balancing policy.\nspring.data.cassandra.port= # Port of the Cassandra server.\nspring.data.cassandra.password= # Login password of the server.\nspring.data.cassandra.read-timeout-millis= # Socket option: read time out.\nspring.data.cassandra.reconnection-policy= # Reconnection policy class.\nspring.data.cassandra.retry-policy= # Class name of the retry policy.\nspring.data.cassandra.serial-consistency-level= # Queries serial consistency level.\nspring.data.cassandra.schema-action= # Schema action to take at startup.\nspring.data.cassandra.ssl=false # Enable SSL support.\nspring.data.cassandra.username= # Login user of the server.\n\n# DATA COUCHBASE (CouchbaseDataProperties)\nspring.data.couchbase.auto-index=false # Automatically create views and indexes.\nspring.data.couchbase.consistency=read-your-own-writes # Consistency to apply by default on generated queries.\nspring.data.couchbase.repositories.enabled=true # Enable Couchbase repositories.\n\n# ELASTICSEARCH (ElasticsearchProperties)\nspring.data.elasticsearch.cluster-name=elasticsearch # Elasticsearch cluster name.\nspring.data.elasticsearch.cluster-nodes= # Comma-separated list of cluster node addresses. If not specified, starts a client node.\nspring.data.elasticsearch.properties.*= # Additional properties used to configure the client.\nspring.data.elasticsearch.repositories.enabled=true # Enable Elasticsearch repositories.\n\n# MONGODB (MongoProperties)\nspring.data.mongodb.authentication-database= # Authentication database name.\nspring.data.mongodb.database=test # Database name.\nspring.data.mongodb.field-naming-strategy= # Fully qualified name of the FieldNamingStrategy to use.\nspring.data.mongodb.grid-fs-database= # GridFS database name.\nspring.data.mongodb.host=localhost # Mongo server host.\nspring.data.mongodb.password= # Login password of the mongo server.\nspring.data.mongodb.port=27017 # Mongo server port.\nspring.data.mongodb.repositories.enabled=true # Enable Mongo repositories.\nspring.data.mongodb.uri=mongodb://localhost/test # Mongo database URI. When set, host and port are ignored.\nspring.data.mongodb.username= # Login user of the mongo server.\n\n# DATA REDIS\nspring.data.redis.repositories.enabled=true # Enable Redis repositories.\n\n# NEO4J (Neo4jProperties)\nspring.data.neo4j.compiler= # Compiler to use.\nspring.data.neo4j.embedded.enabled=true # Enable embedded mode if the embedded driver is available.\nspring.data.neo4j.password= # Login password of the server.\nspring.data.neo4j.repositories.enabled=true # Enable Neo4j repositories.\nspring.data.neo4j.session.scope=singleton # Scope (lifetime) of the session.\nspring.data.neo4j.uri= # URI used by the driver. Auto-detected by default.\nspring.data.neo4j.username= # Login user of the server.\n\n# DATA REST (RepositoryRestProperties)\nspring.data.rest.base-path= # Base path to be used by Spring Data REST to expose repository resources.\nspring.data.rest.default-page-size= # Default size of pages.\nspring.data.rest.enable-enum-translation= # Enable enum value translation via the Spring Data REST default resource bundle.\nspring.data.rest.limit-param-name= # Name of the URL query string parameter that indicates how many results to return at once.\nspring.data.rest.max-page-size= # Maximum size of pages.\nspring.data.rest.page-param-name= # Name of the URL query string parameter that indicates what page to return.\nspring.data.rest.return-body-on-create= # Return a response body after creating an entity.\nspring.data.rest.return-body-on-update= # Return a response body after updating an entity.\nspring.data.rest.sort-param-name= # Name of the URL query string parameter that indicates what direction to sort results.\n\n# SOLR (SolrProperties)\nspring.data.solr.host=http://127.0.0.1:8983/solr # Solr host. Ignored if \"zk-host\" is set.\nspring.data.solr.repositories.enabled=true # Enable Solr repositories.\nspring.data.solr.zk-host= # ZooKeeper host address in the form HOST:PORT.\n\n# DATASOURCE (DataSourceAutoConfiguration & DataSourceProperties)\nspring.datasource.continue-on-error=false # Do not stop if an error occurs while initializing the database.\nspring.datasource.data= # Data (DML) script resource reference.\nspring.datasource.data-username= # User of the database to execute DML scripts (if different).\nspring.datasource.data-password= # Password of the database to execute DML scripts (if different).\nspring.datasource.dbcp.*= # Commons DBCP specific settings\nspring.datasource.dbcp2.*= # Commons DBCP2 specific settings\nspring.datasource.driver-class-name= # Fully qualified name of the JDBC driver. Auto-detected based on the URL by default.\nspring.datasource.hikari.*= # Hikari specific settings\nspring.datasource.initialize=true # Populate the database using 'data.sql'.\nspring.datasource.jmx-enabled=false # Enable JMX support (if provided by the underlying pool).\nspring.datasource.jndi-name= # JNDI location of the datasource. Class, url, username & password are ignored when set.\nspring.datasource.name=testdb # Name of the datasource.\nspring.datasource.password= # Login password of the database.\nspring.datasource.platform=all # Platform to use in the schema resource (schema-${platform}.sql).\nspring.datasource.schema= # Schema (DDL) script resource reference.\nspring.datasource.schema-username= # User of the database to execute DDL scripts (if different).\nspring.datasource.schema-password= # Password of the database to execute DDL scripts (if different).\nspring.datasource.separator=; # Statement separator in SQL initialization scripts.\nspring.datasource.sql-script-encoding= # SQL scripts encoding.\nspring.datasource.tomcat.*= # Tomcat datasource specific settings\nspring.datasource.type= # Fully qualified name of the connection pool implementation to use. By default, it is auto-detected from the classpath.\nspring.datasource.url= # JDBC url of the database.\nspring.datasource.username=\n\n# JEST (Elasticsearch HTTP client) (JestProperties)\nspring.elasticsearch.jest.connection-timeout=3000 # Connection timeout in milliseconds.\nspring.elasticsearch.jest.password= # Login password.\nspring.elasticsearch.jest.proxy.host= # Proxy host the HTTP client should use.\nspring.elasticsearch.jest.proxy.port= # Proxy port the HTTP client should use.\nspring.elasticsearch.jest.read-timeout=3000 # Read timeout in milliseconds.\nspring.elasticsearch.jest.uris=http://localhost:9200 # Comma-separated list of the Elasticsearch instances to use.\nspring.elasticsearch.jest.username= # Login user.\n\n# H2 Web Console (H2ConsoleProperties)\nspring.h2.console.enabled=false # Enable the console.\nspring.h2.console.path=/h2-console # Path at which the console will be available.\nspring.h2.console.settings.trace=false # Enable trace output.\nspring.h2.console.settings.web-allow-others=false # Enable remote access.\n\n# JOOQ (JooqAutoConfiguration)\nspring.jooq.sql-dialect= # SQLDialect JOOQ used when communicating with the configured datasource. For instance `POSTGRES`\n\n# JPA (JpaBaseConfiguration, HibernateJpaAutoConfiguration)\nspring.data.jpa.repositories.enabled=true # Enable JPA repositories.\nspring.jpa.database= # Target database to operate on, auto-detected by default. Can be alternatively set using the \"databasePlatform\" property.\nspring.jpa.database-platform= # Name of the target database to operate on, auto-detected by default. Can be alternatively set using the \"Database\" enum.\nspring.jpa.generate-ddl=false # Initialize the schema on startup.\nspring.jpa.hibernate.ddl-auto= # DDL mode. This is actually a shortcut for the \"hibernate.hbm2ddl.auto\" property. Default to \"create-drop\" when using an embedded database, \"none\" otherwise.\nspring.jpa.hibernate.naming.implicit-strategy= # Hibernate 5 implicit naming strategy fully qualified name.\nspring.jpa.hibernate.naming.physical-strategy= # Hibernate 5 physical naming strategy fully qualified name.\nspring.jpa.hibernate.naming.strategy= # Hibernate 4 naming strategy fully qualified name. Not supported with Hibernate 5.\nspring.jpa.hibernate.use-new-id-generator-mappings= # Use Hibernate's newer IdentifierGenerator for AUTO, TABLE and SEQUENCE.\nspring.jpa.open-in-view=true # Register OpenEntityManagerInViewInterceptor. Binds a JPA EntityManager to the thread for the entire processing of the request.\nspring.jpa.properties.*= # Additional native properties to set on the JPA provider.\nspring.jpa.show-sql=false # Enable logging of SQL statements.\n\n# JTA (JtaAutoConfiguration)\nspring.jta.enabled=true # Enable JTA support.\nspring.jta.log-dir= # Transaction logs directory.\nspring.jta.transaction-manager-id= # Transaction manager unique identifier.\n\n# ATOMIKOS (AtomikosProperties)\nspring.jta.atomikos.connectionfactory.borrow-connection-timeout=30 # Timeout, in seconds, for borrowing connections from the pool.\nspring.jta.atomikos.connectionfactory.ignore-session-transacted-flag=true # Whether or not to ignore the transacted flag when creating session.\nspring.jta.atomikos.connectionfactory.local-transaction-mode=false # Whether or not local transactions are desired.\nspring.jta.atomikos.connectionfactory.maintenance-interval=60 # The time, in seconds, between runs of the pool's maintenance thread.\nspring.jta.atomikos.connectionfactory.max-idle-time=60 # The time, in seconds, after which connections are cleaned up from the pool.\nspring.jta.atomikos.connectionfactory.max-lifetime=0 # The time, in seconds, that a connection can be pooled for before being destroyed. 0 denotes no limit.\nspring.jta.atomikos.connectionfactory.max-pool-size=1 # The maximum size of the pool.\nspring.jta.atomikos.connectionfactory.min-pool-size=1 # The minimum size of the pool.\nspring.jta.atomikos.connectionfactory.reap-timeout=0 # The reap timeout, in seconds, for borrowed connections. 0 denotes no limit.\nspring.jta.atomikos.connectionfactory.unique-resource-name=jmsConnectionFactory # The unique name used to identify the resource during recovery.\nspring.jta.atomikos.datasource.borrow-connection-timeout=30 # Timeout, in seconds, for borrowing connections from the pool.\nspring.jta.atomikos.datasource.default-isolation-level= # Default isolation level of connections provided by the pool.\nspring.jta.atomikos.datasource.login-timeout= # Timeout, in seconds, for establishing a database connection.\nspring.jta.atomikos.datasource.maintenance-interval=60 # The time, in seconds, between runs of the pool's maintenance thread.\nspring.jta.atomikos.datasource.max-idle-time=60 # The time, in seconds, after which connections are cleaned up from the pool.\nspring.jta.atomikos.datasource.max-lifetime=0 # The time, in seconds, that a connection can be pooled for before being destroyed. 0 denotes no limit.\nspring.jta.atomikos.datasource.max-pool-size=1 # The maximum size of the pool.\nspring.jta.atomikos.datasource.min-pool-size=1 # The minimum size of the pool.\nspring.jta.atomikos.datasource.reap-timeout=0 # The reap timeout, in seconds, for borrowed connections. 0 denotes no limit.\nspring.jta.atomikos.datasource.test-query= # SQL query or statement used to validate a connection before returning it.\nspring.jta.atomikos.datasource.unique-resource-name=dataSource # The unique name used to identify the resource during recovery.\nspring.jta.atomikos.properties.checkpoint-interval=500 # Interval between checkpoints.\nspring.jta.atomikos.properties.console-file-count=1 # Number of debug logs files that can be created.\nspring.jta.atomikos.properties.console-file-limit=-1 # How many bytes can be stored at most in debug logs files.\nspring.jta.atomikos.properties.console-file-name=tm.out # Debug logs file name.\nspring.jta.atomikos.properties.console-log-level= # Console log level.\nspring.jta.atomikos.properties.default-jta-timeout=10000 # Default timeout for JTA transactions.\nspring.jta.atomikos.properties.enable-logging=true # Enable disk logging.\nspring.jta.atomikos.properties.force-shutdown-on-vm-exit=false # Specify if a VM shutdown should trigger forced shutdown of the transaction core.\nspring.jta.atomikos.properties.log-base-dir= # Directory in which the log files should be stored.\nspring.jta.atomikos.properties.log-base-name=tmlog # Transactions log file base name.\nspring.jta.atomikos.properties.max-actives=50 # Maximum number of active transactions.\nspring.jta.atomikos.properties.max-timeout=300000 # Maximum timeout (in milliseconds) that can be allowed for transactions.\nspring.jta.atomikos.properties.output-dir= # Directory in which to store the debug log files.\nspring.jta.atomikos.properties.serial-jta-transactions=true # Specify if sub-transactions should be joined when possible.\nspring.jta.atomikos.properties.service= # Transaction manager implementation that should be started.\nspring.jta.atomikos.properties.threaded-two-phase-commit=true # Use different (and concurrent) threads for two-phase commit on the participating resources.\nspring.jta.atomikos.properties.transaction-manager-unique-name= # Transaction manager's unique name.\n\n# BITRONIX\nspring.jta.bitronix.connectionfactory.acquire-increment=1 # Number of connections to create when growing the pool.\nspring.jta.bitronix.connectionfactory.acquisition-interval=1 # Time, in seconds, to wait before trying to acquire a connection again after an invalid connection was acquired.\nspring.jta.bitronix.connectionfactory.acquisition-timeout=30 # Timeout, in seconds, for acquiring connections from the pool.\nspring.jta.bitronix.connectionfactory.allow-local-transactions=true # Whether or not the transaction manager should allow mixing XA and non-XA transactions.\nspring.jta.bitronix.connectionfactory.apply-transaction-timeout=false # Whether or not the transaction timeout should be set on the XAResource when it is enlisted.\nspring.jta.bitronix.connectionfactory.automatic-enlisting-enabled=true # Whether or not resources should be enlisted and delisted automatically.\nspring.jta.bitronix.connectionfactory.cache-producers-consumers=true # Whether or not produces and consumers should be cached.\nspring.jta.bitronix.connectionfactory.defer-connection-release=true # Whether or not the provider can run many transactions on the same connection and supports transaction interleaving.\nspring.jta.bitronix.connectionfactory.ignore-recovery-failures=false # Whether or not recovery failures should be ignored.\nspring.jta.bitronix.connectionfactory.max-idle-time=60 # The time, in seconds, after which connections are cleaned up from the pool.\nspring.jta.bitronix.connectionfactory.max-pool-size=10 # The maximum size of the pool. 0 denotes no limit.\nspring.jta.bitronix.connectionfactory.min-pool-size=0 # The minimum size of the pool.\nspring.jta.bitronix.connectionfactory.password= # The password to use to connect to the JMS provider.\nspring.jta.bitronix.connectionfactory.share-transaction-connections=false #  Whether or not connections in the ACCESSIBLE state can be shared within the context of a transaction.\nspring.jta.bitronix.connectionfactory.test-connections=true # Whether or not connections should be tested when acquired from the pool.\nspring.jta.bitronix.connectionfactory.two-pc-ordering-position=1 # The position that this resource should take during two-phase commit (always first is Integer.MIN_VALUE, always last is Integer.MAX_VALUE).\nspring.jta.bitronix.connectionfactory.unique-name=jmsConnectionFactory # The unique name used to identify the resource during recovery.\nspring.jta.bitronix.connectionfactory.use-tm-join=true Whether or not TMJOIN should be used when starting XAResources.\nspring.jta.bitronix.connectionfactory.user= # The user to use to connect to the JMS provider.\nspring.jta.bitronix.datasource.acquire-increment=1 # Number of connections to create when growing the pool.\nspring.jta.bitronix.datasource.acquisition-interval=1 # Time, in seconds, to wait before trying to acquire a connection again after an invalid connection was acquired.\nspring.jta.bitronix.datasource.acquisition-timeout=30 # Timeout, in seconds, for acquiring connections from the pool.\nspring.jta.bitronix.datasource.allow-local-transactions=true # Whether or not the transaction manager should allow mixing XA and non-XA transactions.\nspring.jta.bitronix.datasource.apply-transaction-timeout=false # Whether or not the transaction timeout should be set on the XAResource when it is enlisted.\nspring.jta.bitronix.datasource.automatic-enlisting-enabled=true # Whether or not resources should be enlisted and delisted automatically.\nspring.jta.bitronix.datasource.cursor-holdability= # The default cursor holdability for connections.\nspring.jta.bitronix.datasource.defer-connection-release=true # Whether or not the database can run many transactions on the same connection and supports transaction interleaving.\nspring.jta.bitronix.datasource.enable-jdbc4-connection-test= # Whether or not Connection.isValid() is called when acquiring a connection from the pool.\nspring.jta.bitronix.datasource.ignore-recovery-failures=false # Whether or not recovery failures should be ignored.\nspring.jta.bitronix.datasource.isolation-level= # The default isolation level for connections.\nspring.jta.bitronix.datasource.local-auto-commit= # The default auto-commit mode for local transactions.\nspring.jta.bitronix.datasource.login-timeout= # Timeout, in seconds, for establishing a database connection.\nspring.jta.bitronix.datasource.max-idle-time=60 # The time, in seconds, after which connections are cleaned up from the pool.\nspring.jta.bitronix.datasource.max-pool-size=10 # The maximum size of the pool. 0 denotes no limit.\nspring.jta.bitronix.datasource.min-pool-size=0 # The minimum size of the pool.\nspring.jta.bitronix.datasource.prepared-statement-cache-size=0 # The target size of the prepared statement cache. 0 disables the cache.\nspring.jta.bitronix.datasource.share-transaction-connections=false #  Whether or not connections in the ACCESSIBLE state can be shared within the context of a transaction.\nspring.jta.bitronix.datasource.test-query= # SQL query or statement used to validate a connection before returning it.\nspring.jta.bitronix.datasource.two-pc-ordering-position=1 # The position that this resource should take during two-phase commit (always first is Integer.MIN_VALUE, always last is Integer.MAX_VALUE).\nspring.jta.bitronix.datasource.unique-name=dataSource # The unique name used to identify the resource during recovery.\nspring.jta.bitronix.datasource.use-tm-join=true Whether or not TMJOIN should be used when starting XAResources.\nspring.jta.bitronix.properties.allow-multiple-lrc=false # Allow multiple LRC resources to be enlisted into the same transaction.\nspring.jta.bitronix.properties.asynchronous2-pc=false # Enable asynchronously execution of two phase commit.\nspring.jta.bitronix.properties.background-recovery-interval-seconds=60 # Interval in seconds at which to run the recovery process in the background.\nspring.jta.bitronix.properties.current-node-only-recovery=true # Recover only the current node.\nspring.jta.bitronix.properties.debug-zero-resource-transaction=false # Log the creation and commit call stacks of transactions executed without a single enlisted resource.\nspring.jta.bitronix.properties.default-transaction-timeout=60 # Default transaction timeout in seconds.\nspring.jta.bitronix.properties.disable-jmx=false # Enable JMX support.\nspring.jta.bitronix.properties.exception-analyzer= # Set the fully qualified name of the exception analyzer implementation to use.\nspring.jta.bitronix.properties.filter-log-status=false # Enable filtering of logs so that only mandatory logs are written.\nspring.jta.bitronix.properties.force-batching-enabled=true #  Set if disk forces are batched.\nspring.jta.bitronix.properties.forced-write-enabled=true # Set if logs are forced to disk.\nspring.jta.bitronix.properties.graceful-shutdown-interval=60 # Maximum amount of seconds the TM will wait for transactions to get done before aborting them at shutdown time.\nspring.jta.bitronix.properties.jndi-transaction-synchronization-registry-name= # JNDI name of the TransactionSynchronizationRegistry.\nspring.jta.bitronix.properties.jndi-user-transaction-name= # JNDI name of the UserTransaction.\nspring.jta.bitronix.properties.journal=disk # Name of the journal. Can be 'disk', 'null' or a class name.\nspring.jta.bitronix.properties.log-part1-filename=btm1.tlog # Name of the first fragment of the journal.\nspring.jta.bitronix.properties.log-part2-filename=btm2.tlog # Name of the second fragment of the journal.\nspring.jta.bitronix.properties.max-log-size-in-mb=2 # Maximum size in megabytes of the journal fragments.\nspring.jta.bitronix.properties.resource-configuration-filename= # ResourceLoader configuration file name.\nspring.jta.bitronix.properties.server-id= # ASCII ID that must uniquely identify this TM instance. Default to the machine's IP address.\nspring.jta.bitronix.properties.skip-corrupted-logs=false # Skip corrupted transactions log entries.\nspring.jta.bitronix.properties.warn-about-zero-resource-transaction=true # Log a warning for transactions executed without a single enlisted resource.\n\n# NARAYANA (NarayanaProperties)\nspring.jta.narayana.default-timeout=60 # Transaction timeout in seconds.\nspring.jta.narayana.expiry-scanners=com.arjuna.ats.internal.arjuna.recovery.ExpiredTransactionStatusManagerScanner # Comma-separated list of expiry scanners.\nspring.jta.narayana.log-dir= # Transaction object store directory.\nspring.jta.narayana.one-phase-commit=true # Enable one phase commit optimisation.\nspring.jta.narayana.periodic-recovery-period=120 # Interval in which periodic recovery scans are performed in seconds.\nspring.jta.narayana.recovery-backoff-period=10 # Back off period between first and second phases of the recovery scan in seconds.\nspring.jta.narayana.recovery-db-pass= # Database password to be used by recovery manager.\nspring.jta.narayana.recovery-db-user= # Database username to be used by recovery manager.\nspring.jta.narayana.recovery-jms-pass= # JMS password to be used by recovery manager.\nspring.jta.narayana.recovery-jms-user= # JMS username to be used by recovery manager.\nspring.jta.narayana.recovery-modules= # Comma-separated list of recovery modules.\nspring.jta.narayana.transaction-manager-id=1 # Unique transaction manager id.\nspring.jta.narayana.xa-resource-orphan-filters= # Comma-separated list of orphan filters.\n\n# EMBEDDED MONGODB (EmbeddedMongoProperties)\nspring.mongodb.embedded.features=SYNC_DELAY # Comma-separated list of features to enable.\nspring.mongodb.embedded.storage.databaseDir= # Directory used for data storage.\nspring.mongodb.embedded.storage.oplogSize= # Maximum size of the oplog in megabytes.\nspring.mongodb.embedded.storage.replSetName= # Name of the replica set.\nspring.mongodb.embedded.version=2.6.10 # Version of Mongo to use.\n\n# REDIS (RedisProperties)\nspring.redis.cluster.max-redirects= # Maximum number of redirects to follow when executing commands across the cluster.\nspring.redis.cluster.nodes= # Comma-separated list of \"host:port\" pairs to bootstrap from.\nspring.redis.database=0 # Database index used by the connection factory.\nspring.redis.host=localhost # Redis server host.\nspring.redis.password= # Login password of the redis server.\nspring.redis.pool.max-active=8 # Max number of connections that can be allocated by the pool at a given time. Use a negative value for no limit.\nspring.redis.pool.max-idle=8 # Max number of \"idle\" connections in the pool. Use a negative value to indicate an unlimited number of idle connections.\nspring.redis.pool.max-wait=-1 # Maximum amount of time (in milliseconds) a connection allocation should block before throwing an exception when the pool is exhausted. Use a negative value to block indefinitely.\nspring.redis.pool.min-idle=0 # Target for the minimum number of idle connections to maintain in the pool. This setting only has an effect if it is positive.\nspring.redis.port=6379 # Redis server port.\nspring.redis.sentinel.master= # Name of Redis server.\nspring.redis.sentinel.nodes= # Comma-separated list of host:port pairs.\nspring.redis.timeout=0 # Connection timeout in milliseconds.\n\n\n# ----------------------------------------\n# INTEGRATION PROPERTIES\n# ----------------------------------------\n\n# ACTIVEMQ (ActiveMQProperties)\nspring.activemq.broker-url= # URL of the ActiveMQ broker. Auto-generated by default. For instance `tcp://localhost:61616`\nspring.activemq.in-memory=true # Specify if the default broker URL should be in memory. Ignored if an explicit broker has been specified.\nspring.activemq.password= # Login password of the broker.\nspring.activemq.user= # Login user of the broker.\nspring.activemq.packages.trust-all=false # Trust all packages.\nspring.activemq.packages.trusted= # Comma-separated list of specific packages to trust (when not trusting all packages).\nspring.activemq.pool.configuration.*= # See PooledConnectionFactory.\nspring.activemq.pool.enabled=false # Whether a PooledConnectionFactory should be created instead of a regular ConnectionFactory.\nspring.activemq.pool.expiry-timeout=0 # Connection expiration timeout in milliseconds.\nspring.activemq.pool.idle-timeout=30000 # Connection idle timeout in milliseconds.\nspring.activemq.pool.max-connections=1 # Maximum number of pooled connections.\n\n# ARTEMIS (ArtemisProperties)\nspring.artemis.embedded.cluster-password= # Cluster password. Randomly generated on startup by default.\nspring.artemis.embedded.data-directory= # Journal file directory. Not necessary if persistence is turned off.\nspring.artemis.embedded.enabled=true # Enable embedded mode if the Artemis server APIs are available.\nspring.artemis.embedded.persistent=false # Enable persistent store.\nspring.artemis.embedded.queues= # Comma-separated list of queues to create on startup.\nspring.artemis.embedded.server-id= # Server id. By default, an auto-incremented counter is used.\nspring.artemis.embedded.topics= # Comma-separated list of topics to create on startup.\nspring.artemis.host=localhost # Artemis broker host.\nspring.artemis.mode= # Artemis deployment mode, auto-detected by default. Can be explicitly set to \"native\" or \"embedded\".\nspring.artemis.password= # Login password of the broker.\nspring.artemis.port=61616 # Artemis broker port.\nspring.artemis.user= # Login user of the broker.\n\n# SPRING BATCH (BatchProperties)\nspring.batch.initializer.enabled=true # Create the required batch tables on startup if necessary.\nspring.batch.job.enabled=true # Execute all Spring Batch jobs in the context on startup.\nspring.batch.job.names= # Comma-separated list of job names to execute on startup (For instance `job1,job2`). By default, all Jobs found in the context are executed.\nspring.batch.schema=classpath:org/springframework/batch/core/schema-@@platform@@.sql # Path to the SQL file to use to initialize the database schema.\nspring.batch.table-prefix= # Table prefix for all the batch meta-data tables.\n\n# HORNETQ (HornetQProperties)\nspring.hornetq.embedded.cluster-password= # Cluster password. Randomly generated on startup by default.\nspring.hornetq.embedded.data-directory= # Journal file directory. Not necessary if persistence is turned off.\nspring.hornetq.embedded.enabled=true # Enable embedded mode if the HornetQ server APIs are available.\nspring.hornetq.embedded.persistent=false # Enable persistent store.\nspring.hornetq.embedded.queues= # Comma-separated list of queues to create on startup.\nspring.hornetq.embedded.server-id= # Server id. By default, an auto-incremented counter is used.\nspring.hornetq.embedded.topics= # Comma-separated list of topics to create on startup.\nspring.hornetq.host=localhost # HornetQ broker host.\nspring.hornetq.mode= # HornetQ deployment mode, auto-detected by default. Can be explicitly set to \"native\" or \"embedded\".\nspring.hornetq.password= # Login password of the broker.\nspring.hornetq.port=5445 # HornetQ broker port.\nspring.hornetq.user= # Login user of the broker.\n\n# JMS (JmsProperties)\nspring.jms.jndi-name= # Connection factory JNDI name. When set, takes precedence to others connection factory auto-configurations.\nspring.jms.listener.acknowledge-mode= # Acknowledge mode of the container. By default, the listener is transacted with automatic acknowledgment.\nspring.jms.listener.auto-startup=true # Start the container automatically on startup.\nspring.jms.listener.concurrency= # Minimum number of concurrent consumers.\nspring.jms.listener.max-concurrency= # Maximum number of concurrent consumers.\nspring.jms.pub-sub-domain=false # Specify if the default destination type is topic.\n\n# RABBIT (RabbitProperties)\nspring.rabbitmq.addresses= # Comma-separated list of addresses to which the client should connect.\nspring.rabbitmq.cache.channel.checkout-timeout= # Number of milliseconds to wait to obtain a channel if the cache size has been reached.\nspring.rabbitmq.cache.channel.size= # Number of channels to retain in the cache.\nspring.rabbitmq.cache.connection.mode=CHANNEL # Connection factory cache mode.\nspring.rabbitmq.cache.connection.size= # Number of connections to cache.\nspring.rabbitmq.connection-timeout= # Connection timeout, in milliseconds; zero for infinite.\nspring.rabbitmq.dynamic=true # Create an AmqpAdmin bean.\nspring.rabbitmq.host=localhost # RabbitMQ host.\nspring.rabbitmq.listener.acknowledge-mode= # Acknowledge mode of container.\nspring.rabbitmq.listener.auto-startup=true # Start the container automatically on startup.\nspring.rabbitmq.listener.concurrency= # Minimum number of consumers.\nspring.rabbitmq.listener.default-requeue-rejected= # Whether or not to requeue delivery failures; default `true`.\nspring.rabbitmq.listener.max-concurrency= # Maximum number of consumers.\nspring.rabbitmq.listener.prefetch= # Number of messages to be handled in a single request. It should be greater than or equal to the transaction size (if used).\nspring.rabbitmq.listener.retry.enabled=false # Whether or not publishing retries are enabled.\nspring.rabbitmq.listener.retry.initial-interval=1000 # Interval between the first and second attempt to deliver a message.\nspring.rabbitmq.listener.retry.max-attempts=3 # Maximum number of attempts to deliver a message.\nspring.rabbitmq.listener.retry.max-interval=10000 # Maximum number of attempts to deliver a message.\nspring.rabbitmq.listener.retry.multiplier=1.0 # A multiplier to apply to the previous delivery retry interval.\nspring.rabbitmq.listener.retry.stateless=true # Whether or not retry is stateless or stateful.\nspring.rabbitmq.listener.transaction-size= # Number of messages to be processed in a transaction. For best results it should be less than or equal to the prefetch count.\nspring.rabbitmq.password= # Login to authenticate against the broker.\nspring.rabbitmq.port=5672 # RabbitMQ port.\nspring.rabbitmq.publisher-confirms=false # Enable publisher confirms.\nspring.rabbitmq.publisher-returns=false # Enable publisher returns.\nspring.rabbitmq.requested-heartbeat= # Requested heartbeat timeout, in seconds; zero for none.\nspring.rabbitmq.ssl.enabled=false # Enable SSL support.\nspring.rabbitmq.ssl.key-store= # Path to the key store that holds the SSL certificate.\nspring.rabbitmq.ssl.key-store-password= # Password used to access the key store.\nspring.rabbitmq.ssl.trust-store= # Trust store that holds SSL certificates.\nspring.rabbitmq.ssl.trust-store-password= # Password used to access the trust store.\nspring.rabbitmq.ssl.algorithm= # SSL algorithm to use. By default configure by the rabbit client library.\nspring.rabbitmq.template.mandatory=false # Enable mandatory messages.\nspring.rabbitmq.template.receive-timeout=0 # Timeout for `receive()` methods.\nspring.rabbitmq.template.reply-timeout=5000 # Timeout for `sendAndReceive()` methods.\nspring.rabbitmq.template.retry.enabled=false # Set to true to enable retries in the `RabbitTemplate`.\nspring.rabbitmq.template.retry.initial-interval=1000 # Interval between the first and second attempt to publish a message.\nspring.rabbitmq.template.retry.max-attempts=3 # Maximum number of attempts to publish a message.\nspring.rabbitmq.template.retry.max-interval=10000 # Maximum number of attempts to publish a message.\nspring.rabbitmq.template.retry.multiplier=1.0 # A multiplier to apply to the previous publishing retry interval.\nspring.rabbitmq.username= # Login user to authenticate to the broker.\nspring.rabbitmq.virtual-host= # Virtual host to use when connecting to the broker.\n\n\n# ----------------------------------------\n# ACTUATOR PROPERTIES\n# ----------------------------------------\n\n# ENDPOINTS (AbstractEndpoint subclasses)\nendpoints.enabled=true # Enable endpoints.\nendpoints.sensitive= # Default endpoint sensitive setting.\nendpoints.actuator.enabled=true # Enable the endpoint.\nendpoints.actuator.path= # Endpoint URL path.\nendpoints.actuator.sensitive=false # Enable security on the endpoint.\nendpoints.autoconfig.enabled= # Enable the endpoint.\nendpoints.autoconfig.id= # Endpoint identifier.\nendpoints.autoconfig.path= # Endpoint path.\nendpoints.autoconfig.sensitive= # Mark if the endpoint exposes sensitive information.\nendpoints.beans.enabled= # Enable the endpoint.\nendpoints.beans.id= # Endpoint identifier.\nendpoints.beans.path= # Endpoint path.\nendpoints.beans.sensitive= # Mark if the endpoint exposes sensitive information.\nendpoints.configprops.enabled= # Enable the endpoint.\nendpoints.configprops.id= # Endpoint identifier.\nendpoints.configprops.keys-to-sanitize=password,secret,key,token,.*credentials.*,vcap_services # Keys that should be sanitized. Keys can be simple strings that the property ends with or regex expressions.\nendpoints.configprops.path= # Endpoint path.\nendpoints.configprops.sensitive= # Mark if the endpoint exposes sensitive information.\nendpoints.docs.curies.enabled=false # Enable the curie generation.\nendpoints.docs.enabled=true # Enable actuator docs endpoint.\nendpoints.docs.path=/docs #\nendpoints.docs.sensitive=false #\nendpoints.dump.enabled= # Enable the endpoint.\nendpoints.dump.id= # Endpoint identifier.\nendpoints.dump.path= # Endpoint path.\nendpoints.dump.sensitive= # Mark if the endpoint exposes sensitive information.\nendpoints.env.enabled= # Enable the endpoint.\nendpoints.env.id= # Endpoint identifier.\nendpoints.env.keys-to-sanitize=password,secret,key,token,.*credentials.*,vcap_services # Keys that should be sanitized. Keys can be simple strings that the property ends with or regex expressions.\nendpoints.env.path= # Endpoint path.\nendpoints.env.sensitive= # Mark if the endpoint exposes sensitive information.\nendpoints.flyway.enabled= # Enable the endpoint.\nendpoints.flyway.id= # Endpoint identifier.\nendpoints.flyway.sensitive= # Mark if the endpoint exposes sensitive information.\nendpoints.health.enabled= # Enable the endpoint.\nendpoints.health.id= # Endpoint identifier.\nendpoints.health.mapping.*= # Mapping of health statuses to HttpStatus codes. By default, registered health statuses map to sensible defaults (i.e. UP maps to 200).\nendpoints.health.path= # Endpoint path.\nendpoints.health.sensitive= # Mark if the endpoint exposes sensitive information.\nendpoints.health.time-to-live=1000 # Time to live for cached result, in milliseconds.\nendpoints.heapdump.enabled= # Enable the endpoint.\nendpoints.heapdump.path= # Endpoint path.\nendpoints.heapdump.sensitive= # Mark if the endpoint exposes sensitive information.\nendpoints.info.enabled= # Enable the endpoint.\nendpoints.info.id= # Endpoint identifier.\nendpoints.info.path= # Endpoint path.\nendpoints.info.sensitive= # Mark if the endpoint exposes sensitive information.\nendpoints.jolokia.enabled=true # Enable Jolokia endpoint.\nendpoints.jolokia.path=/jolokia # Endpoint URL path.\nendpoints.jolokia.sensitive=true # Enable security on the endpoint.\nendpoints.liquibase.enabled= # Enable the endpoint.\nendpoints.liquibase.id= # Endpoint identifier.\nendpoints.liquibase.sensitive= # Mark if the endpoint exposes sensitive information.\nendpoints.logfile.enabled=true # Enable the endpoint.\nendpoints.logfile.external-file= # External Logfile to be accessed.\nendpoints.logfile.path=/logfile # Endpoint URL path.\nendpoints.logfile.sensitive=true # Enable security on the endpoint.\nendpoints.mappings.enabled= # Enable the endpoint.\nendpoints.mappings.id= # Endpoint identifier.\nendpoints.mappings.path= # Endpoint path.\nendpoints.mappings.sensitive= # Mark if the endpoint exposes sensitive information.\nendpoints.metrics.enabled= # Enable the endpoint.\nendpoints.metrics.filter.enabled=true # Enable the metrics servlet filter.\nendpoints.metrics.filter.gauge-submissions=merged # Http filter gauge submissions (merged, per-http-method)\nendpoints.metrics.filter.counter-submissions=merged # Http filter counter submissions (merged, per-http-method)\nendpoints.metrics.id= # Endpoint identifier.\nendpoints.metrics.path= # Endpoint path.\nendpoints.metrics.sensitive= # Mark if the endpoint exposes sensitive information.\nendpoints.shutdown.enabled= # Enable the endpoint.\nendpoints.shutdown.id= # Endpoint identifier.\nendpoints.shutdown.path= # Endpoint path.\nendpoints.shutdown.sensitive= # Mark if the endpoint exposes sensitive information.\nendpoints.trace.enabled= # Enable the endpoint.\nendpoints.trace.id= # Endpoint identifier.\nendpoints.trace.path= # Endpoint path.\nendpoints.trace.sensitive= # Mark if the endpoint exposes sensitive information.\n\n# ENDPOINTS CORS CONFIGURATION (EndpointCorsProperties)\nendpoints.cors.allow-credentials= # Set whether credentials are supported. When not set, credentials are not supported.\nendpoints.cors.allowed-headers= # Comma-separated list of headers to allow in a request. '*' allows all headers.\nendpoints.cors.allowed-methods=GET # Comma-separated list of methods to allow. '*' allows all methods.\nendpoints.cors.allowed-origins= # Comma-separated list of origins to allow. '*' allows all origins. When not set, CORS support is disabled.\nendpoints.cors.exposed-headers= # Comma-separated list of headers to include in a response.\nendpoints.cors.max-age=1800 # How long, in seconds, the response from a pre-flight request can be cached by clients.\n\n# JMX ENDPOINT (EndpointMBeanExportProperties)\nendpoints.jmx.domain= # JMX domain name. Initialized with the value of 'spring.jmx.default-domain' if set.\nendpoints.jmx.enabled=true # Enable JMX export of all endpoints.\nendpoints.jmx.static-names= # Additional static properties to append to all ObjectNames of MBeans representing Endpoints.\nendpoints.jmx.unique-names=false # Ensure that ObjectNames are modified in case of conflict.\n\n# JOLOKIA (JolokiaProperties)\njolokia.config.*= # See Jolokia manual\n\n# MANAGEMENT HTTP SERVER (ManagementServerProperties)\nmanagement.add-application-context-header=true # Add the \"X-Application-Context\" HTTP header in each response.\nmanagement.address= # Network address that the management endpoints should bind to.\nmanagement.context-path= # Management endpoint context-path. For instance `/actuator`\nmanagement.port= # Management endpoint HTTP port. Uses the same port as the application by default. Configure a different port to use management-specific SSL.\nmanagement.security.enabled=true # Enable security.\nmanagement.security.roles=ADMIN # Comma-separated list of roles that can access the management endpoint.\nmanagement.security.sessions=stateless # Session creating policy to use (always, never, if_required, stateless).\nmanagement.ssl.ciphers= # Supported SSL ciphers. Requires a custom management.port.\nmanagement.ssl.client-auth= # Whether client authentication is wanted (\"want\") or needed (\"need\"). Requires a trust store. Requires a custom management.port.\nmanagement.ssl.enabled= # Enable SSL support. Requires a custom management.port.\nmanagement.ssl.enabled-protocols= # Enabled SSL protocols. Requires a custom management.port.\nmanagement.ssl.key-alias= # Alias that identifies the key in the key store. Requires a custom management.port.\nmanagement.ssl.key-password= # Password used to access the key in the key store. Requires a custom management.port.\nmanagement.ssl.key-store= # Path to the key store that holds the SSL certificate (typically a jks file). Requires a custom management.port.\nmanagement.ssl.key-store-password= # Password used to access the key store. Requires a custom management.port.\nmanagement.ssl.key-store-provider= # Provider for the key store. Requires a custom management.port.\nmanagement.ssl.key-store-type= # Type of the key store. Requires a custom management.port.\nmanagement.ssl.protocol=TLS # SSL protocol to use. Requires a custom management.port.\nmanagement.ssl.trust-store= # Trust store that holds SSL certificates. Requires a custom management.port.\nmanagement.ssl.trust-store-password= # Password used to access the trust store. Requires a custom management.port.\nmanagement.ssl.trust-store-provider= # Provider for the trust store. Requires a custom management.port.\nmanagement.ssl.trust-store-type= # Type of the trust store. Requires a custom management.port.\n\n# HEALTH INDICATORS (previously health.*)\nmanagement.health.db.enabled=true # Enable database health check.\nmanagement.health.defaults.enabled=true # Enable default health indicators.\nmanagement.health.diskspace.enabled=true # Enable disk space health check.\nmanagement.health.diskspace.path= # Path used to compute the available disk space.\nmanagement.health.diskspace.threshold=0 # Minimum disk space that should be available, in bytes.\nmanagement.health.elasticsearch.enabled=true # Enable elasticsearch health check.\nmanagement.health.elasticsearch.indices= # Comma-separated index names.\nmanagement.health.elasticsearch.response-timeout=100 # The time, in milliseconds, to wait for a response from the cluster.\nmanagement.health.jms.enabled=true # Enable JMS health check.\nmanagement.health.mail.enabled=true # Enable Mail health check.\nmanagement.health.mongo.enabled=true # Enable MongoDB health check.\nmanagement.health.rabbit.enabled=true # Enable RabbitMQ health check.\nmanagement.health.redis.enabled=true # Enable Redis health check.\nmanagement.health.solr.enabled=true # Enable Solr health check.\nmanagement.health.status.order=DOWN, OUT_OF_SERVICE, UNKNOWN, UP # Comma-separated list of health statuses in order of severity.\n\n# INFO CONTRIBUTORS (InfoContributorProperties)\nmanagement.info.build.enabled=true # Enable build info.\nmanagement.info.defaults.enabled=true # Enable default info contributors.\nmanagement.info.env.enabled=true # Enable environment info.\nmanagement.info.git.enabled=true # Enable git info.\nmanagement.info.git.mode=simple # Mode to use to expose git information.\n\n# REMOTE SHELL (ShellProperties)\nmanagement.shell.auth.type=simple # Authentication type. Auto-detected according to the environment.\nmanagement.shell.auth.jaas.domain=my-domain # JAAS domain.\nmanagement.shell.auth.key.path= # Path to the authentication key. This should point to a valid \".pem\" file.\nmanagement.shell.auth.simple.user.name=user # Login user.\nmanagement.shell.auth.simple.user.password= # Login password.\nmanagement.shell.auth.spring.roles=ADMIN # Comma-separated list of required roles to login to the CRaSH console.\nmanagement.shell.command-path-patterns=classpath*:/commands/**,classpath*:/crash/commands/** # Patterns to use to look for commands.\nmanagement.shell.command-refresh-interval=-1 # Scan for changes and update the command if necessary (in seconds).\nmanagement.shell.config-path-patterns=classpath*:/crash/* # Patterns to use to look for configurations.\nmanagement.shell.disabled-commands=jpa*,jdbc*,jndi* # Comma-separated list of commands to disable.\nmanagement.shell.disabled-plugins= # Comma-separated list of plugins to disable. Certain plugins are disabled by default based on the environment.\nmanagement.shell.ssh.auth-timeout = # Number of milliseconds after user will be prompted to login again.\nmanagement.shell.ssh.enabled=true # Enable CRaSH SSH support.\nmanagement.shell.ssh.idle-timeout = # Number of milliseconds after which unused connections are closed.\nmanagement.shell.ssh.key-path= # Path to the SSH server key.\nmanagement.shell.ssh.port=2000 # SSH port.\nmanagement.shell.telnet.enabled=false # Enable CRaSH telnet support. Enabled by default if the TelnetPlugin is  available.\nmanagement.shell.telnet.port=5000 # Telnet port.\n\n# TRACING (TraceProperties)\nmanagement.trace.include=request-headers,response-headers,cookies,errors # Items to be included in the trace.\n\n# METRICS EXPORT (MetricExportProperties)\nspring.metrics.export.aggregate.key-pattern= # Pattern that tells the aggregator what to do with the keys from the source repository.\nspring.metrics.export.aggregate.prefix= # Prefix for global repository if active.\nspring.metrics.export.delay-millis=5000 # Delay in milliseconds between export ticks. Metrics are exported to external sources on a schedule with this delay.\nspring.metrics.export.enabled=true # Flag to enable metric export (assuming a MetricWriter is available).\nspring.metrics.export.excludes= # List of patterns for metric names to exclude. Applied after the includes.\nspring.metrics.export.includes= # List of patterns for metric names to include.\nspring.metrics.export.redis.key=keys.spring.metrics # Key for redis repository export (if active).\nspring.metrics.export.redis.prefix=spring.metrics # Prefix for redis repository if active.\nspring.metrics.export.send-latest= # Flag to switch off any available optimizations based on not exporting unchanged metric values.\nspring.metrics.export.statsd.host= # Host of a statsd server to receive exported metrics.\nspring.metrics.export.statsd.port=8125 # Port of a statsd server to receive exported metrics.\nspring.metrics.export.statsd.prefix= # Prefix for statsd exported metrics.\nspring.metrics.export.triggers.*= # Specific trigger properties per MetricWriter bean name.\n\n\n# ----------------------------------------\n# DEVTOOLS PROPERTIES\n# ----------------------------------------\n\n# DEVTOOLS (DevToolsProperties)\nspring.devtools.livereload.enabled=true # Enable a livereload.com compatible server.\nspring.devtools.livereload.port=35729 # Server port.\nspring.devtools.restart.additional-exclude= # Additional patterns that should be excluded from triggering a full restart.\nspring.devtools.restart.additional-paths= # Additional paths to watch for changes.\nspring.devtools.restart.enabled=true # Enable automatic restart.\nspring.devtools.restart.exclude=META-INF/maven/**,META-INF/resources/**,resources/**,static/**,public/**,templates/**,**/*Test.class,**/*Tests.class,git.properties # Patterns that should be excluded from triggering a full restart.\nspring.devtools.restart.poll-interval=1000 # Amount of time (in milliseconds) to wait between polling for classpath changes.\nspring.devtools.restart.quiet-period=400 # Amount of quiet time (in milliseconds) required without any classpath changes before a restart is triggered.\nspring.devtools.restart.trigger-file= # Name of a specific file that when changed will trigger the restart check. If not specified any classpath file change will trigger the restart.\n\n# REMOTE DEVTOOLS (RemoteDevToolsProperties)\nspring.devtools.remote.context-path=/.~~spring-boot!~ # Context path used to handle the remote connection.\nspring.devtools.remote.debug.enabled=true # Enable remote debug support.\nspring.devtools.remote.debug.local-port=8000 # Local remote debug server port.\nspring.devtools.remote.proxy.host= # The host of the proxy to use to connect to the remote application.\nspring.devtools.remote.proxy.port= # The port of the proxy to use to connect to the remote application.\nspring.devtools.remote.restart.enabled=true # Enable remote restart.\nspring.devtools.remote.secret= # A shared secret required to establish a connection (required to enable remote support).\nspring.devtools.remote.secret-header-name=X-AUTH-TOKEN # HTTP header used to transfer the shared secret.\n```\n\n","source":"_posts/spring-boot/properties.md","raw":"# application.properties相关通用属性\n\n\n```xml\n# ===================================================================\n# COMMON SPRING BOOT PROPERTIES\n#\n# This sample file is provided as a guideline. Do NOT copy it in its\n# entirety to your own application.               ^^^\n# ===================================================================\n\n\n# ----------------------------------------\n# CORE PROPERTIES\n# ----------------------------------------\n\n# BANNER\nbanner.charset=UTF-8 # Banner file encoding.\nbanner.location=classpath:banner.txt # Banner file location.\nbanner.image.location=classpath:banner.gif # Banner image file location (jpg/png can also be used).\nbanner.image.width= # Width of the banner image in chars (default 76)\nbanner.image.height= # Height of the banner image in chars (default based on image height)\nbanner.image.margin= # Left hand image margin in chars (default 2)\nbanner.image.invert= # If images should be inverted for dark terminal themes (default false)\n\n# LOGGING\nlogging.config= # Location of the logging configuration file. For instance `classpath:logback.xml` for Logback\nlogging.exception-conversion-word=%wEx # Conversion word used when logging exceptions.\nlogging.file= # Log file name. For instance `myapp.log`\nlogging.level.*= # Log levels severity mapping. For instance `logging.level.org.springframework=DEBUG`\nlogging.path= # Location of the log file. For instance `/var/log`\nlogging.pattern.console= # Appender pattern for output to the console. Only supported with the default logback setup.\nlogging.pattern.file= # Appender pattern for output to the file. Only supported with the default logback setup.\nlogging.pattern.level= # Appender pattern for log level (default %5p). Only supported with the default logback setup.\nlogging.register-shutdown-hook=false # Register a shutdown hook for the logging system when it is initialized.\n\n# AOP\nspring.aop.auto=true # Add @EnableAspectJAutoProxy.\nspring.aop.proxy-target-class=false # Whether subclass-based (CGLIB) proxies are to be created (true) as opposed to standard Java interface-based proxies (false).\n\n# IDENTITY (ContextIdApplicationContextInitializer)\nspring.application.index= # Application index.\nspring.application.name= # Application name.\n\n# ADMIN (SpringApplicationAdminJmxAutoConfiguration)\nspring.application.admin.enabled=false # Enable admin features for the application.\nspring.application.admin.jmx-name=org.springframework.boot:type=Admin,name=SpringApplication # JMX name of the application admin MBean.\n\n# AUTO-CONFIGURATION\nspring.autoconfigure.exclude= # Auto-configuration classes to exclude.\n\n# SPRING CORE\nspring.beaninfo.ignore=true # Skip search of BeanInfo classes.\n\n# SPRING CACHE (CacheProperties)\nspring.cache.cache-names= # Comma-separated list of cache names to create if supported by the underlying cache manager.\nspring.cache.caffeine.spec= # The spec to use to create caches. Check CaffeineSpec for more details on the spec format.\nspring.cache.couchbase.expiration=0 # Entry expiration in milliseconds. By default the entries never expire.\nspring.cache.ehcache.config= # The location of the configuration file to use to initialize EhCache.\nspring.cache.guava.spec= # The spec to use to create caches. Check CacheBuilderSpec for more details on the spec format.\nspring.cache.hazelcast.config= # The location of the configuration file to use to initialize Hazelcast.\nspring.cache.infinispan.config= # The location of the configuration file to use to initialize Infinispan.\nspring.cache.jcache.config= # The location of the configuration file to use to initialize the cache manager.\nspring.cache.jcache.provider= # Fully qualified name of the CachingProvider implementation to use to retrieve the JSR-107 compliant cache manager. Only needed if more than one JSR-107 implementation is available on the classpath.\nspring.cache.type= # Cache type, auto-detected according to the environment by default.\n\n# SPRING CONFIG - using environment property only (ConfigFileApplicationListener)\nspring.config.location= # Config file locations.\nspring.config.name=application # Config file name.\n\n# HAZELCAST (HazelcastProperties)\nspring.hazelcast.config= # The location of the configuration file to use to initialize Hazelcast.\n\n# PROJECT INFORMATION (ProjectInfoProperties)\nspring.info.build.location=classpath:META-INF/build-info.properties # Location of the generated build-info.properties file.\nspring.info.git.location=classpath:git.properties # Location of the generated git.properties file.\n\n# JMX\nspring.jmx.default-domain= # JMX domain name.\nspring.jmx.enabled=true # Expose management beans to the JMX domain.\nspring.jmx.server=mbeanServer # MBeanServer bean name.\n\n# Email (MailProperties)\nspring.mail.default-encoding=UTF-8 # Default MimeMessage encoding.\nspring.mail.host= # SMTP server host. For instance `smtp.example.com`\nspring.mail.jndi-name= # Session JNDI name. When set, takes precedence to others mail settings.\nspring.mail.password= # Login password of the SMTP server.\nspring.mail.port= # SMTP server port.\nspring.mail.properties.*= # Additional JavaMail session properties.\nspring.mail.protocol=smtp # Protocol used by the SMTP server.\nspring.mail.test-connection=false # Test that the mail server is available on startup.\nspring.mail.username= # Login user of the SMTP server.\n\n# APPLICATION SETTINGS (SpringApplication)\nspring.main.banner-mode=console # Mode used to display the banner when the application runs.\nspring.main.sources= # Sources (class name, package name or XML resource location) to include in the ApplicationContext.\nspring.main.web-environment= # Run the application in a web environment (auto-detected by default).\n\n# FILE ENCODING (FileEncodingApplicationListener)\nspring.mandatory-file-encoding= # Expected character encoding the application must use.\n\n# INTERNATIONALIZATION (MessageSourceAutoConfiguration)\nspring.messages.always-use-message-format=false # Set whether to always apply the MessageFormat rules, parsing even messages without arguments.\nspring.messages.basename=messages # Comma-separated list of basenames, each following the ResourceBundle convention.\nspring.messages.cache-seconds=-1 # Loaded resource bundle files cache expiration, in seconds. When set to -1, bundles are cached forever.\nspring.messages.encoding=UTF-8 # Message bundles encoding.\nspring.messages.fallback-to-system-locale=true # Set whether to fall back to the system Locale if no files for a specific Locale have been found.\n\n# OUTPUT\nspring.output.ansi.enabled=detect # Configure the ANSI output (can be \"detect\", \"always\", \"never\").\n\n# PID FILE (ApplicationPidFileWriter)\nspring.pid.fail-on-write-error= # Fail if ApplicationPidFileWriter is used but it cannot write the PID file.\nspring.pid.file= # Location of the PID file to write (if ApplicationPidFileWriter is used).\n\n# PROFILES\nspring.profiles.active= # Comma-separated list of active profiles.\nspring.profiles.include= # Unconditionally activate the specified comma separated profiles.\n\n# SENDGRID (SendGridAutoConfiguration)\nspring.sendgrid.api-key= # SendGrid api key (alternative to username/password)\nspring.sendgrid.username= # SendGrid account username\nspring.sendgrid.password= # SendGrid account password\nspring.sendgrid.proxy.host= # SendGrid proxy host\nspring.sendgrid.proxy.port= # SendGrid proxy port\n\n\n# ----------------------------------------\n# WEB PROPERTIES\n# ----------------------------------------\n\n# EMBEDDED SERVER CONFIGURATION (ServerProperties)\nserver.address= # Network address to which the server should bind to.\nserver.compression.enabled=false # If response compression is enabled.\nserver.compression.excluded-user-agents= # List of user-agents to exclude from compression.\nserver.compression.mime-types= # Comma-separated list of MIME types that should be compressed. For instance `text/html,text/css,application/json`\nserver.compression.min-response-size= # Minimum response size that is required for compression to be performed. For instance 2048\nserver.connection-timeout= # Time in milliseconds that connectors will wait for another HTTP request before closing the connection. When not set, the connector's container-specific default will be used. Use a value of -1 to indicate no (i.e. infinite) timeout.\nserver.context-parameters.*= # Servlet context init parameters. For instance `server.context-parameters.a=alpha`\nserver.context-path= # Context path of the application.\nserver.display-name=application # Display name of the application.\nserver.max-http-header-size=0 # Maximum size in bytes of the HTTP message header.\nserver.max-http-post-size=0 # Maximum size in bytes of the HTTP post content.\nserver.error.include-stacktrace=never # When to include a \"stacktrace\" attribute.\nserver.error.path=/error # Path of the error controller.\nserver.error.whitelabel.enabled=true # Enable the default error page displayed in browsers in case of a server error.\nserver.jetty.acceptors= # Number of acceptor threads to use.\nserver.jetty.selectors= # Number of selector threads to use.\nserver.jsp-servlet.class-name=org.apache.jasper.servlet.JspServlet # The class name of the JSP servlet.\nserver.jsp-servlet.init-parameters.*= # Init parameters used to configure the JSP servlet\nserver.jsp-servlet.registered=true # Whether or not the JSP servlet is registered\nserver.port=8080 # Server HTTP port.\nserver.server-header= # Value to use for the Server response header (no header is sent if empty)\nserver.servlet-path=/ # Path of the main dispatcher servlet.\nserver.use-forward-headers= # If X-Forwarded-* headers should be applied to the HttpRequest.\nserver.session.cookie.comment= # Comment for the session cookie.\nserver.session.cookie.domain= # Domain for the session cookie.\nserver.session.cookie.http-only= # \"HttpOnly\" flag for the session cookie.\nserver.session.cookie.max-age= # Maximum age of the session cookie in seconds.\nserver.session.cookie.name= # Session cookie name.\nserver.session.cookie.path= # Path of the session cookie.\nserver.session.cookie.secure= # \"Secure\" flag for the session cookie.\nserver.session.persistent=false # Persist session data between restarts.\nserver.session.store-dir= # Directory used to store session data.\nserver.session.timeout= # Session timeout in seconds.\nserver.session.tracking-modes= # Session tracking modes (one or more of the following: \"cookie\", \"url\", \"ssl\").\nserver.ssl.ciphers= # Supported SSL ciphers.\nserver.ssl.client-auth= # Whether client authentication is wanted (\"want\") or needed (\"need\"). Requires a trust store.\nserver.ssl.enabled= # Enable SSL support.\nserver.ssl.enabled-protocols= # Enabled SSL protocols.\nserver.ssl.key-alias= # Alias that identifies the key in the key store.\nserver.ssl.key-password= # Password used to access the key in the key store.\nserver.ssl.key-store= # Path to the key store that holds the SSL certificate (typically a jks file).\nserver.ssl.key-store-password= # Password used to access the key store.\nserver.ssl.key-store-provider= # Provider for the key store.\nserver.ssl.key-store-type= # Type of the key store.\nserver.ssl.protocol=TLS # SSL protocol to use.\nserver.ssl.trust-store= # Trust store that holds SSL certificates.\nserver.ssl.trust-store-password= # Password used to access the trust store.\nserver.ssl.trust-store-provider= # Provider for the trust store.\nserver.ssl.trust-store-type= # Type of the trust store.\nserver.tomcat.accesslog.directory=logs # Directory in which log files are created. Can be relative to the tomcat base dir or absolute.\nserver.tomcat.accesslog.enabled=false # Enable access log.\nserver.tomcat.accesslog.pattern=common # Format pattern for access logs.\nserver.tomcat.accesslog.prefix=access_log # Log file name prefix.\nserver.tomcat.accesslog.rename-on-rotate=false # Defer inclusion of the date stamp in the file name until rotate time.\nserver.tomcat.accesslog.suffix=.log # Log file name suffix.\nserver.tomcat.background-processor-delay=30 # Delay in seconds between the invocation of backgroundProcess methods.\nserver.tomcat.basedir= # Tomcat base directory. If not specified a temporary directory will be used.\nserver.tomcat.internal-proxies=10\\\\.\\\\d{1,3}\\\\.\\\\d{1,3}\\\\.\\\\d{1,3}|\\\\\n        192\\\\.168\\\\.\\\\d{1,3}\\\\.\\\\d{1,3}|\\\\\n        169\\\\.254\\\\.\\\\d{1,3}\\\\.\\\\d{1,3}|\\\\\n        127\\\\.\\\\d{1,3}\\\\.\\\\d{1,3}\\\\.\\\\d{1,3}|\\\\\n        172\\\\.1[6-9]{1}\\\\.\\\\d{1,3}\\\\.\\\\d{1,3}|\\\\\n        172\\\\.2[0-9]{1}\\\\.\\\\d{1,3}\\\\.\\\\d{1,3}|\\\\\n        172\\\\.3[0-1]{1}\\\\.\\\\d{1,3}\\\\.\\\\d{1,3} # regular expression matching trusted IP addresses.\nserver.tomcat.max-threads=0 # Maximum amount of worker threads.\nserver.tomcat.min-spare-threads=0 # Minimum amount of worker threads.\nserver.tomcat.port-header=X-Forwarded-Port # Name of the HTTP header used to override the original port value.\nserver.tomcat.protocol-header= # Header that holds the incoming protocol, usually named \"X-Forwarded-Proto\".\nserver.tomcat.protocol-header-https-value=https # Value of the protocol header that indicates that the incoming request uses SSL.\nserver.tomcat.redirect-context-root= # Whether requests to the context root should be redirected by appending a / to the path.\nserver.tomcat.remote-ip-header= # Name of the http header from which the remote ip is extracted. For instance `X-FORWARDED-FOR`\nserver.tomcat.uri-encoding=UTF-8 # Character encoding to use to decode the URI.\nserver.undertow.accesslog.dir= # Undertow access log directory.\nserver.undertow.accesslog.enabled=false # Enable access log.\nserver.undertow.accesslog.pattern=common # Format pattern for access logs.\nserver.undertow.buffer-size= # Size of each buffer in bytes.\nserver.undertow.buffers-per-region= # Number of buffer per region.\nserver.undertow.direct-buffers= # Allocate buffers outside the Java heap.\nserver.undertow.io-threads= # Number of I/O threads to create for the worker.\nserver.undertow.worker-threads= # Number of worker threads.\n\n# FREEMARKER (FreeMarkerAutoConfiguration)\nspring.freemarker.allow-request-override=false # Set whether HttpServletRequest attributes are allowed to override (hide) controller generated model attributes of the same name.\nspring.freemarker.allow-session-override=false # Set whether HttpSession attributes are allowed to override (hide) controller generated model attributes of the same name.\nspring.freemarker.cache=false # Enable template caching.\nspring.freemarker.charset=UTF-8 # Template encoding.\nspring.freemarker.check-template-location=true # Check that the templates location exists.\nspring.freemarker.content-type=text/html # Content-Type value.\nspring.freemarker.enabled=true # Enable MVC view resolution for this technology.\nspring.freemarker.expose-request-attributes=false # Set whether all request attributes should be added to the model prior to merging with the template.\nspring.freemarker.expose-session-attributes=false # Set whether all HttpSession attributes should be added to the model prior to merging with the template.\nspring.freemarker.expose-spring-macro-helpers=true # Set whether to expose a RequestContext for use by Spring's macro library, under the name \"springMacroRequestContext\".\nspring.freemarker.prefer-file-system-access=true # Prefer file system access for template loading. File system access enables hot detection of template changes.\nspring.freemarker.prefix= # Prefix that gets prepended to view names when building a URL.\nspring.freemarker.request-context-attribute= # Name of the RequestContext attribute for all views.\nspring.freemarker.settings.*= # Well-known FreeMarker keys which will be passed to FreeMarker's Configuration.\nspring.freemarker.suffix= # Suffix that gets appended to view names when building a URL.\nspring.freemarker.template-loader-path=classpath:/templates/ # Comma-separated list of template paths.\nspring.freemarker.view-names= # White list of view names that can be resolved.\n\n# GROOVY TEMPLATES (GroovyTemplateAutoConfiguration)\nspring.groovy.template.allow-request-override=false # Set whether HttpServletRequest attributes are allowed to override (hide) controller generated model attributes of the same name.\nspring.groovy.template.allow-session-override=false # Set whether HttpSession attributes are allowed to override (hide) controller generated model attributes of the same name.\nspring.groovy.template.cache= # Enable template caching.\nspring.groovy.template.charset=UTF-8 # Template encoding.\nspring.groovy.template.check-template-location=true # Check that the templates location exists.\nspring.groovy.template.configuration.*= # See GroovyMarkupConfigurer\nspring.groovy.template.content-type=test/html # Content-Type value.\nspring.groovy.template.enabled=true # Enable MVC view resolution for this technology.\nspring.groovy.template.expose-request-attributes=false # Set whether all request attributes should be added to the model prior to merging with the template.\nspring.groovy.template.expose-session-attributes=false # Set whether all HttpSession attributes should be added to the model prior to merging with the template.\nspring.groovy.template.expose-spring-macro-helpers=true # Set whether to expose a RequestContext for use by Spring's macro library, under the name \"springMacroRequestContext\".\nspring.groovy.template.prefix= # Prefix that gets prepended to view names when building a URL.\nspring.groovy.template.request-context-attribute= # Name of the RequestContext attribute for all views.\nspring.groovy.template.resource-loader-path=classpath:/templates/ # Template path.\nspring.groovy.template.suffix=.tpl # Suffix that gets appended to view names when building a URL.\nspring.groovy.template.view-names= # White list of view names that can be resolved.\n\n# SPRING HATEOAS (HateoasProperties)\nspring.hateoas.use-hal-as-default-json-media-type=true # Specify if application/hal+json responses should be sent to requests that accept application/json.\n\n# HTTP message conversion\nspring.http.converters.preferred-json-mapper=jackson # Preferred JSON mapper to use for HTTP message conversion. Set to \"gson\" to force the use of Gson when both it and Jackson are on the classpath.\n\n# HTTP encoding (HttpEncodingProperties)\nspring.http.encoding.charset=UTF-8 # Charset of HTTP requests and responses. Added to the \"Content-Type\" header if not set explicitly.\nspring.http.encoding.enabled=true # Enable http encoding support.\nspring.http.encoding.force= # Force the encoding to the configured charset on HTTP requests and responses.\nspring.http.encoding.force-request= # Force the encoding to the configured charset on HTTP requests. Defaults to true when \"force\" has not been specified.\nspring.http.encoding.force-response= # Force the encoding to the configured charset on HTTP responses.\n\n# MULTIPART (MultipartProperties)\nspring.http.multipart.enabled=true # Enable support of multi-part uploads.\nspring.http.multipart.file-size-threshold=0 # Threshold after which files will be written to disk. Values can use the suffixed \"MB\" or \"KB\" to indicate a Megabyte or Kilobyte size.\nspring.http.multipart.location= # Intermediate location of uploaded files.\nspring.http.multipart.max-file-size=1Mb # Max file size. Values can use the suffixed \"MB\" or \"KB\" to indicate a Megabyte or Kilobyte size.\nspring.http.multipart.max-request-size=10Mb # Max request size. Values can use the suffixed \"MB\" or \"KB\" to indicate a Megabyte or Kilobyte size.\n\n# JACKSON (JacksonProperties)\nspring.jackson.date-format= # Date format string or a fully-qualified date format class name. For instance `yyyy-MM-dd HH:mm:ss`.\nspring.jackson.default-property-inclusion= # Controls the inclusion of properties during serialization.\nspring.jackson.deserialization.*= # Jackson on/off features that affect the way Java objects are deserialized.\nspring.jackson.generator.*= # Jackson on/off features for generators.\nspring.jackson.joda-date-time-format= # Joda date time format string. If not configured, \"date-format\" will be used as a fallback if it is configured with a format string.\nspring.jackson.locale= # Locale used for formatting.\nspring.jackson.mapper.*= # Jackson general purpose on/off features.\nspring.jackson.parser.*= # Jackson on/off features for parsers.\nspring.jackson.property-naming-strategy= # One of the constants on Jackson's PropertyNamingStrategy. Can also be a fully-qualified class name of a PropertyNamingStrategy subclass.\nspring.jackson.serialization.*= # Jackson on/off features that affect the way Java objects are serialized.\nspring.jackson.serialization-inclusion= # Controls the inclusion of properties during serialization. Configured with one of the values in Jackson's JsonInclude.Include enumeration.\nspring.jackson.time-zone= # Time zone used when formatting dates. For instance `America/Los_Angeles`\n\n# JERSEY (JerseyProperties)\nspring.jersey.application-path= # Path that serves as the base URI for the application. Overrides the value of \"@ApplicationPath\" if specified.\nspring.jersey.filter.order=0 # Jersey filter chain order.\nspring.jersey.init.*= # Init parameters to pass to Jersey via the servlet or filter.\nspring.jersey.servlet.load-on-startup=-1 # Load on startup priority of the Jersey servlet.\nspring.jersey.type=servlet # Jersey integration type. Can be either \"servlet\" or \"filter\".\n\n# SPRING MOBILE DEVICE VIEWS (DeviceDelegatingViewResolverAutoConfiguration)\nspring.mobile.devicedelegatingviewresolver.enable-fallback=false # Enable support for fallback resolution.\nspring.mobile.devicedelegatingviewresolver.enabled=false # Enable device view resolver.\nspring.mobile.devicedelegatingviewresolver.mobile-prefix=mobile/ # Prefix that gets prepended to view names for mobile devices.\nspring.mobile.devicedelegatingviewresolver.mobile-suffix= # Suffix that gets appended to view names for mobile devices.\nspring.mobile.devicedelegatingviewresolver.normal-prefix= # Prefix that gets prepended to view names for normal devices.\nspring.mobile.devicedelegatingviewresolver.normal-suffix= # Suffix that gets appended to view names for normal devices.\nspring.mobile.devicedelegatingviewresolver.tablet-prefix=tablet/ # Prefix that gets prepended to view names for tablet devices.\nspring.mobile.devicedelegatingviewresolver.tablet-suffix= # Suffix that gets appended to view names for tablet devices.\n\n# SPRING MOBILE SITE PREFERENCE (SitePreferenceAutoConfiguration)\nspring.mobile.sitepreference.enabled=true # Enable SitePreferenceHandler.\n\n# MUSTACHE TEMPLATES (MustacheAutoConfiguration)\nspring.mustache.allow-request-override= # Set whether HttpServletRequest attributes are allowed to override (hide) controller generated model attributes of the same name.\nspring.mustache.allow-session-override= # Set whether HttpSession attributes are allowed to override (hide) controller generated model attributes of the same name.\nspring.mustache.cache= # Enable template caching.\nspring.mustache.charset= # Template encoding.\nspring.mustache.check-template-location= # Check that the templates location exists.\nspring.mustache.content-type= # Content-Type value.\nspring.mustache.enabled= # Enable MVC view resolution for this technology.\nspring.mustache.expose-request-attributes= # Set whether all request attributes should be added to the model prior to merging with the template.\nspring.mustache.expose-session-attributes= # Set whether all HttpSession attributes should be added to the model prior to merging with the template.\nspring.mustache.expose-spring-macro-helpers= # Set whether to expose a RequestContext for use by Spring's macro library, under the name \"springMacroRequestContext\".\nspring.mustache.prefix=classpath:/templates/ # Prefix to apply to template names.\nspring.mustache.request-context-attribute= # Name of the RequestContext attribute for all views.\nspring.mustache.suffix=.html # Suffix to apply to template names.\nspring.mustache.view-names= # White list of view names that can be resolved.\n\n# SPRING MVC (WebMvcProperties)\nspring.mvc.async.request-timeout= # Amount of time (in milliseconds) before asynchronous request handling times out.\nspring.mvc.date-format= # Date format to use. For instance `dd/MM/yyyy`.\nspring.mvc.dispatch-trace-request=false # Dispatch TRACE requests to the FrameworkServlet doService method.\nspring.mvc.dispatch-options-request=true # Dispatch OPTIONS requests to the FrameworkServlet doService method.\nspring.mvc.favicon.enabled=true # Enable resolution of favicon.ico.\nspring.mvc.ignore-default-model-on-redirect=true # If the content of the \"default\" model should be ignored during redirect scenarios.\nspring.mvc.locale= # Locale to use. By default, this locale is overridden by the \"Accept-Language\" header.\nspring.mvc.locale-resolver=accept-header # Define how the locale should be resolved.\nspring.mvc.log-resolved-exception=false # Enable warn logging of exceptions resolved by a \"HandlerExceptionResolver\".\nspring.mvc.media-types.*= # Maps file extensions to media types for content negotiation.\nspring.mvc.message-codes-resolver-format= # Formatting strategy for message codes. For instance `PREFIX_ERROR_CODE`.\nspring.mvc.servlet.load-on-startup=-1 # Load on startup priority of the Spring Web Services servlet.\nspring.mvc.static-path-pattern=/** # Path pattern used for static resources.\nspring.mvc.throw-exception-if-no-handler-found=false # If a \"NoHandlerFoundException\" should be thrown if no Handler was found to process a request.\nspring.mvc.view.prefix= # Spring MVC view prefix.\nspring.mvc.view.suffix= # Spring MVC view suffix.\n\n# SPRING RESOURCES HANDLING (ResourceProperties)\nspring.resources.add-mappings=true # Enable default resource handling.\nspring.resources.cache-period= # Cache period for the resources served by the resource handler, in seconds.\nspring.resources.chain.cache=true # Enable caching in the Resource chain.\nspring.resources.chain.enabled= # Enable the Spring Resource Handling chain. Disabled by default unless at least one strategy has been enabled.\nspring.resources.chain.gzipped=false # Enable resolution of already gzipped resources.\nspring.resources.chain.html-application-cache=false # Enable HTML5 application cache manifest rewriting.\nspring.resources.chain.strategy.content.enabled=false # Enable the content Version Strategy.\nspring.resources.chain.strategy.content.paths=/** # Comma-separated list of patterns to apply to the Version Strategy.\nspring.resources.chain.strategy.fixed.enabled=false # Enable the fixed Version Strategy.\nspring.resources.chain.strategy.fixed.paths=/** # Comma-separated list of patterns to apply to the Version Strategy.\nspring.resources.chain.strategy.fixed.version= # Version string to use for the Version Strategy.\nspring.resources.static-locations=classpath:/META-INF/resources/,classpath:/resources/,classpath:/static/,classpath:/public/ # Locations of static resources.\n\n# SPRING SESSION (SessionProperties)\nspring.session.hazelcast.map-name=spring:session:sessions # Name of the map used to store sessions.\nspring.session.jdbc.initializer.enabled=true # Create the required session tables on startup if necessary.\nspring.session.jdbc.schema=classpath:org/springframework/session/jdbc/schema-@@platform@@.sql # Path to the SQL file to use to initialize the database schema.\nspring.session.jdbc.table-name=SPRING_SESSION # Name of database table used to store sessions.\nspring.session.mongo.collection-name=sessions # Collection name used to store sessions.\nspring.session.redis.flush-mode= # Flush mode for the Redis sessions.\nspring.session.redis.namespace= # Namespace for keys used to store sessions.\nspring.session.store-type= # Session store type.\n\n# SPRING SOCIAL (SocialWebAutoConfiguration)\nspring.social.auto-connection-views=false # Enable the connection status view for supported providers.\n\n# SPRING SOCIAL FACEBOOK (FacebookAutoConfiguration)\nspring.social.facebook.app-id= # your application's Facebook App ID\nspring.social.facebook.app-secret= # your application's Facebook App Secret\n\n# SPRING SOCIAL LINKEDIN (LinkedInAutoConfiguration)\nspring.social.linkedin.app-id= # your application's LinkedIn App ID\nspring.social.linkedin.app-secret= # your application's LinkedIn App Secret\n\n# SPRING SOCIAL TWITTER (TwitterAutoConfiguration)\nspring.social.twitter.app-id= # your application's Twitter App ID\nspring.social.twitter.app-secret= # your application's Twitter App Secret\n\n# THYMELEAF (ThymeleafAutoConfiguration)\nspring.thymeleaf.cache=true # Enable template caching.\nspring.thymeleaf.check-template-location=true # Check that the templates location exists.\nspring.thymeleaf.content-type=text/html # Content-Type value.\nspring.thymeleaf.enabled=true # Enable MVC Thymeleaf view resolution.\nspring.thymeleaf.encoding=UTF-8 # Template encoding.\nspring.thymeleaf.excluded-view-names= # Comma-separated list of view names that should be excluded from resolution.\nspring.thymeleaf.mode=HTML5 # Template mode to be applied to templates. See also StandardTemplateModeHandlers.\nspring.thymeleaf.prefix=classpath:/templates/ # Prefix that gets prepended to view names when building a URL.\nspring.thymeleaf.suffix=.html # Suffix that gets appended to view names when building a URL.\nspring.thymeleaf.template-resolver-order= # Order of the template resolver in the chain.\nspring.thymeleaf.view-names= # Comma-separated list of view names that can be resolved.\n\n# VELOCITY TEMPLATES (VelocityAutoConfiguration)\nspring.velocity.allow-request-override=false # Set whether HttpServletRequest attributes are allowed to override (hide) controller generated model attributes of the same name.\nspring.velocity.allow-session-override=false # Set whether HttpSession attributes are allowed to override (hide) controller generated model attributes of the same name.\nspring.velocity.cache= # Enable template caching.\nspring.velocity.charset=UTF-8 # Template encoding.\nspring.velocity.check-template-location=true # Check that the templates location exists.\nspring.velocity.content-type=text/html # Content-Type value.\nspring.velocity.date-tool-attribute= # Name of the DateTool helper object to expose in the Velocity context of the view.\nspring.velocity.enabled=true # Enable MVC view resolution for this technology.\nspring.velocity.expose-request-attributes=false # Set whether all request attributes should be added to the model prior to merging with the template.\nspring.velocity.expose-session-attributes=false # Set whether all HttpSession attributes should be added to the model prior to merging with the template.\nspring.velocity.expose-spring-macro-helpers=true # Set whether to expose a RequestContext for use by Spring's macro library, under the name \"springMacroRequestContext\".\nspring.velocity.number-tool-attribute= # Name of the NumberTool helper object to expose in the Velocity context of the view.\nspring.velocity.prefer-file-system-access=true # Prefer file system access for template loading. File system access enables hot detection of template changes.\nspring.velocity.prefix= # Prefix that gets prepended to view names when building a URL.\nspring.velocity.properties.*= # Additional velocity properties.\nspring.velocity.request-context-attribute= # Name of the RequestContext attribute for all views.\nspring.velocity.resource-loader-path=classpath:/templates/ # Template path.\nspring.velocity.suffix=.vm # Suffix that gets appended to view names when building a URL.\nspring.velocity.toolbox-config-location= # Velocity Toolbox config location. For instance `/WEB-INF/toolbox.xml`\nspring.velocity.view-names= # White list of view names that can be resolved.\n\n# SPRING WEB SERVICES (WebServicesProperties)\nspring.webservices.path=/services # Path that serves as the base URI for the services.\nspring.webservices.servlet.init= # Servlet init parameters to pass to Spring Web Services.\nspring.webservices.servlet.load-on-startup=-1 # Load on startup priority of the Spring Web Services servlet.\n\n\n\n# ----------------------------------------\n# SECURITY PROPERTIES\n# ----------------------------------------\n# SECURITY (SecurityProperties)\nsecurity.basic.authorize-mode=role # Security authorize mode to apply.\nsecurity.basic.enabled=true # Enable basic authentication.\nsecurity.basic.path=/** # Comma-separated list of paths to secure.\nsecurity.basic.realm=Spring # HTTP basic realm name.\nsecurity.enable-csrf=false # Enable Cross Site Request Forgery support.\nsecurity.filter-order=0 # Security filter chain order.\nsecurity.filter-dispatcher-types=ASYNC, FORWARD, INCLUDE, REQUEST # Security filter chain dispatcher types.\nsecurity.headers.cache=true # Enable cache control HTTP headers.\nsecurity.headers.content-type=true # Enable \"X-Content-Type-Options\" header.\nsecurity.headers.frame=true # Enable \"X-Frame-Options\" header.\nsecurity.headers.hsts= # HTTP Strict Transport Security (HSTS) mode (none, domain, all).\nsecurity.headers.xss=true # Enable cross site scripting (XSS) protection.\nsecurity.ignored= # Comma-separated list of paths to exclude from the default secured paths.\nsecurity.require-ssl=false # Enable secure channel for all requests.\nsecurity.sessions=stateless # Session creation policy (always, never, if_required, stateless).\nsecurity.user.name=user # Default user name.\nsecurity.user.password= # Password for the default user name. A random password is logged on startup by default.\nsecurity.user.role=USER # Granted roles for the default user name.\n\n# SECURITY OAUTH2 CLIENT (OAuth2ClientProperties\nsecurity.oauth2.client.client-id= # OAuth2 client id.\nsecurity.oauth2.client.client-secret= # OAuth2 client secret. A random secret is generated by default\n\n# SECURITY OAUTH2 RESOURCES (ResourceServerProperties\nsecurity.oauth2.resource.id= # Identifier of the resource.\nsecurity.oauth2.resource.jwt.key-uri= # The URI of the JWT token. Can be set if the value is not available and the key is public.\nsecurity.oauth2.resource.jwt.key-value= # The verification key of the JWT token. Can either be a symmetric secret or PEM-encoded RSA public key.\nsecurity.oauth2.resource.prefer-token-info=true # Use the token info, can be set to false to use the user info.\nsecurity.oauth2.resource.service-id=resource #\nsecurity.oauth2.resource.token-info-uri= # URI of the token decoding endpoint.\nsecurity.oauth2.resource.token-type= # The token type to send when using the userInfoUri.\nsecurity.oauth2.resource.user-info-uri= # URI of the user endpoint.\n\n# SECURITY OAUTH2 SSO (OAuth2SsoProperties\nsecurity.oauth2.sso.filter-order= # Filter order to apply if not providing an explicit WebSecurityConfigurerAdapter\nsecurity.oauth2.sso.login-path=/login # Path to the login page, i.e. the one that triggers the redirect to the OAuth2 Authorization Server\n\n\n# ----------------------------------------\n# DATA PROPERTIES\n# ----------------------------------------\n\n# FLYWAY (FlywayProperties)\nflyway.baseline-description= #\nflyway.baseline-version=1 # version to start migration\nflyway.baseline-on-migrate= #\nflyway.check-location=false # Check that migration scripts location exists.\nflyway.clean-on-validation-error= #\nflyway.enabled=true # Enable flyway.\nflyway.encoding= #\nflyway.ignore-failed-future-migration= #\nflyway.init-sqls= # SQL statements to execute to initialize a connection immediately after obtaining it.\nflyway.locations=classpath:db/migration # locations of migrations scripts\nflyway.out-of-order= #\nflyway.password= # JDBC password if you want Flyway to create its own DataSource\nflyway.placeholder-prefix= #\nflyway.placeholder-replacement= #\nflyway.placeholder-suffix= #\nflyway.placeholders.*= #\nflyway.schemas= # schemas to update\nflyway.sql-migration-prefix=V #\nflyway.sql-migration-separator= #\nflyway.sql-migration-suffix=.sql #\nflyway.table= #\nflyway.url= # JDBC url of the database to migrate. If not set, the primary configured data source is used.\nflyway.user= # Login user of the database to migrate.\nflyway.validate-on-migrate= #\n\n# LIQUIBASE (LiquibaseProperties)\nliquibase.change-log=classpath:/db/changelog/db.changelog-master.yaml # Change log configuration path.\nliquibase.check-change-log-location=true # Check the change log location exists.\nliquibase.contexts= # Comma-separated list of runtime contexts to use.\nliquibase.default-schema= # Default database schema.\nliquibase.drop-first=false # Drop the database schema first.\nliquibase.enabled=true # Enable liquibase support.\nliquibase.labels= # Comma-separated list of runtime labels to use.\nliquibase.parameters.*= # Change log parameters.\nliquibase.password= # Login password of the database to migrate.\nliquibase.rollback-file= # File to which rollback SQL will be written when an update is performed.\nliquibase.url= # JDBC url of the database to migrate. If not set, the primary configured data source is used.\nliquibase.user= # Login user of the database to migrate.\n\n# COUCHBASE (CouchbaseProperties)\nspring.couchbase.bootstrap-hosts= # Couchbase nodes (host or IP address) to bootstrap from.\nspring.couchbase.bucket.name=default # Name of the bucket to connect to.\nspring.couchbase.bucket.password=  # Password of the bucket.\nspring.couchbase.env.endpoints.key-value=1 # Number of sockets per node against the Key/value service.\nspring.couchbase.env.endpoints.query=1 # Number of sockets per node against the Query (N1QL) service.\nspring.couchbase.env.endpoints.view=1 # Number of sockets per node against the view service.\nspring.couchbase.env.ssl.enabled= # Enable SSL support. Enabled automatically if a \"keyStore\" is provided unless specified otherwise.\nspring.couchbase.env.ssl.key-store= # Path to the JVM key store that holds the certificates.\nspring.couchbase.env.ssl.key-store-password= # Password used to access the key store.\nspring.couchbase.env.timeouts.connect=5000 # Bucket connections timeout in milliseconds.\nspring.couchbase.env.timeouts.key-value=2500 # Blocking operations performed on a specific key timeout in milliseconds.\nspring.couchbase.env.timeouts.query=7500 # N1QL query operations timeout in milliseconds.\nspring.couchbase.env.timeouts.socket-connect=1000 # Socket connect connections timeout in milliseconds.\nspring.couchbase.env.timeouts.view=7500 # Regular and geospatial view operations timeout in milliseconds.\n\n# DAO (PersistenceExceptionTranslationAutoConfiguration)\nspring.dao.exceptiontranslation.enabled=true # Enable the PersistenceExceptionTranslationPostProcessor.\n\n# CASSANDRA (CassandraProperties)\nspring.data.cassandra.cluster-name= # Name of the Cassandra cluster.\nspring.data.cassandra.compression= # Compression supported by the Cassandra binary protocol.\nspring.data.cassandra.connect-timeout-millis= # Socket option: connection time out.\nspring.data.cassandra.consistency-level= # Queries consistency level.\nspring.data.cassandra.contact-points=localhost # Comma-separated list of cluster node addresses.\nspring.data.cassandra.fetch-size= # Queries default fetch size.\nspring.data.cassandra.keyspace-name= # Keyspace name to use.\nspring.data.cassandra.load-balancing-policy= # Class name of the load balancing policy.\nspring.data.cassandra.port= # Port of the Cassandra server.\nspring.data.cassandra.password= # Login password of the server.\nspring.data.cassandra.read-timeout-millis= # Socket option: read time out.\nspring.data.cassandra.reconnection-policy= # Reconnection policy class.\nspring.data.cassandra.retry-policy= # Class name of the retry policy.\nspring.data.cassandra.serial-consistency-level= # Queries serial consistency level.\nspring.data.cassandra.schema-action= # Schema action to take at startup.\nspring.data.cassandra.ssl=false # Enable SSL support.\nspring.data.cassandra.username= # Login user of the server.\n\n# DATA COUCHBASE (CouchbaseDataProperties)\nspring.data.couchbase.auto-index=false # Automatically create views and indexes.\nspring.data.couchbase.consistency=read-your-own-writes # Consistency to apply by default on generated queries.\nspring.data.couchbase.repositories.enabled=true # Enable Couchbase repositories.\n\n# ELASTICSEARCH (ElasticsearchProperties)\nspring.data.elasticsearch.cluster-name=elasticsearch # Elasticsearch cluster name.\nspring.data.elasticsearch.cluster-nodes= # Comma-separated list of cluster node addresses. If not specified, starts a client node.\nspring.data.elasticsearch.properties.*= # Additional properties used to configure the client.\nspring.data.elasticsearch.repositories.enabled=true # Enable Elasticsearch repositories.\n\n# MONGODB (MongoProperties)\nspring.data.mongodb.authentication-database= # Authentication database name.\nspring.data.mongodb.database=test # Database name.\nspring.data.mongodb.field-naming-strategy= # Fully qualified name of the FieldNamingStrategy to use.\nspring.data.mongodb.grid-fs-database= # GridFS database name.\nspring.data.mongodb.host=localhost # Mongo server host.\nspring.data.mongodb.password= # Login password of the mongo server.\nspring.data.mongodb.port=27017 # Mongo server port.\nspring.data.mongodb.repositories.enabled=true # Enable Mongo repositories.\nspring.data.mongodb.uri=mongodb://localhost/test # Mongo database URI. When set, host and port are ignored.\nspring.data.mongodb.username= # Login user of the mongo server.\n\n# DATA REDIS\nspring.data.redis.repositories.enabled=true # Enable Redis repositories.\n\n# NEO4J (Neo4jProperties)\nspring.data.neo4j.compiler= # Compiler to use.\nspring.data.neo4j.embedded.enabled=true # Enable embedded mode if the embedded driver is available.\nspring.data.neo4j.password= # Login password of the server.\nspring.data.neo4j.repositories.enabled=true # Enable Neo4j repositories.\nspring.data.neo4j.session.scope=singleton # Scope (lifetime) of the session.\nspring.data.neo4j.uri= # URI used by the driver. Auto-detected by default.\nspring.data.neo4j.username= # Login user of the server.\n\n# DATA REST (RepositoryRestProperties)\nspring.data.rest.base-path= # Base path to be used by Spring Data REST to expose repository resources.\nspring.data.rest.default-page-size= # Default size of pages.\nspring.data.rest.enable-enum-translation= # Enable enum value translation via the Spring Data REST default resource bundle.\nspring.data.rest.limit-param-name= # Name of the URL query string parameter that indicates how many results to return at once.\nspring.data.rest.max-page-size= # Maximum size of pages.\nspring.data.rest.page-param-name= # Name of the URL query string parameter that indicates what page to return.\nspring.data.rest.return-body-on-create= # Return a response body after creating an entity.\nspring.data.rest.return-body-on-update= # Return a response body after updating an entity.\nspring.data.rest.sort-param-name= # Name of the URL query string parameter that indicates what direction to sort results.\n\n# SOLR (SolrProperties)\nspring.data.solr.host=http://127.0.0.1:8983/solr # Solr host. Ignored if \"zk-host\" is set.\nspring.data.solr.repositories.enabled=true # Enable Solr repositories.\nspring.data.solr.zk-host= # ZooKeeper host address in the form HOST:PORT.\n\n# DATASOURCE (DataSourceAutoConfiguration & DataSourceProperties)\nspring.datasource.continue-on-error=false # Do not stop if an error occurs while initializing the database.\nspring.datasource.data= # Data (DML) script resource reference.\nspring.datasource.data-username= # User of the database to execute DML scripts (if different).\nspring.datasource.data-password= # Password of the database to execute DML scripts (if different).\nspring.datasource.dbcp.*= # Commons DBCP specific settings\nspring.datasource.dbcp2.*= # Commons DBCP2 specific settings\nspring.datasource.driver-class-name= # Fully qualified name of the JDBC driver. Auto-detected based on the URL by default.\nspring.datasource.hikari.*= # Hikari specific settings\nspring.datasource.initialize=true # Populate the database using 'data.sql'.\nspring.datasource.jmx-enabled=false # Enable JMX support (if provided by the underlying pool).\nspring.datasource.jndi-name= # JNDI location of the datasource. Class, url, username & password are ignored when set.\nspring.datasource.name=testdb # Name of the datasource.\nspring.datasource.password= # Login password of the database.\nspring.datasource.platform=all # Platform to use in the schema resource (schema-${platform}.sql).\nspring.datasource.schema= # Schema (DDL) script resource reference.\nspring.datasource.schema-username= # User of the database to execute DDL scripts (if different).\nspring.datasource.schema-password= # Password of the database to execute DDL scripts (if different).\nspring.datasource.separator=; # Statement separator in SQL initialization scripts.\nspring.datasource.sql-script-encoding= # SQL scripts encoding.\nspring.datasource.tomcat.*= # Tomcat datasource specific settings\nspring.datasource.type= # Fully qualified name of the connection pool implementation to use. By default, it is auto-detected from the classpath.\nspring.datasource.url= # JDBC url of the database.\nspring.datasource.username=\n\n# JEST (Elasticsearch HTTP client) (JestProperties)\nspring.elasticsearch.jest.connection-timeout=3000 # Connection timeout in milliseconds.\nspring.elasticsearch.jest.password= # Login password.\nspring.elasticsearch.jest.proxy.host= # Proxy host the HTTP client should use.\nspring.elasticsearch.jest.proxy.port= # Proxy port the HTTP client should use.\nspring.elasticsearch.jest.read-timeout=3000 # Read timeout in milliseconds.\nspring.elasticsearch.jest.uris=http://localhost:9200 # Comma-separated list of the Elasticsearch instances to use.\nspring.elasticsearch.jest.username= # Login user.\n\n# H2 Web Console (H2ConsoleProperties)\nspring.h2.console.enabled=false # Enable the console.\nspring.h2.console.path=/h2-console # Path at which the console will be available.\nspring.h2.console.settings.trace=false # Enable trace output.\nspring.h2.console.settings.web-allow-others=false # Enable remote access.\n\n# JOOQ (JooqAutoConfiguration)\nspring.jooq.sql-dialect= # SQLDialect JOOQ used when communicating with the configured datasource. For instance `POSTGRES`\n\n# JPA (JpaBaseConfiguration, HibernateJpaAutoConfiguration)\nspring.data.jpa.repositories.enabled=true # Enable JPA repositories.\nspring.jpa.database= # Target database to operate on, auto-detected by default. Can be alternatively set using the \"databasePlatform\" property.\nspring.jpa.database-platform= # Name of the target database to operate on, auto-detected by default. Can be alternatively set using the \"Database\" enum.\nspring.jpa.generate-ddl=false # Initialize the schema on startup.\nspring.jpa.hibernate.ddl-auto= # DDL mode. This is actually a shortcut for the \"hibernate.hbm2ddl.auto\" property. Default to \"create-drop\" when using an embedded database, \"none\" otherwise.\nspring.jpa.hibernate.naming.implicit-strategy= # Hibernate 5 implicit naming strategy fully qualified name.\nspring.jpa.hibernate.naming.physical-strategy= # Hibernate 5 physical naming strategy fully qualified name.\nspring.jpa.hibernate.naming.strategy= # Hibernate 4 naming strategy fully qualified name. Not supported with Hibernate 5.\nspring.jpa.hibernate.use-new-id-generator-mappings= # Use Hibernate's newer IdentifierGenerator for AUTO, TABLE and SEQUENCE.\nspring.jpa.open-in-view=true # Register OpenEntityManagerInViewInterceptor. Binds a JPA EntityManager to the thread for the entire processing of the request.\nspring.jpa.properties.*= # Additional native properties to set on the JPA provider.\nspring.jpa.show-sql=false # Enable logging of SQL statements.\n\n# JTA (JtaAutoConfiguration)\nspring.jta.enabled=true # Enable JTA support.\nspring.jta.log-dir= # Transaction logs directory.\nspring.jta.transaction-manager-id= # Transaction manager unique identifier.\n\n# ATOMIKOS (AtomikosProperties)\nspring.jta.atomikos.connectionfactory.borrow-connection-timeout=30 # Timeout, in seconds, for borrowing connections from the pool.\nspring.jta.atomikos.connectionfactory.ignore-session-transacted-flag=true # Whether or not to ignore the transacted flag when creating session.\nspring.jta.atomikos.connectionfactory.local-transaction-mode=false # Whether or not local transactions are desired.\nspring.jta.atomikos.connectionfactory.maintenance-interval=60 # The time, in seconds, between runs of the pool's maintenance thread.\nspring.jta.atomikos.connectionfactory.max-idle-time=60 # The time, in seconds, after which connections are cleaned up from the pool.\nspring.jta.atomikos.connectionfactory.max-lifetime=0 # The time, in seconds, that a connection can be pooled for before being destroyed. 0 denotes no limit.\nspring.jta.atomikos.connectionfactory.max-pool-size=1 # The maximum size of the pool.\nspring.jta.atomikos.connectionfactory.min-pool-size=1 # The minimum size of the pool.\nspring.jta.atomikos.connectionfactory.reap-timeout=0 # The reap timeout, in seconds, for borrowed connections. 0 denotes no limit.\nspring.jta.atomikos.connectionfactory.unique-resource-name=jmsConnectionFactory # The unique name used to identify the resource during recovery.\nspring.jta.atomikos.datasource.borrow-connection-timeout=30 # Timeout, in seconds, for borrowing connections from the pool.\nspring.jta.atomikos.datasource.default-isolation-level= # Default isolation level of connections provided by the pool.\nspring.jta.atomikos.datasource.login-timeout= # Timeout, in seconds, for establishing a database connection.\nspring.jta.atomikos.datasource.maintenance-interval=60 # The time, in seconds, between runs of the pool's maintenance thread.\nspring.jta.atomikos.datasource.max-idle-time=60 # The time, in seconds, after which connections are cleaned up from the pool.\nspring.jta.atomikos.datasource.max-lifetime=0 # The time, in seconds, that a connection can be pooled for before being destroyed. 0 denotes no limit.\nspring.jta.atomikos.datasource.max-pool-size=1 # The maximum size of the pool.\nspring.jta.atomikos.datasource.min-pool-size=1 # The minimum size of the pool.\nspring.jta.atomikos.datasource.reap-timeout=0 # The reap timeout, in seconds, for borrowed connections. 0 denotes no limit.\nspring.jta.atomikos.datasource.test-query= # SQL query or statement used to validate a connection before returning it.\nspring.jta.atomikos.datasource.unique-resource-name=dataSource # The unique name used to identify the resource during recovery.\nspring.jta.atomikos.properties.checkpoint-interval=500 # Interval between checkpoints.\nspring.jta.atomikos.properties.console-file-count=1 # Number of debug logs files that can be created.\nspring.jta.atomikos.properties.console-file-limit=-1 # How many bytes can be stored at most in debug logs files.\nspring.jta.atomikos.properties.console-file-name=tm.out # Debug logs file name.\nspring.jta.atomikos.properties.console-log-level= # Console log level.\nspring.jta.atomikos.properties.default-jta-timeout=10000 # Default timeout for JTA transactions.\nspring.jta.atomikos.properties.enable-logging=true # Enable disk logging.\nspring.jta.atomikos.properties.force-shutdown-on-vm-exit=false # Specify if a VM shutdown should trigger forced shutdown of the transaction core.\nspring.jta.atomikos.properties.log-base-dir= # Directory in which the log files should be stored.\nspring.jta.atomikos.properties.log-base-name=tmlog # Transactions log file base name.\nspring.jta.atomikos.properties.max-actives=50 # Maximum number of active transactions.\nspring.jta.atomikos.properties.max-timeout=300000 # Maximum timeout (in milliseconds) that can be allowed for transactions.\nspring.jta.atomikos.properties.output-dir= # Directory in which to store the debug log files.\nspring.jta.atomikos.properties.serial-jta-transactions=true # Specify if sub-transactions should be joined when possible.\nspring.jta.atomikos.properties.service= # Transaction manager implementation that should be started.\nspring.jta.atomikos.properties.threaded-two-phase-commit=true # Use different (and concurrent) threads for two-phase commit on the participating resources.\nspring.jta.atomikos.properties.transaction-manager-unique-name= # Transaction manager's unique name.\n\n# BITRONIX\nspring.jta.bitronix.connectionfactory.acquire-increment=1 # Number of connections to create when growing the pool.\nspring.jta.bitronix.connectionfactory.acquisition-interval=1 # Time, in seconds, to wait before trying to acquire a connection again after an invalid connection was acquired.\nspring.jta.bitronix.connectionfactory.acquisition-timeout=30 # Timeout, in seconds, for acquiring connections from the pool.\nspring.jta.bitronix.connectionfactory.allow-local-transactions=true # Whether or not the transaction manager should allow mixing XA and non-XA transactions.\nspring.jta.bitronix.connectionfactory.apply-transaction-timeout=false # Whether or not the transaction timeout should be set on the XAResource when it is enlisted.\nspring.jta.bitronix.connectionfactory.automatic-enlisting-enabled=true # Whether or not resources should be enlisted and delisted automatically.\nspring.jta.bitronix.connectionfactory.cache-producers-consumers=true # Whether or not produces and consumers should be cached.\nspring.jta.bitronix.connectionfactory.defer-connection-release=true # Whether or not the provider can run many transactions on the same connection and supports transaction interleaving.\nspring.jta.bitronix.connectionfactory.ignore-recovery-failures=false # Whether or not recovery failures should be ignored.\nspring.jta.bitronix.connectionfactory.max-idle-time=60 # The time, in seconds, after which connections are cleaned up from the pool.\nspring.jta.bitronix.connectionfactory.max-pool-size=10 # The maximum size of the pool. 0 denotes no limit.\nspring.jta.bitronix.connectionfactory.min-pool-size=0 # The minimum size of the pool.\nspring.jta.bitronix.connectionfactory.password= # The password to use to connect to the JMS provider.\nspring.jta.bitronix.connectionfactory.share-transaction-connections=false #  Whether or not connections in the ACCESSIBLE state can be shared within the context of a transaction.\nspring.jta.bitronix.connectionfactory.test-connections=true # Whether or not connections should be tested when acquired from the pool.\nspring.jta.bitronix.connectionfactory.two-pc-ordering-position=1 # The position that this resource should take during two-phase commit (always first is Integer.MIN_VALUE, always last is Integer.MAX_VALUE).\nspring.jta.bitronix.connectionfactory.unique-name=jmsConnectionFactory # The unique name used to identify the resource during recovery.\nspring.jta.bitronix.connectionfactory.use-tm-join=true Whether or not TMJOIN should be used when starting XAResources.\nspring.jta.bitronix.connectionfactory.user= # The user to use to connect to the JMS provider.\nspring.jta.bitronix.datasource.acquire-increment=1 # Number of connections to create when growing the pool.\nspring.jta.bitronix.datasource.acquisition-interval=1 # Time, in seconds, to wait before trying to acquire a connection again after an invalid connection was acquired.\nspring.jta.bitronix.datasource.acquisition-timeout=30 # Timeout, in seconds, for acquiring connections from the pool.\nspring.jta.bitronix.datasource.allow-local-transactions=true # Whether or not the transaction manager should allow mixing XA and non-XA transactions.\nspring.jta.bitronix.datasource.apply-transaction-timeout=false # Whether or not the transaction timeout should be set on the XAResource when it is enlisted.\nspring.jta.bitronix.datasource.automatic-enlisting-enabled=true # Whether or not resources should be enlisted and delisted automatically.\nspring.jta.bitronix.datasource.cursor-holdability= # The default cursor holdability for connections.\nspring.jta.bitronix.datasource.defer-connection-release=true # Whether or not the database can run many transactions on the same connection and supports transaction interleaving.\nspring.jta.bitronix.datasource.enable-jdbc4-connection-test= # Whether or not Connection.isValid() is called when acquiring a connection from the pool.\nspring.jta.bitronix.datasource.ignore-recovery-failures=false # Whether or not recovery failures should be ignored.\nspring.jta.bitronix.datasource.isolation-level= # The default isolation level for connections.\nspring.jta.bitronix.datasource.local-auto-commit= # The default auto-commit mode for local transactions.\nspring.jta.bitronix.datasource.login-timeout= # Timeout, in seconds, for establishing a database connection.\nspring.jta.bitronix.datasource.max-idle-time=60 # The time, in seconds, after which connections are cleaned up from the pool.\nspring.jta.bitronix.datasource.max-pool-size=10 # The maximum size of the pool. 0 denotes no limit.\nspring.jta.bitronix.datasource.min-pool-size=0 # The minimum size of the pool.\nspring.jta.bitronix.datasource.prepared-statement-cache-size=0 # The target size of the prepared statement cache. 0 disables the cache.\nspring.jta.bitronix.datasource.share-transaction-connections=false #  Whether or not connections in the ACCESSIBLE state can be shared within the context of a transaction.\nspring.jta.bitronix.datasource.test-query= # SQL query or statement used to validate a connection before returning it.\nspring.jta.bitronix.datasource.two-pc-ordering-position=1 # The position that this resource should take during two-phase commit (always first is Integer.MIN_VALUE, always last is Integer.MAX_VALUE).\nspring.jta.bitronix.datasource.unique-name=dataSource # The unique name used to identify the resource during recovery.\nspring.jta.bitronix.datasource.use-tm-join=true Whether or not TMJOIN should be used when starting XAResources.\nspring.jta.bitronix.properties.allow-multiple-lrc=false # Allow multiple LRC resources to be enlisted into the same transaction.\nspring.jta.bitronix.properties.asynchronous2-pc=false # Enable asynchronously execution of two phase commit.\nspring.jta.bitronix.properties.background-recovery-interval-seconds=60 # Interval in seconds at which to run the recovery process in the background.\nspring.jta.bitronix.properties.current-node-only-recovery=true # Recover only the current node.\nspring.jta.bitronix.properties.debug-zero-resource-transaction=false # Log the creation and commit call stacks of transactions executed without a single enlisted resource.\nspring.jta.bitronix.properties.default-transaction-timeout=60 # Default transaction timeout in seconds.\nspring.jta.bitronix.properties.disable-jmx=false # Enable JMX support.\nspring.jta.bitronix.properties.exception-analyzer= # Set the fully qualified name of the exception analyzer implementation to use.\nspring.jta.bitronix.properties.filter-log-status=false # Enable filtering of logs so that only mandatory logs are written.\nspring.jta.bitronix.properties.force-batching-enabled=true #  Set if disk forces are batched.\nspring.jta.bitronix.properties.forced-write-enabled=true # Set if logs are forced to disk.\nspring.jta.bitronix.properties.graceful-shutdown-interval=60 # Maximum amount of seconds the TM will wait for transactions to get done before aborting them at shutdown time.\nspring.jta.bitronix.properties.jndi-transaction-synchronization-registry-name= # JNDI name of the TransactionSynchronizationRegistry.\nspring.jta.bitronix.properties.jndi-user-transaction-name= # JNDI name of the UserTransaction.\nspring.jta.bitronix.properties.journal=disk # Name of the journal. Can be 'disk', 'null' or a class name.\nspring.jta.bitronix.properties.log-part1-filename=btm1.tlog # Name of the first fragment of the journal.\nspring.jta.bitronix.properties.log-part2-filename=btm2.tlog # Name of the second fragment of the journal.\nspring.jta.bitronix.properties.max-log-size-in-mb=2 # Maximum size in megabytes of the journal fragments.\nspring.jta.bitronix.properties.resource-configuration-filename= # ResourceLoader configuration file name.\nspring.jta.bitronix.properties.server-id= # ASCII ID that must uniquely identify this TM instance. Default to the machine's IP address.\nspring.jta.bitronix.properties.skip-corrupted-logs=false # Skip corrupted transactions log entries.\nspring.jta.bitronix.properties.warn-about-zero-resource-transaction=true # Log a warning for transactions executed without a single enlisted resource.\n\n# NARAYANA (NarayanaProperties)\nspring.jta.narayana.default-timeout=60 # Transaction timeout in seconds.\nspring.jta.narayana.expiry-scanners=com.arjuna.ats.internal.arjuna.recovery.ExpiredTransactionStatusManagerScanner # Comma-separated list of expiry scanners.\nspring.jta.narayana.log-dir= # Transaction object store directory.\nspring.jta.narayana.one-phase-commit=true # Enable one phase commit optimisation.\nspring.jta.narayana.periodic-recovery-period=120 # Interval in which periodic recovery scans are performed in seconds.\nspring.jta.narayana.recovery-backoff-period=10 # Back off period between first and second phases of the recovery scan in seconds.\nspring.jta.narayana.recovery-db-pass= # Database password to be used by recovery manager.\nspring.jta.narayana.recovery-db-user= # Database username to be used by recovery manager.\nspring.jta.narayana.recovery-jms-pass= # JMS password to be used by recovery manager.\nspring.jta.narayana.recovery-jms-user= # JMS username to be used by recovery manager.\nspring.jta.narayana.recovery-modules= # Comma-separated list of recovery modules.\nspring.jta.narayana.transaction-manager-id=1 # Unique transaction manager id.\nspring.jta.narayana.xa-resource-orphan-filters= # Comma-separated list of orphan filters.\n\n# EMBEDDED MONGODB (EmbeddedMongoProperties)\nspring.mongodb.embedded.features=SYNC_DELAY # Comma-separated list of features to enable.\nspring.mongodb.embedded.storage.databaseDir= # Directory used for data storage.\nspring.mongodb.embedded.storage.oplogSize= # Maximum size of the oplog in megabytes.\nspring.mongodb.embedded.storage.replSetName= # Name of the replica set.\nspring.mongodb.embedded.version=2.6.10 # Version of Mongo to use.\n\n# REDIS (RedisProperties)\nspring.redis.cluster.max-redirects= # Maximum number of redirects to follow when executing commands across the cluster.\nspring.redis.cluster.nodes= # Comma-separated list of \"host:port\" pairs to bootstrap from.\nspring.redis.database=0 # Database index used by the connection factory.\nspring.redis.host=localhost # Redis server host.\nspring.redis.password= # Login password of the redis server.\nspring.redis.pool.max-active=8 # Max number of connections that can be allocated by the pool at a given time. Use a negative value for no limit.\nspring.redis.pool.max-idle=8 # Max number of \"idle\" connections in the pool. Use a negative value to indicate an unlimited number of idle connections.\nspring.redis.pool.max-wait=-1 # Maximum amount of time (in milliseconds) a connection allocation should block before throwing an exception when the pool is exhausted. Use a negative value to block indefinitely.\nspring.redis.pool.min-idle=0 # Target for the minimum number of idle connections to maintain in the pool. This setting only has an effect if it is positive.\nspring.redis.port=6379 # Redis server port.\nspring.redis.sentinel.master= # Name of Redis server.\nspring.redis.sentinel.nodes= # Comma-separated list of host:port pairs.\nspring.redis.timeout=0 # Connection timeout in milliseconds.\n\n\n# ----------------------------------------\n# INTEGRATION PROPERTIES\n# ----------------------------------------\n\n# ACTIVEMQ (ActiveMQProperties)\nspring.activemq.broker-url= # URL of the ActiveMQ broker. Auto-generated by default. For instance `tcp://localhost:61616`\nspring.activemq.in-memory=true # Specify if the default broker URL should be in memory. Ignored if an explicit broker has been specified.\nspring.activemq.password= # Login password of the broker.\nspring.activemq.user= # Login user of the broker.\nspring.activemq.packages.trust-all=false # Trust all packages.\nspring.activemq.packages.trusted= # Comma-separated list of specific packages to trust (when not trusting all packages).\nspring.activemq.pool.configuration.*= # See PooledConnectionFactory.\nspring.activemq.pool.enabled=false # Whether a PooledConnectionFactory should be created instead of a regular ConnectionFactory.\nspring.activemq.pool.expiry-timeout=0 # Connection expiration timeout in milliseconds.\nspring.activemq.pool.idle-timeout=30000 # Connection idle timeout in milliseconds.\nspring.activemq.pool.max-connections=1 # Maximum number of pooled connections.\n\n# ARTEMIS (ArtemisProperties)\nspring.artemis.embedded.cluster-password= # Cluster password. Randomly generated on startup by default.\nspring.artemis.embedded.data-directory= # Journal file directory. Not necessary if persistence is turned off.\nspring.artemis.embedded.enabled=true # Enable embedded mode if the Artemis server APIs are available.\nspring.artemis.embedded.persistent=false # Enable persistent store.\nspring.artemis.embedded.queues= # Comma-separated list of queues to create on startup.\nspring.artemis.embedded.server-id= # Server id. By default, an auto-incremented counter is used.\nspring.artemis.embedded.topics= # Comma-separated list of topics to create on startup.\nspring.artemis.host=localhost # Artemis broker host.\nspring.artemis.mode= # Artemis deployment mode, auto-detected by default. Can be explicitly set to \"native\" or \"embedded\".\nspring.artemis.password= # Login password of the broker.\nspring.artemis.port=61616 # Artemis broker port.\nspring.artemis.user= # Login user of the broker.\n\n# SPRING BATCH (BatchProperties)\nspring.batch.initializer.enabled=true # Create the required batch tables on startup if necessary.\nspring.batch.job.enabled=true # Execute all Spring Batch jobs in the context on startup.\nspring.batch.job.names= # Comma-separated list of job names to execute on startup (For instance `job1,job2`). By default, all Jobs found in the context are executed.\nspring.batch.schema=classpath:org/springframework/batch/core/schema-@@platform@@.sql # Path to the SQL file to use to initialize the database schema.\nspring.batch.table-prefix= # Table prefix for all the batch meta-data tables.\n\n# HORNETQ (HornetQProperties)\nspring.hornetq.embedded.cluster-password= # Cluster password. Randomly generated on startup by default.\nspring.hornetq.embedded.data-directory= # Journal file directory. Not necessary if persistence is turned off.\nspring.hornetq.embedded.enabled=true # Enable embedded mode if the HornetQ server APIs are available.\nspring.hornetq.embedded.persistent=false # Enable persistent store.\nspring.hornetq.embedded.queues= # Comma-separated list of queues to create on startup.\nspring.hornetq.embedded.server-id= # Server id. By default, an auto-incremented counter is used.\nspring.hornetq.embedded.topics= # Comma-separated list of topics to create on startup.\nspring.hornetq.host=localhost # HornetQ broker host.\nspring.hornetq.mode= # HornetQ deployment mode, auto-detected by default. Can be explicitly set to \"native\" or \"embedded\".\nspring.hornetq.password= # Login password of the broker.\nspring.hornetq.port=5445 # HornetQ broker port.\nspring.hornetq.user= # Login user of the broker.\n\n# JMS (JmsProperties)\nspring.jms.jndi-name= # Connection factory JNDI name. When set, takes precedence to others connection factory auto-configurations.\nspring.jms.listener.acknowledge-mode= # Acknowledge mode of the container. By default, the listener is transacted with automatic acknowledgment.\nspring.jms.listener.auto-startup=true # Start the container automatically on startup.\nspring.jms.listener.concurrency= # Minimum number of concurrent consumers.\nspring.jms.listener.max-concurrency= # Maximum number of concurrent consumers.\nspring.jms.pub-sub-domain=false # Specify if the default destination type is topic.\n\n# RABBIT (RabbitProperties)\nspring.rabbitmq.addresses= # Comma-separated list of addresses to which the client should connect.\nspring.rabbitmq.cache.channel.checkout-timeout= # Number of milliseconds to wait to obtain a channel if the cache size has been reached.\nspring.rabbitmq.cache.channel.size= # Number of channels to retain in the cache.\nspring.rabbitmq.cache.connection.mode=CHANNEL # Connection factory cache mode.\nspring.rabbitmq.cache.connection.size= # Number of connections to cache.\nspring.rabbitmq.connection-timeout= # Connection timeout, in milliseconds; zero for infinite.\nspring.rabbitmq.dynamic=true # Create an AmqpAdmin bean.\nspring.rabbitmq.host=localhost # RabbitMQ host.\nspring.rabbitmq.listener.acknowledge-mode= # Acknowledge mode of container.\nspring.rabbitmq.listener.auto-startup=true # Start the container automatically on startup.\nspring.rabbitmq.listener.concurrency= # Minimum number of consumers.\nspring.rabbitmq.listener.default-requeue-rejected= # Whether or not to requeue delivery failures; default `true`.\nspring.rabbitmq.listener.max-concurrency= # Maximum number of consumers.\nspring.rabbitmq.listener.prefetch= # Number of messages to be handled in a single request. It should be greater than or equal to the transaction size (if used).\nspring.rabbitmq.listener.retry.enabled=false # Whether or not publishing retries are enabled.\nspring.rabbitmq.listener.retry.initial-interval=1000 # Interval between the first and second attempt to deliver a message.\nspring.rabbitmq.listener.retry.max-attempts=3 # Maximum number of attempts to deliver a message.\nspring.rabbitmq.listener.retry.max-interval=10000 # Maximum number of attempts to deliver a message.\nspring.rabbitmq.listener.retry.multiplier=1.0 # A multiplier to apply to the previous delivery retry interval.\nspring.rabbitmq.listener.retry.stateless=true # Whether or not retry is stateless or stateful.\nspring.rabbitmq.listener.transaction-size= # Number of messages to be processed in a transaction. For best results it should be less than or equal to the prefetch count.\nspring.rabbitmq.password= # Login to authenticate against the broker.\nspring.rabbitmq.port=5672 # RabbitMQ port.\nspring.rabbitmq.publisher-confirms=false # Enable publisher confirms.\nspring.rabbitmq.publisher-returns=false # Enable publisher returns.\nspring.rabbitmq.requested-heartbeat= # Requested heartbeat timeout, in seconds; zero for none.\nspring.rabbitmq.ssl.enabled=false # Enable SSL support.\nspring.rabbitmq.ssl.key-store= # Path to the key store that holds the SSL certificate.\nspring.rabbitmq.ssl.key-store-password= # Password used to access the key store.\nspring.rabbitmq.ssl.trust-store= # Trust store that holds SSL certificates.\nspring.rabbitmq.ssl.trust-store-password= # Password used to access the trust store.\nspring.rabbitmq.ssl.algorithm= # SSL algorithm to use. By default configure by the rabbit client library.\nspring.rabbitmq.template.mandatory=false # Enable mandatory messages.\nspring.rabbitmq.template.receive-timeout=0 # Timeout for `receive()` methods.\nspring.rabbitmq.template.reply-timeout=5000 # Timeout for `sendAndReceive()` methods.\nspring.rabbitmq.template.retry.enabled=false # Set to true to enable retries in the `RabbitTemplate`.\nspring.rabbitmq.template.retry.initial-interval=1000 # Interval between the first and second attempt to publish a message.\nspring.rabbitmq.template.retry.max-attempts=3 # Maximum number of attempts to publish a message.\nspring.rabbitmq.template.retry.max-interval=10000 # Maximum number of attempts to publish a message.\nspring.rabbitmq.template.retry.multiplier=1.0 # A multiplier to apply to the previous publishing retry interval.\nspring.rabbitmq.username= # Login user to authenticate to the broker.\nspring.rabbitmq.virtual-host= # Virtual host to use when connecting to the broker.\n\n\n# ----------------------------------------\n# ACTUATOR PROPERTIES\n# ----------------------------------------\n\n# ENDPOINTS (AbstractEndpoint subclasses)\nendpoints.enabled=true # Enable endpoints.\nendpoints.sensitive= # Default endpoint sensitive setting.\nendpoints.actuator.enabled=true # Enable the endpoint.\nendpoints.actuator.path= # Endpoint URL path.\nendpoints.actuator.sensitive=false # Enable security on the endpoint.\nendpoints.autoconfig.enabled= # Enable the endpoint.\nendpoints.autoconfig.id= # Endpoint identifier.\nendpoints.autoconfig.path= # Endpoint path.\nendpoints.autoconfig.sensitive= # Mark if the endpoint exposes sensitive information.\nendpoints.beans.enabled= # Enable the endpoint.\nendpoints.beans.id= # Endpoint identifier.\nendpoints.beans.path= # Endpoint path.\nendpoints.beans.sensitive= # Mark if the endpoint exposes sensitive information.\nendpoints.configprops.enabled= # Enable the endpoint.\nendpoints.configprops.id= # Endpoint identifier.\nendpoints.configprops.keys-to-sanitize=password,secret,key,token,.*credentials.*,vcap_services # Keys that should be sanitized. Keys can be simple strings that the property ends with or regex expressions.\nendpoints.configprops.path= # Endpoint path.\nendpoints.configprops.sensitive= # Mark if the endpoint exposes sensitive information.\nendpoints.docs.curies.enabled=false # Enable the curie generation.\nendpoints.docs.enabled=true # Enable actuator docs endpoint.\nendpoints.docs.path=/docs #\nendpoints.docs.sensitive=false #\nendpoints.dump.enabled= # Enable the endpoint.\nendpoints.dump.id= # Endpoint identifier.\nendpoints.dump.path= # Endpoint path.\nendpoints.dump.sensitive= # Mark if the endpoint exposes sensitive information.\nendpoints.env.enabled= # Enable the endpoint.\nendpoints.env.id= # Endpoint identifier.\nendpoints.env.keys-to-sanitize=password,secret,key,token,.*credentials.*,vcap_services # Keys that should be sanitized. Keys can be simple strings that the property ends with or regex expressions.\nendpoints.env.path= # Endpoint path.\nendpoints.env.sensitive= # Mark if the endpoint exposes sensitive information.\nendpoints.flyway.enabled= # Enable the endpoint.\nendpoints.flyway.id= # Endpoint identifier.\nendpoints.flyway.sensitive= # Mark if the endpoint exposes sensitive information.\nendpoints.health.enabled= # Enable the endpoint.\nendpoints.health.id= # Endpoint identifier.\nendpoints.health.mapping.*= # Mapping of health statuses to HttpStatus codes. By default, registered health statuses map to sensible defaults (i.e. UP maps to 200).\nendpoints.health.path= # Endpoint path.\nendpoints.health.sensitive= # Mark if the endpoint exposes sensitive information.\nendpoints.health.time-to-live=1000 # Time to live for cached result, in milliseconds.\nendpoints.heapdump.enabled= # Enable the endpoint.\nendpoints.heapdump.path= # Endpoint path.\nendpoints.heapdump.sensitive= # Mark if the endpoint exposes sensitive information.\nendpoints.info.enabled= # Enable the endpoint.\nendpoints.info.id= # Endpoint identifier.\nendpoints.info.path= # Endpoint path.\nendpoints.info.sensitive= # Mark if the endpoint exposes sensitive information.\nendpoints.jolokia.enabled=true # Enable Jolokia endpoint.\nendpoints.jolokia.path=/jolokia # Endpoint URL path.\nendpoints.jolokia.sensitive=true # Enable security on the endpoint.\nendpoints.liquibase.enabled= # Enable the endpoint.\nendpoints.liquibase.id= # Endpoint identifier.\nendpoints.liquibase.sensitive= # Mark if the endpoint exposes sensitive information.\nendpoints.logfile.enabled=true # Enable the endpoint.\nendpoints.logfile.external-file= # External Logfile to be accessed.\nendpoints.logfile.path=/logfile # Endpoint URL path.\nendpoints.logfile.sensitive=true # Enable security on the endpoint.\nendpoints.mappings.enabled= # Enable the endpoint.\nendpoints.mappings.id= # Endpoint identifier.\nendpoints.mappings.path= # Endpoint path.\nendpoints.mappings.sensitive= # Mark if the endpoint exposes sensitive information.\nendpoints.metrics.enabled= # Enable the endpoint.\nendpoints.metrics.filter.enabled=true # Enable the metrics servlet filter.\nendpoints.metrics.filter.gauge-submissions=merged # Http filter gauge submissions (merged, per-http-method)\nendpoints.metrics.filter.counter-submissions=merged # Http filter counter submissions (merged, per-http-method)\nendpoints.metrics.id= # Endpoint identifier.\nendpoints.metrics.path= # Endpoint path.\nendpoints.metrics.sensitive= # Mark if the endpoint exposes sensitive information.\nendpoints.shutdown.enabled= # Enable the endpoint.\nendpoints.shutdown.id= # Endpoint identifier.\nendpoints.shutdown.path= # Endpoint path.\nendpoints.shutdown.sensitive= # Mark if the endpoint exposes sensitive information.\nendpoints.trace.enabled= # Enable the endpoint.\nendpoints.trace.id= # Endpoint identifier.\nendpoints.trace.path= # Endpoint path.\nendpoints.trace.sensitive= # Mark if the endpoint exposes sensitive information.\n\n# ENDPOINTS CORS CONFIGURATION (EndpointCorsProperties)\nendpoints.cors.allow-credentials= # Set whether credentials are supported. When not set, credentials are not supported.\nendpoints.cors.allowed-headers= # Comma-separated list of headers to allow in a request. '*' allows all headers.\nendpoints.cors.allowed-methods=GET # Comma-separated list of methods to allow. '*' allows all methods.\nendpoints.cors.allowed-origins= # Comma-separated list of origins to allow. '*' allows all origins. When not set, CORS support is disabled.\nendpoints.cors.exposed-headers= # Comma-separated list of headers to include in a response.\nendpoints.cors.max-age=1800 # How long, in seconds, the response from a pre-flight request can be cached by clients.\n\n# JMX ENDPOINT (EndpointMBeanExportProperties)\nendpoints.jmx.domain= # JMX domain name. Initialized with the value of 'spring.jmx.default-domain' if set.\nendpoints.jmx.enabled=true # Enable JMX export of all endpoints.\nendpoints.jmx.static-names= # Additional static properties to append to all ObjectNames of MBeans representing Endpoints.\nendpoints.jmx.unique-names=false # Ensure that ObjectNames are modified in case of conflict.\n\n# JOLOKIA (JolokiaProperties)\njolokia.config.*= # See Jolokia manual\n\n# MANAGEMENT HTTP SERVER (ManagementServerProperties)\nmanagement.add-application-context-header=true # Add the \"X-Application-Context\" HTTP header in each response.\nmanagement.address= # Network address that the management endpoints should bind to.\nmanagement.context-path= # Management endpoint context-path. For instance `/actuator`\nmanagement.port= # Management endpoint HTTP port. Uses the same port as the application by default. Configure a different port to use management-specific SSL.\nmanagement.security.enabled=true # Enable security.\nmanagement.security.roles=ADMIN # Comma-separated list of roles that can access the management endpoint.\nmanagement.security.sessions=stateless # Session creating policy to use (always, never, if_required, stateless).\nmanagement.ssl.ciphers= # Supported SSL ciphers. Requires a custom management.port.\nmanagement.ssl.client-auth= # Whether client authentication is wanted (\"want\") or needed (\"need\"). Requires a trust store. Requires a custom management.port.\nmanagement.ssl.enabled= # Enable SSL support. Requires a custom management.port.\nmanagement.ssl.enabled-protocols= # Enabled SSL protocols. Requires a custom management.port.\nmanagement.ssl.key-alias= # Alias that identifies the key in the key store. Requires a custom management.port.\nmanagement.ssl.key-password= # Password used to access the key in the key store. Requires a custom management.port.\nmanagement.ssl.key-store= # Path to the key store that holds the SSL certificate (typically a jks file). Requires a custom management.port.\nmanagement.ssl.key-store-password= # Password used to access the key store. Requires a custom management.port.\nmanagement.ssl.key-store-provider= # Provider for the key store. Requires a custom management.port.\nmanagement.ssl.key-store-type= # Type of the key store. Requires a custom management.port.\nmanagement.ssl.protocol=TLS # SSL protocol to use. Requires a custom management.port.\nmanagement.ssl.trust-store= # Trust store that holds SSL certificates. Requires a custom management.port.\nmanagement.ssl.trust-store-password= # Password used to access the trust store. Requires a custom management.port.\nmanagement.ssl.trust-store-provider= # Provider for the trust store. Requires a custom management.port.\nmanagement.ssl.trust-store-type= # Type of the trust store. Requires a custom management.port.\n\n# HEALTH INDICATORS (previously health.*)\nmanagement.health.db.enabled=true # Enable database health check.\nmanagement.health.defaults.enabled=true # Enable default health indicators.\nmanagement.health.diskspace.enabled=true # Enable disk space health check.\nmanagement.health.diskspace.path= # Path used to compute the available disk space.\nmanagement.health.diskspace.threshold=0 # Minimum disk space that should be available, in bytes.\nmanagement.health.elasticsearch.enabled=true # Enable elasticsearch health check.\nmanagement.health.elasticsearch.indices= # Comma-separated index names.\nmanagement.health.elasticsearch.response-timeout=100 # The time, in milliseconds, to wait for a response from the cluster.\nmanagement.health.jms.enabled=true # Enable JMS health check.\nmanagement.health.mail.enabled=true # Enable Mail health check.\nmanagement.health.mongo.enabled=true # Enable MongoDB health check.\nmanagement.health.rabbit.enabled=true # Enable RabbitMQ health check.\nmanagement.health.redis.enabled=true # Enable Redis health check.\nmanagement.health.solr.enabled=true # Enable Solr health check.\nmanagement.health.status.order=DOWN, OUT_OF_SERVICE, UNKNOWN, UP # Comma-separated list of health statuses in order of severity.\n\n# INFO CONTRIBUTORS (InfoContributorProperties)\nmanagement.info.build.enabled=true # Enable build info.\nmanagement.info.defaults.enabled=true # Enable default info contributors.\nmanagement.info.env.enabled=true # Enable environment info.\nmanagement.info.git.enabled=true # Enable git info.\nmanagement.info.git.mode=simple # Mode to use to expose git information.\n\n# REMOTE SHELL (ShellProperties)\nmanagement.shell.auth.type=simple # Authentication type. Auto-detected according to the environment.\nmanagement.shell.auth.jaas.domain=my-domain # JAAS domain.\nmanagement.shell.auth.key.path= # Path to the authentication key. This should point to a valid \".pem\" file.\nmanagement.shell.auth.simple.user.name=user # Login user.\nmanagement.shell.auth.simple.user.password= # Login password.\nmanagement.shell.auth.spring.roles=ADMIN # Comma-separated list of required roles to login to the CRaSH console.\nmanagement.shell.command-path-patterns=classpath*:/commands/**,classpath*:/crash/commands/** # Patterns to use to look for commands.\nmanagement.shell.command-refresh-interval=-1 # Scan for changes and update the command if necessary (in seconds).\nmanagement.shell.config-path-patterns=classpath*:/crash/* # Patterns to use to look for configurations.\nmanagement.shell.disabled-commands=jpa*,jdbc*,jndi* # Comma-separated list of commands to disable.\nmanagement.shell.disabled-plugins= # Comma-separated list of plugins to disable. Certain plugins are disabled by default based on the environment.\nmanagement.shell.ssh.auth-timeout = # Number of milliseconds after user will be prompted to login again.\nmanagement.shell.ssh.enabled=true # Enable CRaSH SSH support.\nmanagement.shell.ssh.idle-timeout = # Number of milliseconds after which unused connections are closed.\nmanagement.shell.ssh.key-path= # Path to the SSH server key.\nmanagement.shell.ssh.port=2000 # SSH port.\nmanagement.shell.telnet.enabled=false # Enable CRaSH telnet support. Enabled by default if the TelnetPlugin is  available.\nmanagement.shell.telnet.port=5000 # Telnet port.\n\n# TRACING (TraceProperties)\nmanagement.trace.include=request-headers,response-headers,cookies,errors # Items to be included in the trace.\n\n# METRICS EXPORT (MetricExportProperties)\nspring.metrics.export.aggregate.key-pattern= # Pattern that tells the aggregator what to do with the keys from the source repository.\nspring.metrics.export.aggregate.prefix= # Prefix for global repository if active.\nspring.metrics.export.delay-millis=5000 # Delay in milliseconds between export ticks. Metrics are exported to external sources on a schedule with this delay.\nspring.metrics.export.enabled=true # Flag to enable metric export (assuming a MetricWriter is available).\nspring.metrics.export.excludes= # List of patterns for metric names to exclude. Applied after the includes.\nspring.metrics.export.includes= # List of patterns for metric names to include.\nspring.metrics.export.redis.key=keys.spring.metrics # Key for redis repository export (if active).\nspring.metrics.export.redis.prefix=spring.metrics # Prefix for redis repository if active.\nspring.metrics.export.send-latest= # Flag to switch off any available optimizations based on not exporting unchanged metric values.\nspring.metrics.export.statsd.host= # Host of a statsd server to receive exported metrics.\nspring.metrics.export.statsd.port=8125 # Port of a statsd server to receive exported metrics.\nspring.metrics.export.statsd.prefix= # Prefix for statsd exported metrics.\nspring.metrics.export.triggers.*= # Specific trigger properties per MetricWriter bean name.\n\n\n# ----------------------------------------\n# DEVTOOLS PROPERTIES\n# ----------------------------------------\n\n# DEVTOOLS (DevToolsProperties)\nspring.devtools.livereload.enabled=true # Enable a livereload.com compatible server.\nspring.devtools.livereload.port=35729 # Server port.\nspring.devtools.restart.additional-exclude= # Additional patterns that should be excluded from triggering a full restart.\nspring.devtools.restart.additional-paths= # Additional paths to watch for changes.\nspring.devtools.restart.enabled=true # Enable automatic restart.\nspring.devtools.restart.exclude=META-INF/maven/**,META-INF/resources/**,resources/**,static/**,public/**,templates/**,**/*Test.class,**/*Tests.class,git.properties # Patterns that should be excluded from triggering a full restart.\nspring.devtools.restart.poll-interval=1000 # Amount of time (in milliseconds) to wait between polling for classpath changes.\nspring.devtools.restart.quiet-period=400 # Amount of quiet time (in milliseconds) required without any classpath changes before a restart is triggered.\nspring.devtools.restart.trigger-file= # Name of a specific file that when changed will trigger the restart check. If not specified any classpath file change will trigger the restart.\n\n# REMOTE DEVTOOLS (RemoteDevToolsProperties)\nspring.devtools.remote.context-path=/.~~spring-boot!~ # Context path used to handle the remote connection.\nspring.devtools.remote.debug.enabled=true # Enable remote debug support.\nspring.devtools.remote.debug.local-port=8000 # Local remote debug server port.\nspring.devtools.remote.proxy.host= # The host of the proxy to use to connect to the remote application.\nspring.devtools.remote.proxy.port= # The port of the proxy to use to connect to the remote application.\nspring.devtools.remote.restart.enabled=true # Enable remote restart.\nspring.devtools.remote.secret= # A shared secret required to establish a connection (required to enable remote support).\nspring.devtools.remote.secret-header-name=X-AUTH-TOKEN # HTTP header used to transfer the shared secret.\n```\n\n","slug":"spring-boot/properties","published":1,"date":"2018-11-20T14:55:26.980Z","updated":"2018-11-20T14:55:26.980Z","title":"","comments":1,"layout":"post","photos":[],"link":"","_id":"cjopxmsre000xwfo83xovpbq7","content":"<h1><span id=\"applicationproperties相关通用属性\">application.properties相关通用属性</span></h1><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br><span class=\"line\">195</span><br><span class=\"line\">196</span><br><span class=\"line\">197</span><br><span class=\"line\">198</span><br><span class=\"line\">199</span><br><span class=\"line\">200</span><br><span class=\"line\">201</span><br><span class=\"line\">202</span><br><span class=\"line\">203</span><br><span class=\"line\">204</span><br><span class=\"line\">205</span><br><span class=\"line\">206</span><br><span class=\"line\">207</span><br><span class=\"line\">208</span><br><span class=\"line\">209</span><br><span class=\"line\">210</span><br><span class=\"line\">211</span><br><span class=\"line\">212</span><br><span class=\"line\">213</span><br><span class=\"line\">214</span><br><span class=\"line\">215</span><br><span class=\"line\">216</span><br><span class=\"line\">217</span><br><span class=\"line\">218</span><br><span class=\"line\">219</span><br><span class=\"line\">220</span><br><span class=\"line\">221</span><br><span class=\"line\">222</span><br><span class=\"line\">223</span><br><span class=\"line\">224</span><br><span class=\"line\">225</span><br><span class=\"line\">226</span><br><span class=\"line\">227</span><br><span class=\"line\">228</span><br><span class=\"line\">229</span><br><span class=\"line\">230</span><br><span class=\"line\">231</span><br><span class=\"line\">232</span><br><span class=\"line\">233</span><br><span class=\"line\">234</span><br><span class=\"line\">235</span><br><span class=\"line\">236</span><br><span class=\"line\">237</span><br><span class=\"line\">238</span><br><span class=\"line\">239</span><br><span class=\"line\">240</span><br><span class=\"line\">241</span><br><span class=\"line\">242</span><br><span class=\"line\">243</span><br><span class=\"line\">244</span><br><span class=\"line\">245</span><br><span class=\"line\">246</span><br><span class=\"line\">247</span><br><span class=\"line\">248</span><br><span class=\"line\">249</span><br><span class=\"line\">250</span><br><span class=\"line\">251</span><br><span class=\"line\">252</span><br><span class=\"line\">253</span><br><span class=\"line\">254</span><br><span class=\"line\">255</span><br><span class=\"line\">256</span><br><span class=\"line\">257</span><br><span class=\"line\">258</span><br><span class=\"line\">259</span><br><span class=\"line\">260</span><br><span class=\"line\">261</span><br><span class=\"line\">262</span><br><span class=\"line\">263</span><br><span class=\"line\">264</span><br><span class=\"line\">265</span><br><span class=\"line\">266</span><br><span class=\"line\">267</span><br><span class=\"line\">268</span><br><span class=\"line\">269</span><br><span class=\"line\">270</span><br><span class=\"line\">271</span><br><span class=\"line\">272</span><br><span class=\"line\">273</span><br><span class=\"line\">274</span><br><span class=\"line\">275</span><br><span class=\"line\">276</span><br><span class=\"line\">277</span><br><span class=\"line\">278</span><br><span class=\"line\">279</span><br><span class=\"line\">280</span><br><span class=\"line\">281</span><br><span class=\"line\">282</span><br><span class=\"line\">283</span><br><span class=\"line\">284</span><br><span class=\"line\">285</span><br><span class=\"line\">286</span><br><span class=\"line\">287</span><br><span class=\"line\">288</span><br><span class=\"line\">289</span><br><span class=\"line\">290</span><br><span class=\"line\">291</span><br><span class=\"line\">292</span><br><span class=\"line\">293</span><br><span class=\"line\">294</span><br><span class=\"line\">295</span><br><span class=\"line\">296</span><br><span class=\"line\">297</span><br><span class=\"line\">298</span><br><span class=\"line\">299</span><br><span class=\"line\">300</span><br><span class=\"line\">301</span><br><span class=\"line\">302</span><br><span class=\"line\">303</span><br><span class=\"line\">304</span><br><span class=\"line\">305</span><br><span class=\"line\">306</span><br><span class=\"line\">307</span><br><span class=\"line\">308</span><br><span class=\"line\">309</span><br><span class=\"line\">310</span><br><span class=\"line\">311</span><br><span class=\"line\">312</span><br><span class=\"line\">313</span><br><span class=\"line\">314</span><br><span class=\"line\">315</span><br><span class=\"line\">316</span><br><span class=\"line\">317</span><br><span class=\"line\">318</span><br><span class=\"line\">319</span><br><span class=\"line\">320</span><br><span class=\"line\">321</span><br><span class=\"line\">322</span><br><span class=\"line\">323</span><br><span class=\"line\">324</span><br><span class=\"line\">325</span><br><span class=\"line\">326</span><br><span class=\"line\">327</span><br><span class=\"line\">328</span><br><span class=\"line\">329</span><br><span class=\"line\">330</span><br><span class=\"line\">331</span><br><span class=\"line\">332</span><br><span class=\"line\">333</span><br><span class=\"line\">334</span><br><span class=\"line\">335</span><br><span class=\"line\">336</span><br><span class=\"line\">337</span><br><span class=\"line\">338</span><br><span class=\"line\">339</span><br><span class=\"line\">340</span><br><span class=\"line\">341</span><br><span class=\"line\">342</span><br><span class=\"line\">343</span><br><span class=\"line\">344</span><br><span class=\"line\">345</span><br><span class=\"line\">346</span><br><span class=\"line\">347</span><br><span class=\"line\">348</span><br><span class=\"line\">349</span><br><span class=\"line\">350</span><br><span class=\"line\">351</span><br><span class=\"line\">352</span><br><span class=\"line\">353</span><br><span class=\"line\">354</span><br><span class=\"line\">355</span><br><span class=\"line\">356</span><br><span class=\"line\">357</span><br><span class=\"line\">358</span><br><span class=\"line\">359</span><br><span class=\"line\">360</span><br><span class=\"line\">361</span><br><span class=\"line\">362</span><br><span class=\"line\">363</span><br><span class=\"line\">364</span><br><span class=\"line\">365</span><br><span class=\"line\">366</span><br><span class=\"line\">367</span><br><span class=\"line\">368</span><br><span class=\"line\">369</span><br><span class=\"line\">370</span><br><span class=\"line\">371</span><br><span class=\"line\">372</span><br><span class=\"line\">373</span><br><span class=\"line\">374</span><br><span class=\"line\">375</span><br><span class=\"line\">376</span><br><span class=\"line\">377</span><br><span class=\"line\">378</span><br><span class=\"line\">379</span><br><span class=\"line\">380</span><br><span class=\"line\">381</span><br><span class=\"line\">382</span><br><span class=\"line\">383</span><br><span class=\"line\">384</span><br><span class=\"line\">385</span><br><span class=\"line\">386</span><br><span class=\"line\">387</span><br><span class=\"line\">388</span><br><span class=\"line\">389</span><br><span class=\"line\">390</span><br><span class=\"line\">391</span><br><span class=\"line\">392</span><br><span class=\"line\">393</span><br><span class=\"line\">394</span><br><span class=\"line\">395</span><br><span class=\"line\">396</span><br><span class=\"line\">397</span><br><span class=\"line\">398</span><br><span class=\"line\">399</span><br><span class=\"line\">400</span><br><span class=\"line\">401</span><br><span class=\"line\">402</span><br><span class=\"line\">403</span><br><span class=\"line\">404</span><br><span class=\"line\">405</span><br><span class=\"line\">406</span><br><span class=\"line\">407</span><br><span class=\"line\">408</span><br><span class=\"line\">409</span><br><span class=\"line\">410</span><br><span class=\"line\">411</span><br><span class=\"line\">412</span><br><span class=\"line\">413</span><br><span class=\"line\">414</span><br><span class=\"line\">415</span><br><span class=\"line\">416</span><br><span class=\"line\">417</span><br><span class=\"line\">418</span><br><span class=\"line\">419</span><br><span class=\"line\">420</span><br><span class=\"line\">421</span><br><span class=\"line\">422</span><br><span class=\"line\">423</span><br><span class=\"line\">424</span><br><span class=\"line\">425</span><br><span class=\"line\">426</span><br><span class=\"line\">427</span><br><span class=\"line\">428</span><br><span class=\"line\">429</span><br><span class=\"line\">430</span><br><span class=\"line\">431</span><br><span class=\"line\">432</span><br><span class=\"line\">433</span><br><span class=\"line\">434</span><br><span class=\"line\">435</span><br><span class=\"line\">436</span><br><span class=\"line\">437</span><br><span class=\"line\">438</span><br><span class=\"line\">439</span><br><span class=\"line\">440</span><br><span class=\"line\">441</span><br><span class=\"line\">442</span><br><span class=\"line\">443</span><br><span class=\"line\">444</span><br><span class=\"line\">445</span><br><span class=\"line\">446</span><br><span class=\"line\">447</span><br><span class=\"line\">448</span><br><span class=\"line\">449</span><br><span class=\"line\">450</span><br><span class=\"line\">451</span><br><span class=\"line\">452</span><br><span class=\"line\">453</span><br><span class=\"line\">454</span><br><span class=\"line\">455</span><br><span class=\"line\">456</span><br><span class=\"line\">457</span><br><span class=\"line\">458</span><br><span class=\"line\">459</span><br><span class=\"line\">460</span><br><span class=\"line\">461</span><br><span class=\"line\">462</span><br><span class=\"line\">463</span><br><span class=\"line\">464</span><br><span class=\"line\">465</span><br><span class=\"line\">466</span><br><span class=\"line\">467</span><br><span class=\"line\">468</span><br><span class=\"line\">469</span><br><span class=\"line\">470</span><br><span class=\"line\">471</span><br><span class=\"line\">472</span><br><span class=\"line\">473</span><br><span class=\"line\">474</span><br><span class=\"line\">475</span><br><span class=\"line\">476</span><br><span class=\"line\">477</span><br><span class=\"line\">478</span><br><span class=\"line\">479</span><br><span class=\"line\">480</span><br><span class=\"line\">481</span><br><span class=\"line\">482</span><br><span class=\"line\">483</span><br><span class=\"line\">484</span><br><span class=\"line\">485</span><br><span class=\"line\">486</span><br><span class=\"line\">487</span><br><span class=\"line\">488</span><br><span class=\"line\">489</span><br><span class=\"line\">490</span><br><span class=\"line\">491</span><br><span class=\"line\">492</span><br><span class=\"line\">493</span><br><span class=\"line\">494</span><br><span class=\"line\">495</span><br><span class=\"line\">496</span><br><span class=\"line\">497</span><br><span class=\"line\">498</span><br><span class=\"line\">499</span><br><span class=\"line\">500</span><br><span class=\"line\">501</span><br><span class=\"line\">502</span><br><span class=\"line\">503</span><br><span class=\"line\">504</span><br><span class=\"line\">505</span><br><span class=\"line\">506</span><br><span class=\"line\">507</span><br><span class=\"line\">508</span><br><span class=\"line\">509</span><br><span class=\"line\">510</span><br><span class=\"line\">511</span><br><span class=\"line\">512</span><br><span class=\"line\">513</span><br><span class=\"line\">514</span><br><span class=\"line\">515</span><br><span class=\"line\">516</span><br><span class=\"line\">517</span><br><span class=\"line\">518</span><br><span class=\"line\">519</span><br><span class=\"line\">520</span><br><span class=\"line\">521</span><br><span class=\"line\">522</span><br><span class=\"line\">523</span><br><span class=\"line\">524</span><br><span class=\"line\">525</span><br><span class=\"line\">526</span><br><span class=\"line\">527</span><br><span class=\"line\">528</span><br><span class=\"line\">529</span><br><span class=\"line\">530</span><br><span class=\"line\">531</span><br><span class=\"line\">532</span><br><span class=\"line\">533</span><br><span class=\"line\">534</span><br><span class=\"line\">535</span><br><span class=\"line\">536</span><br><span class=\"line\">537</span><br><span class=\"line\">538</span><br><span class=\"line\">539</span><br><span class=\"line\">540</span><br><span class=\"line\">541</span><br><span class=\"line\">542</span><br><span class=\"line\">543</span><br><span class=\"line\">544</span><br><span class=\"line\">545</span><br><span class=\"line\">546</span><br><span class=\"line\">547</span><br><span class=\"line\">548</span><br><span class=\"line\">549</span><br><span class=\"line\">550</span><br><span class=\"line\">551</span><br><span class=\"line\">552</span><br><span class=\"line\">553</span><br><span class=\"line\">554</span><br><span class=\"line\">555</span><br><span class=\"line\">556</span><br><span class=\"line\">557</span><br><span class=\"line\">558</span><br><span class=\"line\">559</span><br><span class=\"line\">560</span><br><span class=\"line\">561</span><br><span class=\"line\">562</span><br><span class=\"line\">563</span><br><span class=\"line\">564</span><br><span class=\"line\">565</span><br><span class=\"line\">566</span><br><span class=\"line\">567</span><br><span class=\"line\">568</span><br><span class=\"line\">569</span><br><span class=\"line\">570</span><br><span class=\"line\">571</span><br><span class=\"line\">572</span><br><span class=\"line\">573</span><br><span class=\"line\">574</span><br><span class=\"line\">575</span><br><span class=\"line\">576</span><br><span class=\"line\">577</span><br><span class=\"line\">578</span><br><span class=\"line\">579</span><br><span class=\"line\">580</span><br><span class=\"line\">581</span><br><span class=\"line\">582</span><br><span class=\"line\">583</span><br><span class=\"line\">584</span><br><span class=\"line\">585</span><br><span class=\"line\">586</span><br><span class=\"line\">587</span><br><span class=\"line\">588</span><br><span class=\"line\">589</span><br><span class=\"line\">590</span><br><span class=\"line\">591</span><br><span class=\"line\">592</span><br><span class=\"line\">593</span><br><span class=\"line\">594</span><br><span class=\"line\">595</span><br><span class=\"line\">596</span><br><span class=\"line\">597</span><br><span class=\"line\">598</span><br><span class=\"line\">599</span><br><span class=\"line\">600</span><br><span class=\"line\">601</span><br><span class=\"line\">602</span><br><span class=\"line\">603</span><br><span class=\"line\">604</span><br><span class=\"line\">605</span><br><span class=\"line\">606</span><br><span class=\"line\">607</span><br><span class=\"line\">608</span><br><span class=\"line\">609</span><br><span class=\"line\">610</span><br><span class=\"line\">611</span><br><span class=\"line\">612</span><br><span class=\"line\">613</span><br><span class=\"line\">614</span><br><span class=\"line\">615</span><br><span class=\"line\">616</span><br><span class=\"line\">617</span><br><span class=\"line\">618</span><br><span class=\"line\">619</span><br><span class=\"line\">620</span><br><span class=\"line\">621</span><br><span class=\"line\">622</span><br><span class=\"line\">623</span><br><span class=\"line\">624</span><br><span class=\"line\">625</span><br><span class=\"line\">626</span><br><span class=\"line\">627</span><br><span class=\"line\">628</span><br><span class=\"line\">629</span><br><span class=\"line\">630</span><br><span class=\"line\">631</span><br><span class=\"line\">632</span><br><span class=\"line\">633</span><br><span class=\"line\">634</span><br><span class=\"line\">635</span><br><span class=\"line\">636</span><br><span class=\"line\">637</span><br><span class=\"line\">638</span><br><span class=\"line\">639</span><br><span class=\"line\">640</span><br><span class=\"line\">641</span><br><span class=\"line\">642</span><br><span class=\"line\">643</span><br><span class=\"line\">644</span><br><span class=\"line\">645</span><br><span class=\"line\">646</span><br><span class=\"line\">647</span><br><span class=\"line\">648</span><br><span class=\"line\">649</span><br><span class=\"line\">650</span><br><span class=\"line\">651</span><br><span class=\"line\">652</span><br><span class=\"line\">653</span><br><span class=\"line\">654</span><br><span class=\"line\">655</span><br><span class=\"line\">656</span><br><span class=\"line\">657</span><br><span class=\"line\">658</span><br><span class=\"line\">659</span><br><span class=\"line\">660</span><br><span class=\"line\">661</span><br><span class=\"line\">662</span><br><span class=\"line\">663</span><br><span class=\"line\">664</span><br><span class=\"line\">665</span><br><span class=\"line\">666</span><br><span class=\"line\">667</span><br><span class=\"line\">668</span><br><span class=\"line\">669</span><br><span class=\"line\">670</span><br><span class=\"line\">671</span><br><span class=\"line\">672</span><br><span class=\"line\">673</span><br><span class=\"line\">674</span><br><span class=\"line\">675</span><br><span class=\"line\">676</span><br><span class=\"line\">677</span><br><span class=\"line\">678</span><br><span class=\"line\">679</span><br><span class=\"line\">680</span><br><span class=\"line\">681</span><br><span class=\"line\">682</span><br><span class=\"line\">683</span><br><span class=\"line\">684</span><br><span class=\"line\">685</span><br><span class=\"line\">686</span><br><span class=\"line\">687</span><br><span class=\"line\">688</span><br><span class=\"line\">689</span><br><span class=\"line\">690</span><br><span class=\"line\">691</span><br><span class=\"line\">692</span><br><span class=\"line\">693</span><br><span class=\"line\">694</span><br><span class=\"line\">695</span><br><span class=\"line\">696</span><br><span class=\"line\">697</span><br><span class=\"line\">698</span><br><span class=\"line\">699</span><br><span class=\"line\">700</span><br><span class=\"line\">701</span><br><span class=\"line\">702</span><br><span class=\"line\">703</span><br><span class=\"line\">704</span><br><span class=\"line\">705</span><br><span class=\"line\">706</span><br><span class=\"line\">707</span><br><span class=\"line\">708</span><br><span class=\"line\">709</span><br><span class=\"line\">710</span><br><span class=\"line\">711</span><br><span class=\"line\">712</span><br><span class=\"line\">713</span><br><span class=\"line\">714</span><br><span class=\"line\">715</span><br><span class=\"line\">716</span><br><span class=\"line\">717</span><br><span class=\"line\">718</span><br><span class=\"line\">719</span><br><span class=\"line\">720</span><br><span class=\"line\">721</span><br><span class=\"line\">722</span><br><span class=\"line\">723</span><br><span class=\"line\">724</span><br><span class=\"line\">725</span><br><span class=\"line\">726</span><br><span class=\"line\">727</span><br><span class=\"line\">728</span><br><span class=\"line\">729</span><br><span class=\"line\">730</span><br><span class=\"line\">731</span><br><span class=\"line\">732</span><br><span class=\"line\">733</span><br><span class=\"line\">734</span><br><span class=\"line\">735</span><br><span class=\"line\">736</span><br><span class=\"line\">737</span><br><span class=\"line\">738</span><br><span class=\"line\">739</span><br><span class=\"line\">740</span><br><span class=\"line\">741</span><br><span class=\"line\">742</span><br><span class=\"line\">743</span><br><span class=\"line\">744</span><br><span class=\"line\">745</span><br><span class=\"line\">746</span><br><span class=\"line\">747</span><br><span class=\"line\">748</span><br><span class=\"line\">749</span><br><span class=\"line\">750</span><br><span class=\"line\">751</span><br><span class=\"line\">752</span><br><span class=\"line\">753</span><br><span class=\"line\">754</span><br><span class=\"line\">755</span><br><span class=\"line\">756</span><br><span class=\"line\">757</span><br><span class=\"line\">758</span><br><span class=\"line\">759</span><br><span class=\"line\">760</span><br><span class=\"line\">761</span><br><span class=\"line\">762</span><br><span class=\"line\">763</span><br><span class=\"line\">764</span><br><span class=\"line\">765</span><br><span class=\"line\">766</span><br><span class=\"line\">767</span><br><span class=\"line\">768</span><br><span class=\"line\">769</span><br><span class=\"line\">770</span><br><span class=\"line\">771</span><br><span class=\"line\">772</span><br><span class=\"line\">773</span><br><span class=\"line\">774</span><br><span class=\"line\">775</span><br><span class=\"line\">776</span><br><span class=\"line\">777</span><br><span class=\"line\">778</span><br><span class=\"line\">779</span><br><span class=\"line\">780</span><br><span class=\"line\">781</span><br><span class=\"line\">782</span><br><span class=\"line\">783</span><br><span class=\"line\">784</span><br><span class=\"line\">785</span><br><span class=\"line\">786</span><br><span class=\"line\">787</span><br><span class=\"line\">788</span><br><span class=\"line\">789</span><br><span class=\"line\">790</span><br><span class=\"line\">791</span><br><span class=\"line\">792</span><br><span class=\"line\">793</span><br><span class=\"line\">794</span><br><span class=\"line\">795</span><br><span class=\"line\">796</span><br><span class=\"line\">797</span><br><span class=\"line\">798</span><br><span class=\"line\">799</span><br><span class=\"line\">800</span><br><span class=\"line\">801</span><br><span class=\"line\">802</span><br><span class=\"line\">803</span><br><span class=\"line\">804</span><br><span class=\"line\">805</span><br><span class=\"line\">806</span><br><span class=\"line\">807</span><br><span class=\"line\">808</span><br><span class=\"line\">809</span><br><span class=\"line\">810</span><br><span class=\"line\">811</span><br><span class=\"line\">812</span><br><span class=\"line\">813</span><br><span class=\"line\">814</span><br><span class=\"line\">815</span><br><span class=\"line\">816</span><br><span class=\"line\">817</span><br><span class=\"line\">818</span><br><span class=\"line\">819</span><br><span class=\"line\">820</span><br><span class=\"line\">821</span><br><span class=\"line\">822</span><br><span class=\"line\">823</span><br><span class=\"line\">824</span><br><span class=\"line\">825</span><br><span class=\"line\">826</span><br><span class=\"line\">827</span><br><span class=\"line\">828</span><br><span class=\"line\">829</span><br><span class=\"line\">830</span><br><span class=\"line\">831</span><br><span class=\"line\">832</span><br><span class=\"line\">833</span><br><span class=\"line\">834</span><br><span class=\"line\">835</span><br><span class=\"line\">836</span><br><span class=\"line\">837</span><br><span class=\"line\">838</span><br><span class=\"line\">839</span><br><span class=\"line\">840</span><br><span class=\"line\">841</span><br><span class=\"line\">842</span><br><span class=\"line\">843</span><br><span class=\"line\">844</span><br><span class=\"line\">845</span><br><span class=\"line\">846</span><br><span class=\"line\">847</span><br><span class=\"line\">848</span><br><span class=\"line\">849</span><br><span class=\"line\">850</span><br><span class=\"line\">851</span><br><span class=\"line\">852</span><br><span class=\"line\">853</span><br><span class=\"line\">854</span><br><span class=\"line\">855</span><br><span class=\"line\">856</span><br><span class=\"line\">857</span><br><span class=\"line\">858</span><br><span class=\"line\">859</span><br><span class=\"line\">860</span><br><span class=\"line\">861</span><br><span class=\"line\">862</span><br><span class=\"line\">863</span><br><span class=\"line\">864</span><br><span class=\"line\">865</span><br><span class=\"line\">866</span><br><span class=\"line\">867</span><br><span class=\"line\">868</span><br><span class=\"line\">869</span><br><span class=\"line\">870</span><br><span class=\"line\">871</span><br><span class=\"line\">872</span><br><span class=\"line\">873</span><br><span class=\"line\">874</span><br><span class=\"line\">875</span><br><span class=\"line\">876</span><br><span class=\"line\">877</span><br><span class=\"line\">878</span><br><span class=\"line\">879</span><br><span class=\"line\">880</span><br><span class=\"line\">881</span><br><span class=\"line\">882</span><br><span class=\"line\">883</span><br><span class=\"line\">884</span><br><span class=\"line\">885</span><br><span class=\"line\">886</span><br><span class=\"line\">887</span><br><span class=\"line\">888</span><br><span class=\"line\">889</span><br><span class=\"line\">890</span><br><span class=\"line\">891</span><br><span class=\"line\">892</span><br><span class=\"line\">893</span><br><span class=\"line\">894</span><br><span class=\"line\">895</span><br><span class=\"line\">896</span><br><span class=\"line\">897</span><br><span class=\"line\">898</span><br><span class=\"line\">899</span><br><span class=\"line\">900</span><br><span class=\"line\">901</span><br><span class=\"line\">902</span><br><span class=\"line\">903</span><br><span class=\"line\">904</span><br><span class=\"line\">905</span><br><span class=\"line\">906</span><br><span class=\"line\">907</span><br><span class=\"line\">908</span><br><span class=\"line\">909</span><br><span class=\"line\">910</span><br><span class=\"line\">911</span><br><span class=\"line\">912</span><br><span class=\"line\">913</span><br><span class=\"line\">914</span><br><span class=\"line\">915</span><br><span class=\"line\">916</span><br><span class=\"line\">917</span><br><span class=\"line\">918</span><br><span class=\"line\">919</span><br><span class=\"line\">920</span><br><span class=\"line\">921</span><br><span class=\"line\">922</span><br><span class=\"line\">923</span><br><span class=\"line\">924</span><br><span class=\"line\">925</span><br><span class=\"line\">926</span><br><span class=\"line\">927</span><br><span class=\"line\">928</span><br><span class=\"line\">929</span><br><span class=\"line\">930</span><br><span class=\"line\">931</span><br><span class=\"line\">932</span><br><span class=\"line\">933</span><br><span class=\"line\">934</span><br><span class=\"line\">935</span><br><span class=\"line\">936</span><br><span class=\"line\">937</span><br><span class=\"line\">938</span><br><span class=\"line\">939</span><br><span class=\"line\">940</span><br><span class=\"line\">941</span><br><span class=\"line\">942</span><br><span class=\"line\">943</span><br><span class=\"line\">944</span><br><span class=\"line\">945</span><br><span class=\"line\">946</span><br><span class=\"line\">947</span><br><span class=\"line\">948</span><br><span class=\"line\">949</span><br><span class=\"line\">950</span><br><span class=\"line\">951</span><br><span class=\"line\">952</span><br><span class=\"line\">953</span><br><span class=\"line\">954</span><br><span class=\"line\">955</span><br><span class=\"line\">956</span><br><span class=\"line\">957</span><br><span class=\"line\">958</span><br><span class=\"line\">959</span><br><span class=\"line\">960</span><br><span class=\"line\">961</span><br><span class=\"line\">962</span><br><span class=\"line\">963</span><br><span class=\"line\">964</span><br><span class=\"line\">965</span><br><span class=\"line\">966</span><br><span class=\"line\">967</span><br><span class=\"line\">968</span><br><span class=\"line\">969</span><br><span class=\"line\">970</span><br><span class=\"line\">971</span><br><span class=\"line\">972</span><br><span class=\"line\">973</span><br><span class=\"line\">974</span><br><span class=\"line\">975</span><br><span class=\"line\">976</span><br><span class=\"line\">977</span><br><span class=\"line\">978</span><br><span class=\"line\">979</span><br><span class=\"line\">980</span><br><span class=\"line\">981</span><br><span class=\"line\">982</span><br><span class=\"line\">983</span><br><span class=\"line\">984</span><br><span class=\"line\">985</span><br><span class=\"line\">986</span><br><span class=\"line\">987</span><br><span class=\"line\">988</span><br><span class=\"line\">989</span><br><span class=\"line\">990</span><br><span class=\"line\">991</span><br><span class=\"line\">992</span><br><span class=\"line\">993</span><br><span class=\"line\">994</span><br><span class=\"line\">995</span><br><span class=\"line\">996</span><br><span class=\"line\">997</span><br><span class=\"line\">998</span><br><span class=\"line\">999</span><br><span class=\"line\">1000</span><br><span class=\"line\">1001</span><br><span class=\"line\">1002</span><br><span class=\"line\">1003</span><br><span class=\"line\">1004</span><br><span class=\"line\">1005</span><br><span class=\"line\">1006</span><br><span class=\"line\">1007</span><br><span class=\"line\">1008</span><br><span class=\"line\">1009</span><br><span class=\"line\">1010</span><br><span class=\"line\">1011</span><br><span class=\"line\">1012</span><br><span class=\"line\">1013</span><br><span class=\"line\">1014</span><br><span class=\"line\">1015</span><br><span class=\"line\">1016</span><br><span class=\"line\">1017</span><br><span class=\"line\">1018</span><br><span class=\"line\">1019</span><br><span class=\"line\">1020</span><br><span class=\"line\">1021</span><br><span class=\"line\">1022</span><br><span class=\"line\">1023</span><br><span class=\"line\">1024</span><br><span class=\"line\">1025</span><br><span class=\"line\">1026</span><br><span class=\"line\">1027</span><br><span class=\"line\">1028</span><br><span class=\"line\">1029</span><br><span class=\"line\">1030</span><br><span class=\"line\">1031</span><br><span class=\"line\">1032</span><br><span class=\"line\">1033</span><br><span class=\"line\">1034</span><br><span class=\"line\">1035</span><br><span class=\"line\">1036</span><br><span class=\"line\">1037</span><br><span class=\"line\">1038</span><br><span class=\"line\">1039</span><br><span class=\"line\">1040</span><br><span class=\"line\">1041</span><br><span class=\"line\">1042</span><br><span class=\"line\">1043</span><br><span class=\"line\">1044</span><br><span class=\"line\">1045</span><br><span class=\"line\">1046</span><br><span class=\"line\">1047</span><br><span class=\"line\">1048</span><br><span class=\"line\">1049</span><br><span class=\"line\">1050</span><br><span class=\"line\">1051</span><br><span class=\"line\">1052</span><br><span class=\"line\">1053</span><br><span class=\"line\">1054</span><br><span class=\"line\">1055</span><br><span class=\"line\">1056</span><br><span class=\"line\">1057</span><br><span class=\"line\">1058</span><br><span class=\"line\">1059</span><br><span class=\"line\">1060</span><br><span class=\"line\">1061</span><br><span class=\"line\">1062</span><br><span class=\"line\">1063</span><br><span class=\"line\">1064</span><br><span class=\"line\">1065</span><br><span class=\"line\">1066</span><br><span class=\"line\">1067</span><br><span class=\"line\">1068</span><br><span class=\"line\">1069</span><br><span class=\"line\">1070</span><br><span class=\"line\">1071</span><br><span class=\"line\">1072</span><br><span class=\"line\">1073</span><br><span class=\"line\">1074</span><br><span class=\"line\">1075</span><br><span class=\"line\">1076</span><br><span class=\"line\">1077</span><br><span class=\"line\">1078</span><br><span class=\"line\">1079</span><br><span class=\"line\">1080</span><br><span class=\"line\">1081</span><br><span class=\"line\">1082</span><br><span class=\"line\">1083</span><br><span class=\"line\">1084</span><br><span class=\"line\">1085</span><br><span class=\"line\">1086</span><br><span class=\"line\">1087</span><br><span class=\"line\">1088</span><br><span class=\"line\">1089</span><br><span class=\"line\">1090</span><br><span class=\"line\">1091</span><br><span class=\"line\">1092</span><br><span class=\"line\">1093</span><br><span class=\"line\">1094</span><br><span class=\"line\">1095</span><br><span class=\"line\">1096</span><br><span class=\"line\">1097</span><br><span class=\"line\">1098</span><br><span class=\"line\">1099</span><br><span class=\"line\">1100</span><br><span class=\"line\">1101</span><br><span class=\"line\">1102</span><br><span class=\"line\">1103</span><br><span class=\"line\">1104</span><br><span class=\"line\">1105</span><br><span class=\"line\">1106</span><br><span class=\"line\">1107</span><br><span class=\"line\">1108</span><br><span class=\"line\">1109</span><br><span class=\"line\">1110</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># ===================================================================</span><br><span class=\"line\"># COMMON SPRING BOOT PROPERTIES</span><br><span class=\"line\">#</span><br><span class=\"line\"># This sample file is provided as a guideline. Do NOT copy it in its</span><br><span class=\"line\"># entirety to your own application.               ^^^</span><br><span class=\"line\"># ===================================================================</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"># ----------------------------------------</span><br><span class=\"line\"># CORE PROPERTIES</span><br><span class=\"line\"># ----------------------------------------</span><br><span class=\"line\"></span><br><span class=\"line\"># BANNER</span><br><span class=\"line\">banner.charset=UTF-8 # Banner file encoding.</span><br><span class=\"line\">banner.location=classpath:banner.txt # Banner file location.</span><br><span class=\"line\">banner.image.location=classpath:banner.gif # Banner image file location (jpg/png can also be used).</span><br><span class=\"line\">banner.image.width= # Width of the banner image in chars (default 76)</span><br><span class=\"line\">banner.image.height= # Height of the banner image in chars (default based on image height)</span><br><span class=\"line\">banner.image.margin= # Left hand image margin in chars (default 2)</span><br><span class=\"line\">banner.image.invert= # If images should be inverted for dark terminal themes (default false)</span><br><span class=\"line\"></span><br><span class=\"line\"># LOGGING</span><br><span class=\"line\">logging.config= # Location of the logging configuration file. For instance `classpath:logback.xml` for Logback</span><br><span class=\"line\">logging.exception-conversion-word=%wEx # Conversion word used when logging exceptions.</span><br><span class=\"line\">logging.file= # Log file name. For instance `myapp.log`</span><br><span class=\"line\">logging.level.*= # Log levels severity mapping. For instance `logging.level.org.springframework=DEBUG`</span><br><span class=\"line\">logging.path= # Location of the log file. For instance `/var/log`</span><br><span class=\"line\">logging.pattern.console= # Appender pattern for output to the console. Only supported with the default logback setup.</span><br><span class=\"line\">logging.pattern.file= # Appender pattern for output to the file. Only supported with the default logback setup.</span><br><span class=\"line\">logging.pattern.level= # Appender pattern for log level (default %5p). Only supported with the default logback setup.</span><br><span class=\"line\">logging.register-shutdown-hook=false # Register a shutdown hook for the logging system when it is initialized.</span><br><span class=\"line\"></span><br><span class=\"line\"># AOP</span><br><span class=\"line\">spring.aop.auto=true # Add @EnableAspectJAutoProxy.</span><br><span class=\"line\">spring.aop.proxy-target-class=false # Whether subclass-based (CGLIB) proxies are to be created (true) as opposed to standard Java interface-based proxies (false).</span><br><span class=\"line\"></span><br><span class=\"line\"># IDENTITY (ContextIdApplicationContextInitializer)</span><br><span class=\"line\">spring.application.index= # Application index.</span><br><span class=\"line\">spring.application.name= # Application name.</span><br><span class=\"line\"></span><br><span class=\"line\"># ADMIN (SpringApplicationAdminJmxAutoConfiguration)</span><br><span class=\"line\">spring.application.admin.enabled=false # Enable admin features for the application.</span><br><span class=\"line\">spring.application.admin.jmx-name=org.springframework.boot:type=Admin,name=SpringApplication # JMX name of the application admin MBean.</span><br><span class=\"line\"></span><br><span class=\"line\"># AUTO-CONFIGURATION</span><br><span class=\"line\">spring.autoconfigure.exclude= # Auto-configuration classes to exclude.</span><br><span class=\"line\"></span><br><span class=\"line\"># SPRING CORE</span><br><span class=\"line\">spring.beaninfo.ignore=true # Skip search of BeanInfo classes.</span><br><span class=\"line\"></span><br><span class=\"line\"># SPRING CACHE (CacheProperties)</span><br><span class=\"line\">spring.cache.cache-names= # Comma-separated list of cache names to create if supported by the underlying cache manager.</span><br><span class=\"line\">spring.cache.caffeine.spec= # The spec to use to create caches. Check CaffeineSpec for more details on the spec format.</span><br><span class=\"line\">spring.cache.couchbase.expiration=0 # Entry expiration in milliseconds. By default the entries never expire.</span><br><span class=\"line\">spring.cache.ehcache.config= # The location of the configuration file to use to initialize EhCache.</span><br><span class=\"line\">spring.cache.guava.spec= # The spec to use to create caches. Check CacheBuilderSpec for more details on the spec format.</span><br><span class=\"line\">spring.cache.hazelcast.config= # The location of the configuration file to use to initialize Hazelcast.</span><br><span class=\"line\">spring.cache.infinispan.config= # The location of the configuration file to use to initialize Infinispan.</span><br><span class=\"line\">spring.cache.jcache.config= # The location of the configuration file to use to initialize the cache manager.</span><br><span class=\"line\">spring.cache.jcache.provider= # Fully qualified name of the CachingProvider implementation to use to retrieve the JSR-107 compliant cache manager. Only needed if more than one JSR-107 implementation is available on the classpath.</span><br><span class=\"line\">spring.cache.type= # Cache type, auto-detected according to the environment by default.</span><br><span class=\"line\"></span><br><span class=\"line\"># SPRING CONFIG - using environment property only (ConfigFileApplicationListener)</span><br><span class=\"line\">spring.config.location= # Config file locations.</span><br><span class=\"line\">spring.config.name=application # Config file name.</span><br><span class=\"line\"></span><br><span class=\"line\"># HAZELCAST (HazelcastProperties)</span><br><span class=\"line\">spring.hazelcast.config= # The location of the configuration file to use to initialize Hazelcast.</span><br><span class=\"line\"></span><br><span class=\"line\"># PROJECT INFORMATION (ProjectInfoProperties)</span><br><span class=\"line\">spring.info.build.location=classpath:META-INF/build-info.properties # Location of the generated build-info.properties file.</span><br><span class=\"line\">spring.info.git.location=classpath:git.properties # Location of the generated git.properties file.</span><br><span class=\"line\"></span><br><span class=\"line\"># JMX</span><br><span class=\"line\">spring.jmx.default-domain= # JMX domain name.</span><br><span class=\"line\">spring.jmx.enabled=true # Expose management beans to the JMX domain.</span><br><span class=\"line\">spring.jmx.server=mbeanServer # MBeanServer bean name.</span><br><span class=\"line\"></span><br><span class=\"line\"># Email (MailProperties)</span><br><span class=\"line\">spring.mail.default-encoding=UTF-8 # Default MimeMessage encoding.</span><br><span class=\"line\">spring.mail.host= # SMTP server host. For instance `smtp.example.com`</span><br><span class=\"line\">spring.mail.jndi-name= # Session JNDI name. When set, takes precedence to others mail settings.</span><br><span class=\"line\">spring.mail.password= # Login password of the SMTP server.</span><br><span class=\"line\">spring.mail.port= # SMTP server port.</span><br><span class=\"line\">spring.mail.properties.*= # Additional JavaMail session properties.</span><br><span class=\"line\">spring.mail.protocol=smtp # Protocol used by the SMTP server.</span><br><span class=\"line\">spring.mail.test-connection=false # Test that the mail server is available on startup.</span><br><span class=\"line\">spring.mail.username= # Login user of the SMTP server.</span><br><span class=\"line\"></span><br><span class=\"line\"># APPLICATION SETTINGS (SpringApplication)</span><br><span class=\"line\">spring.main.banner-mode=console # Mode used to display the banner when the application runs.</span><br><span class=\"line\">spring.main.sources= # Sources (class name, package name or XML resource location) to include in the ApplicationContext.</span><br><span class=\"line\">spring.main.web-environment= # Run the application in a web environment (auto-detected by default).</span><br><span class=\"line\"></span><br><span class=\"line\"># FILE ENCODING (FileEncodingApplicationListener)</span><br><span class=\"line\">spring.mandatory-file-encoding= # Expected character encoding the application must use.</span><br><span class=\"line\"></span><br><span class=\"line\"># INTERNATIONALIZATION (MessageSourceAutoConfiguration)</span><br><span class=\"line\">spring.messages.always-use-message-format=false # Set whether to always apply the MessageFormat rules, parsing even messages without arguments.</span><br><span class=\"line\">spring.messages.basename=messages # Comma-separated list of basenames, each following the ResourceBundle convention.</span><br><span class=\"line\">spring.messages.cache-seconds=-1 # Loaded resource bundle files cache expiration, in seconds. When set to -1, bundles are cached forever.</span><br><span class=\"line\">spring.messages.encoding=UTF-8 # Message bundles encoding.</span><br><span class=\"line\">spring.messages.fallback-to-system-locale=true # Set whether to fall back to the system Locale if no files for a specific Locale have been found.</span><br><span class=\"line\"></span><br><span class=\"line\"># OUTPUT</span><br><span class=\"line\">spring.output.ansi.enabled=detect # Configure the ANSI output (can be \"detect\", \"always\", \"never\").</span><br><span class=\"line\"></span><br><span class=\"line\"># PID FILE (ApplicationPidFileWriter)</span><br><span class=\"line\">spring.pid.fail-on-write-error= # Fail if ApplicationPidFileWriter is used but it cannot write the PID file.</span><br><span class=\"line\">spring.pid.file= # Location of the PID file to write (if ApplicationPidFileWriter is used).</span><br><span class=\"line\"></span><br><span class=\"line\"># PROFILES</span><br><span class=\"line\">spring.profiles.active= # Comma-separated list of active profiles.</span><br><span class=\"line\">spring.profiles.include= # Unconditionally activate the specified comma separated profiles.</span><br><span class=\"line\"></span><br><span class=\"line\"># SENDGRID (SendGridAutoConfiguration)</span><br><span class=\"line\">spring.sendgrid.api-key= # SendGrid api key (alternative to username/password)</span><br><span class=\"line\">spring.sendgrid.username= # SendGrid account username</span><br><span class=\"line\">spring.sendgrid.password= # SendGrid account password</span><br><span class=\"line\">spring.sendgrid.proxy.host= # SendGrid proxy host</span><br><span class=\"line\">spring.sendgrid.proxy.port= # SendGrid proxy port</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"># ----------------------------------------</span><br><span class=\"line\"># WEB PROPERTIES</span><br><span class=\"line\"># ----------------------------------------</span><br><span class=\"line\"></span><br><span class=\"line\"># EMBEDDED SERVER CONFIGURATION (ServerProperties)</span><br><span class=\"line\">server.address= # Network address to which the server should bind to.</span><br><span class=\"line\">server.compression.enabled=false # If response compression is enabled.</span><br><span class=\"line\">server.compression.excluded-user-agents= # List of user-agents to exclude from compression.</span><br><span class=\"line\">server.compression.mime-types= # Comma-separated list of MIME types that should be compressed. For instance `text/html,text/css,application/json`</span><br><span class=\"line\">server.compression.min-response-size= # Minimum response size that is required for compression to be performed. For instance 2048</span><br><span class=\"line\">server.connection-timeout= # Time in milliseconds that connectors will wait for another HTTP request before closing the connection. When not set, the connector's container-specific default will be used. Use a value of -1 to indicate no (i.e. infinite) timeout.</span><br><span class=\"line\">server.context-parameters.*= # Servlet context init parameters. For instance `server.context-parameters.a=alpha`</span><br><span class=\"line\">server.context-path= # Context path of the application.</span><br><span class=\"line\">server.display-name=application # Display name of the application.</span><br><span class=\"line\">server.max-http-header-size=0 # Maximum size in bytes of the HTTP message header.</span><br><span class=\"line\">server.max-http-post-size=0 # Maximum size in bytes of the HTTP post content.</span><br><span class=\"line\">server.error.include-stacktrace=never # When to include a \"stacktrace\" attribute.</span><br><span class=\"line\">server.error.path=/error # Path of the error controller.</span><br><span class=\"line\">server.error.whitelabel.enabled=true # Enable the default error page displayed in browsers in case of a server error.</span><br><span class=\"line\">server.jetty.acceptors= # Number of acceptor threads to use.</span><br><span class=\"line\">server.jetty.selectors= # Number of selector threads to use.</span><br><span class=\"line\">server.jsp-servlet.class-name=org.apache.jasper.servlet.JspServlet # The class name of the JSP servlet.</span><br><span class=\"line\">server.jsp-servlet.init-parameters.*= # Init parameters used to configure the JSP servlet</span><br><span class=\"line\">server.jsp-servlet.registered=true # Whether or not the JSP servlet is registered</span><br><span class=\"line\">server.port=8080 # Server HTTP port.</span><br><span class=\"line\">server.server-header= # Value to use for the Server response header (no header is sent if empty)</span><br><span class=\"line\">server.servlet-path=/ # Path of the main dispatcher servlet.</span><br><span class=\"line\">server.use-forward-headers= # If X-Forwarded-* headers should be applied to the HttpRequest.</span><br><span class=\"line\">server.session.cookie.comment= # Comment for the session cookie.</span><br><span class=\"line\">server.session.cookie.domain= # Domain for the session cookie.</span><br><span class=\"line\">server.session.cookie.http-only= # \"HttpOnly\" flag for the session cookie.</span><br><span class=\"line\">server.session.cookie.max-age= # Maximum age of the session cookie in seconds.</span><br><span class=\"line\">server.session.cookie.name= # Session cookie name.</span><br><span class=\"line\">server.session.cookie.path= # Path of the session cookie.</span><br><span class=\"line\">server.session.cookie.secure= # \"Secure\" flag for the session cookie.</span><br><span class=\"line\">server.session.persistent=false # Persist session data between restarts.</span><br><span class=\"line\">server.session.store-dir= # Directory used to store session data.</span><br><span class=\"line\">server.session.timeout= # Session timeout in seconds.</span><br><span class=\"line\">server.session.tracking-modes= # Session tracking modes (one or more of the following: \"cookie\", \"url\", \"ssl\").</span><br><span class=\"line\">server.ssl.ciphers= # Supported SSL ciphers.</span><br><span class=\"line\">server.ssl.client-auth= # Whether client authentication is wanted (\"want\") or needed (\"need\"). Requires a trust store.</span><br><span class=\"line\">server.ssl.enabled= # Enable SSL support.</span><br><span class=\"line\">server.ssl.enabled-protocols= # Enabled SSL protocols.</span><br><span class=\"line\">server.ssl.key-alias= # Alias that identifies the key in the key store.</span><br><span class=\"line\">server.ssl.key-password= # Password used to access the key in the key store.</span><br><span class=\"line\">server.ssl.key-store= # Path to the key store that holds the SSL certificate (typically a jks file).</span><br><span class=\"line\">server.ssl.key-store-password= # Password used to access the key store.</span><br><span class=\"line\">server.ssl.key-store-provider= # Provider for the key store.</span><br><span class=\"line\">server.ssl.key-store-type= # Type of the key store.</span><br><span class=\"line\">server.ssl.protocol=TLS # SSL protocol to use.</span><br><span class=\"line\">server.ssl.trust-store= # Trust store that holds SSL certificates.</span><br><span class=\"line\">server.ssl.trust-store-password= # Password used to access the trust store.</span><br><span class=\"line\">server.ssl.trust-store-provider= # Provider for the trust store.</span><br><span class=\"line\">server.ssl.trust-store-type= # Type of the trust store.</span><br><span class=\"line\">server.tomcat.accesslog.directory=logs # Directory in which log files are created. Can be relative to the tomcat base dir or absolute.</span><br><span class=\"line\">server.tomcat.accesslog.enabled=false # Enable access log.</span><br><span class=\"line\">server.tomcat.accesslog.pattern=common # Format pattern for access logs.</span><br><span class=\"line\">server.tomcat.accesslog.prefix=access_log # Log file name prefix.</span><br><span class=\"line\">server.tomcat.accesslog.rename-on-rotate=false # Defer inclusion of the date stamp in the file name until rotate time.</span><br><span class=\"line\">server.tomcat.accesslog.suffix=.log # Log file name suffix.</span><br><span class=\"line\">server.tomcat.background-processor-delay=30 # Delay in seconds between the invocation of backgroundProcess methods.</span><br><span class=\"line\">server.tomcat.basedir= # Tomcat base directory. If not specified a temporary directory will be used.</span><br><span class=\"line\">server.tomcat.internal-proxies=10\\\\.\\\\d&#123;1,3&#125;\\\\.\\\\d&#123;1,3&#125;\\\\.\\\\d&#123;1,3&#125;|\\\\</span><br><span class=\"line\">        192\\\\.168\\\\.\\\\d&#123;1,3&#125;\\\\.\\\\d&#123;1,3&#125;|\\\\</span><br><span class=\"line\">        169\\\\.254\\\\.\\\\d&#123;1,3&#125;\\\\.\\\\d&#123;1,3&#125;|\\\\</span><br><span class=\"line\">        127\\\\.\\\\d&#123;1,3&#125;\\\\.\\\\d&#123;1,3&#125;\\\\.\\\\d&#123;1,3&#125;|\\\\</span><br><span class=\"line\">        172\\\\.1[6-9]&#123;1&#125;\\\\.\\\\d&#123;1,3&#125;\\\\.\\\\d&#123;1,3&#125;|\\\\</span><br><span class=\"line\">        172\\\\.2[0-9]&#123;1&#125;\\\\.\\\\d&#123;1,3&#125;\\\\.\\\\d&#123;1,3&#125;|\\\\</span><br><span class=\"line\">        172\\\\.3[0-1]&#123;1&#125;\\\\.\\\\d&#123;1,3&#125;\\\\.\\\\d&#123;1,3&#125; # regular expression matching trusted IP addresses.</span><br><span class=\"line\">server.tomcat.max-threads=0 # Maximum amount of worker threads.</span><br><span class=\"line\">server.tomcat.min-spare-threads=0 # Minimum amount of worker threads.</span><br><span class=\"line\">server.tomcat.port-header=X-Forwarded-Port # Name of the HTTP header used to override the original port value.</span><br><span class=\"line\">server.tomcat.protocol-header= # Header that holds the incoming protocol, usually named \"X-Forwarded-Proto\".</span><br><span class=\"line\">server.tomcat.protocol-header-https-value=https # Value of the protocol header that indicates that the incoming request uses SSL.</span><br><span class=\"line\">server.tomcat.redirect-context-root= # Whether requests to the context root should be redirected by appending a / to the path.</span><br><span class=\"line\">server.tomcat.remote-ip-header= # Name of the http header from which the remote ip is extracted. For instance `X-FORWARDED-FOR`</span><br><span class=\"line\">server.tomcat.uri-encoding=UTF-8 # Character encoding to use to decode the URI.</span><br><span class=\"line\">server.undertow.accesslog.dir= # Undertow access log directory.</span><br><span class=\"line\">server.undertow.accesslog.enabled=false # Enable access log.</span><br><span class=\"line\">server.undertow.accesslog.pattern=common # Format pattern for access logs.</span><br><span class=\"line\">server.undertow.buffer-size= # Size of each buffer in bytes.</span><br><span class=\"line\">server.undertow.buffers-per-region= # Number of buffer per region.</span><br><span class=\"line\">server.undertow.direct-buffers= # Allocate buffers outside the Java heap.</span><br><span class=\"line\">server.undertow.io-threads= # Number of I/O threads to create for the worker.</span><br><span class=\"line\">server.undertow.worker-threads= # Number of worker threads.</span><br><span class=\"line\"></span><br><span class=\"line\"># FREEMARKER (FreeMarkerAutoConfiguration)</span><br><span class=\"line\">spring.freemarker.allow-request-override=false # Set whether HttpServletRequest attributes are allowed to override (hide) controller generated model attributes of the same name.</span><br><span class=\"line\">spring.freemarker.allow-session-override=false # Set whether HttpSession attributes are allowed to override (hide) controller generated model attributes of the same name.</span><br><span class=\"line\">spring.freemarker.cache=false # Enable template caching.</span><br><span class=\"line\">spring.freemarker.charset=UTF-8 # Template encoding.</span><br><span class=\"line\">spring.freemarker.check-template-location=true # Check that the templates location exists.</span><br><span class=\"line\">spring.freemarker.content-type=text/html # Content-Type value.</span><br><span class=\"line\">spring.freemarker.enabled=true # Enable MVC view resolution for this technology.</span><br><span class=\"line\">spring.freemarker.expose-request-attributes=false # Set whether all request attributes should be added to the model prior to merging with the template.</span><br><span class=\"line\">spring.freemarker.expose-session-attributes=false # Set whether all HttpSession attributes should be added to the model prior to merging with the template.</span><br><span class=\"line\">spring.freemarker.expose-spring-macro-helpers=true # Set whether to expose a RequestContext for use by Spring's macro library, under the name \"springMacroRequestContext\".</span><br><span class=\"line\">spring.freemarker.prefer-file-system-access=true # Prefer file system access for template loading. File system access enables hot detection of template changes.</span><br><span class=\"line\">spring.freemarker.prefix= # Prefix that gets prepended to view names when building a URL.</span><br><span class=\"line\">spring.freemarker.request-context-attribute= # Name of the RequestContext attribute for all views.</span><br><span class=\"line\">spring.freemarker.settings.*= # Well-known FreeMarker keys which will be passed to FreeMarker's Configuration.</span><br><span class=\"line\">spring.freemarker.suffix= # Suffix that gets appended to view names when building a URL.</span><br><span class=\"line\">spring.freemarker.template-loader-path=classpath:/templates/ # Comma-separated list of template paths.</span><br><span class=\"line\">spring.freemarker.view-names= # White list of view names that can be resolved.</span><br><span class=\"line\"></span><br><span class=\"line\"># GROOVY TEMPLATES (GroovyTemplateAutoConfiguration)</span><br><span class=\"line\">spring.groovy.template.allow-request-override=false # Set whether HttpServletRequest attributes are allowed to override (hide) controller generated model attributes of the same name.</span><br><span class=\"line\">spring.groovy.template.allow-session-override=false # Set whether HttpSession attributes are allowed to override (hide) controller generated model attributes of the same name.</span><br><span class=\"line\">spring.groovy.template.cache= # Enable template caching.</span><br><span class=\"line\">spring.groovy.template.charset=UTF-8 # Template encoding.</span><br><span class=\"line\">spring.groovy.template.check-template-location=true # Check that the templates location exists.</span><br><span class=\"line\">spring.groovy.template.configuration.*= # See GroovyMarkupConfigurer</span><br><span class=\"line\">spring.groovy.template.content-type=test/html # Content-Type value.</span><br><span class=\"line\">spring.groovy.template.enabled=true # Enable MVC view resolution for this technology.</span><br><span class=\"line\">spring.groovy.template.expose-request-attributes=false # Set whether all request attributes should be added to the model prior to merging with the template.</span><br><span class=\"line\">spring.groovy.template.expose-session-attributes=false # Set whether all HttpSession attributes should be added to the model prior to merging with the template.</span><br><span class=\"line\">spring.groovy.template.expose-spring-macro-helpers=true # Set whether to expose a RequestContext for use by Spring's macro library, under the name \"springMacroRequestContext\".</span><br><span class=\"line\">spring.groovy.template.prefix= # Prefix that gets prepended to view names when building a URL.</span><br><span class=\"line\">spring.groovy.template.request-context-attribute= # Name of the RequestContext attribute for all views.</span><br><span class=\"line\">spring.groovy.template.resource-loader-path=classpath:/templates/ # Template path.</span><br><span class=\"line\">spring.groovy.template.suffix=.tpl # Suffix that gets appended to view names when building a URL.</span><br><span class=\"line\">spring.groovy.template.view-names= # White list of view names that can be resolved.</span><br><span class=\"line\"></span><br><span class=\"line\"># SPRING HATEOAS (HateoasProperties)</span><br><span class=\"line\">spring.hateoas.use-hal-as-default-json-media-type=true # Specify if application/hal+json responses should be sent to requests that accept application/json.</span><br><span class=\"line\"></span><br><span class=\"line\"># HTTP message conversion</span><br><span class=\"line\">spring.http.converters.preferred-json-mapper=jackson # Preferred JSON mapper to use for HTTP message conversion. Set to \"gson\" to force the use of Gson when both it and Jackson are on the classpath.</span><br><span class=\"line\"></span><br><span class=\"line\"># HTTP encoding (HttpEncodingProperties)</span><br><span class=\"line\">spring.http.encoding.charset=UTF-8 # Charset of HTTP requests and responses. Added to the \"Content-Type\" header if not set explicitly.</span><br><span class=\"line\">spring.http.encoding.enabled=true # Enable http encoding support.</span><br><span class=\"line\">spring.http.encoding.force= # Force the encoding to the configured charset on HTTP requests and responses.</span><br><span class=\"line\">spring.http.encoding.force-request= # Force the encoding to the configured charset on HTTP requests. Defaults to true when \"force\" has not been specified.</span><br><span class=\"line\">spring.http.encoding.force-response= # Force the encoding to the configured charset on HTTP responses.</span><br><span class=\"line\"></span><br><span class=\"line\"># MULTIPART (MultipartProperties)</span><br><span class=\"line\">spring.http.multipart.enabled=true # Enable support of multi-part uploads.</span><br><span class=\"line\">spring.http.multipart.file-size-threshold=0 # Threshold after which files will be written to disk. Values can use the suffixed \"MB\" or \"KB\" to indicate a Megabyte or Kilobyte size.</span><br><span class=\"line\">spring.http.multipart.location= # Intermediate location of uploaded files.</span><br><span class=\"line\">spring.http.multipart.max-file-size=1Mb # Max file size. Values can use the suffixed \"MB\" or \"KB\" to indicate a Megabyte or Kilobyte size.</span><br><span class=\"line\">spring.http.multipart.max-request-size=10Mb # Max request size. Values can use the suffixed \"MB\" or \"KB\" to indicate a Megabyte or Kilobyte size.</span><br><span class=\"line\"></span><br><span class=\"line\"># JACKSON (JacksonProperties)</span><br><span class=\"line\">spring.jackson.date-format= # Date format string or a fully-qualified date format class name. For instance `yyyy-MM-dd HH:mm:ss`.</span><br><span class=\"line\">spring.jackson.default-property-inclusion= # Controls the inclusion of properties during serialization.</span><br><span class=\"line\">spring.jackson.deserialization.*= # Jackson on/off features that affect the way Java objects are deserialized.</span><br><span class=\"line\">spring.jackson.generator.*= # Jackson on/off features for generators.</span><br><span class=\"line\">spring.jackson.joda-date-time-format= # Joda date time format string. If not configured, \"date-format\" will be used as a fallback if it is configured with a format string.</span><br><span class=\"line\">spring.jackson.locale= # Locale used for formatting.</span><br><span class=\"line\">spring.jackson.mapper.*= # Jackson general purpose on/off features.</span><br><span class=\"line\">spring.jackson.parser.*= # Jackson on/off features for parsers.</span><br><span class=\"line\">spring.jackson.property-naming-strategy= # One of the constants on Jackson's PropertyNamingStrategy. Can also be a fully-qualified class name of a PropertyNamingStrategy subclass.</span><br><span class=\"line\">spring.jackson.serialization.*= # Jackson on/off features that affect the way Java objects are serialized.</span><br><span class=\"line\">spring.jackson.serialization-inclusion= # Controls the inclusion of properties during serialization. Configured with one of the values in Jackson's JsonInclude.Include enumeration.</span><br><span class=\"line\">spring.jackson.time-zone= # Time zone used when formatting dates. For instance `America/Los_Angeles`</span><br><span class=\"line\"></span><br><span class=\"line\"># JERSEY (JerseyProperties)</span><br><span class=\"line\">spring.jersey.application-path= # Path that serves as the base URI for the application. Overrides the value of \"@ApplicationPath\" if specified.</span><br><span class=\"line\">spring.jersey.filter.order=0 # Jersey filter chain order.</span><br><span class=\"line\">spring.jersey.init.*= # Init parameters to pass to Jersey via the servlet or filter.</span><br><span class=\"line\">spring.jersey.servlet.load-on-startup=-1 # Load on startup priority of the Jersey servlet.</span><br><span class=\"line\">spring.jersey.type=servlet # Jersey integration type. Can be either \"servlet\" or \"filter\".</span><br><span class=\"line\"></span><br><span class=\"line\"># SPRING MOBILE DEVICE VIEWS (DeviceDelegatingViewResolverAutoConfiguration)</span><br><span class=\"line\">spring.mobile.devicedelegatingviewresolver.enable-fallback=false # Enable support for fallback resolution.</span><br><span class=\"line\">spring.mobile.devicedelegatingviewresolver.enabled=false # Enable device view resolver.</span><br><span class=\"line\">spring.mobile.devicedelegatingviewresolver.mobile-prefix=mobile/ # Prefix that gets prepended to view names for mobile devices.</span><br><span class=\"line\">spring.mobile.devicedelegatingviewresolver.mobile-suffix= # Suffix that gets appended to view names for mobile devices.</span><br><span class=\"line\">spring.mobile.devicedelegatingviewresolver.normal-prefix= # Prefix that gets prepended to view names for normal devices.</span><br><span class=\"line\">spring.mobile.devicedelegatingviewresolver.normal-suffix= # Suffix that gets appended to view names for normal devices.</span><br><span class=\"line\">spring.mobile.devicedelegatingviewresolver.tablet-prefix=tablet/ # Prefix that gets prepended to view names for tablet devices.</span><br><span class=\"line\">spring.mobile.devicedelegatingviewresolver.tablet-suffix= # Suffix that gets appended to view names for tablet devices.</span><br><span class=\"line\"></span><br><span class=\"line\"># SPRING MOBILE SITE PREFERENCE (SitePreferenceAutoConfiguration)</span><br><span class=\"line\">spring.mobile.sitepreference.enabled=true # Enable SitePreferenceHandler.</span><br><span class=\"line\"></span><br><span class=\"line\"># MUSTACHE TEMPLATES (MustacheAutoConfiguration)</span><br><span class=\"line\">spring.mustache.allow-request-override= # Set whether HttpServletRequest attributes are allowed to override (hide) controller generated model attributes of the same name.</span><br><span class=\"line\">spring.mustache.allow-session-override= # Set whether HttpSession attributes are allowed to override (hide) controller generated model attributes of the same name.</span><br><span class=\"line\">spring.mustache.cache= # Enable template caching.</span><br><span class=\"line\">spring.mustache.charset= # Template encoding.</span><br><span class=\"line\">spring.mustache.check-template-location= # Check that the templates location exists.</span><br><span class=\"line\">spring.mustache.content-type= # Content-Type value.</span><br><span class=\"line\">spring.mustache.enabled= # Enable MVC view resolution for this technology.</span><br><span class=\"line\">spring.mustache.expose-request-attributes= # Set whether all request attributes should be added to the model prior to merging with the template.</span><br><span class=\"line\">spring.mustache.expose-session-attributes= # Set whether all HttpSession attributes should be added to the model prior to merging with the template.</span><br><span class=\"line\">spring.mustache.expose-spring-macro-helpers= # Set whether to expose a RequestContext for use by Spring's macro library, under the name \"springMacroRequestContext\".</span><br><span class=\"line\">spring.mustache.prefix=classpath:/templates/ # Prefix to apply to template names.</span><br><span class=\"line\">spring.mustache.request-context-attribute= # Name of the RequestContext attribute for all views.</span><br><span class=\"line\">spring.mustache.suffix=.html # Suffix to apply to template names.</span><br><span class=\"line\">spring.mustache.view-names= # White list of view names that can be resolved.</span><br><span class=\"line\"></span><br><span class=\"line\"># SPRING MVC (WebMvcProperties)</span><br><span class=\"line\">spring.mvc.async.request-timeout= # Amount of time (in milliseconds) before asynchronous request handling times out.</span><br><span class=\"line\">spring.mvc.date-format= # Date format to use. For instance `dd/MM/yyyy`.</span><br><span class=\"line\">spring.mvc.dispatch-trace-request=false # Dispatch TRACE requests to the FrameworkServlet doService method.</span><br><span class=\"line\">spring.mvc.dispatch-options-request=true # Dispatch OPTIONS requests to the FrameworkServlet doService method.</span><br><span class=\"line\">spring.mvc.favicon.enabled=true # Enable resolution of favicon.ico.</span><br><span class=\"line\">spring.mvc.ignore-default-model-on-redirect=true # If the content of the \"default\" model should be ignored during redirect scenarios.</span><br><span class=\"line\">spring.mvc.locale= # Locale to use. By default, this locale is overridden by the \"Accept-Language\" header.</span><br><span class=\"line\">spring.mvc.locale-resolver=accept-header # Define how the locale should be resolved.</span><br><span class=\"line\">spring.mvc.log-resolved-exception=false # Enable warn logging of exceptions resolved by a \"HandlerExceptionResolver\".</span><br><span class=\"line\">spring.mvc.media-types.*= # Maps file extensions to media types for content negotiation.</span><br><span class=\"line\">spring.mvc.message-codes-resolver-format= # Formatting strategy for message codes. For instance `PREFIX_ERROR_CODE`.</span><br><span class=\"line\">spring.mvc.servlet.load-on-startup=-1 # Load on startup priority of the Spring Web Services servlet.</span><br><span class=\"line\">spring.mvc.static-path-pattern=/** # Path pattern used for static resources.</span><br><span class=\"line\">spring.mvc.throw-exception-if-no-handler-found=false # If a \"NoHandlerFoundException\" should be thrown if no Handler was found to process a request.</span><br><span class=\"line\">spring.mvc.view.prefix= # Spring MVC view prefix.</span><br><span class=\"line\">spring.mvc.view.suffix= # Spring MVC view suffix.</span><br><span class=\"line\"></span><br><span class=\"line\"># SPRING RESOURCES HANDLING (ResourceProperties)</span><br><span class=\"line\">spring.resources.add-mappings=true # Enable default resource handling.</span><br><span class=\"line\">spring.resources.cache-period= # Cache period for the resources served by the resource handler, in seconds.</span><br><span class=\"line\">spring.resources.chain.cache=true # Enable caching in the Resource chain.</span><br><span class=\"line\">spring.resources.chain.enabled= # Enable the Spring Resource Handling chain. Disabled by default unless at least one strategy has been enabled.</span><br><span class=\"line\">spring.resources.chain.gzipped=false # Enable resolution of already gzipped resources.</span><br><span class=\"line\">spring.resources.chain.html-application-cache=false # Enable HTML5 application cache manifest rewriting.</span><br><span class=\"line\">spring.resources.chain.strategy.content.enabled=false # Enable the content Version Strategy.</span><br><span class=\"line\">spring.resources.chain.strategy.content.paths=/** # Comma-separated list of patterns to apply to the Version Strategy.</span><br><span class=\"line\">spring.resources.chain.strategy.fixed.enabled=false # Enable the fixed Version Strategy.</span><br><span class=\"line\">spring.resources.chain.strategy.fixed.paths=/** # Comma-separated list of patterns to apply to the Version Strategy.</span><br><span class=\"line\">spring.resources.chain.strategy.fixed.version= # Version string to use for the Version Strategy.</span><br><span class=\"line\">spring.resources.static-locations=classpath:/META-INF/resources/,classpath:/resources/,classpath:/static/,classpath:/public/ # Locations of static resources.</span><br><span class=\"line\"></span><br><span class=\"line\"># SPRING SESSION (SessionProperties)</span><br><span class=\"line\">spring.session.hazelcast.map-name=spring:session:sessions # Name of the map used to store sessions.</span><br><span class=\"line\">spring.session.jdbc.initializer.enabled=true # Create the required session tables on startup if necessary.</span><br><span class=\"line\">spring.session.jdbc.schema=classpath:org/springframework/session/jdbc/schema-@@platform@@.sql # Path to the SQL file to use to initialize the database schema.</span><br><span class=\"line\">spring.session.jdbc.table-name=SPRING_SESSION # Name of database table used to store sessions.</span><br><span class=\"line\">spring.session.mongo.collection-name=sessions # Collection name used to store sessions.</span><br><span class=\"line\">spring.session.redis.flush-mode= # Flush mode for the Redis sessions.</span><br><span class=\"line\">spring.session.redis.namespace= # Namespace for keys used to store sessions.</span><br><span class=\"line\">spring.session.store-type= # Session store type.</span><br><span class=\"line\"></span><br><span class=\"line\"># SPRING SOCIAL (SocialWebAutoConfiguration)</span><br><span class=\"line\">spring.social.auto-connection-views=false # Enable the connection status view for supported providers.</span><br><span class=\"line\"></span><br><span class=\"line\"># SPRING SOCIAL FACEBOOK (FacebookAutoConfiguration)</span><br><span class=\"line\">spring.social.facebook.app-id= # your application's Facebook App ID</span><br><span class=\"line\">spring.social.facebook.app-secret= # your application's Facebook App Secret</span><br><span class=\"line\"></span><br><span class=\"line\"># SPRING SOCIAL LINKEDIN (LinkedInAutoConfiguration)</span><br><span class=\"line\">spring.social.linkedin.app-id= # your application's LinkedIn App ID</span><br><span class=\"line\">spring.social.linkedin.app-secret= # your application's LinkedIn App Secret</span><br><span class=\"line\"></span><br><span class=\"line\"># SPRING SOCIAL TWITTER (TwitterAutoConfiguration)</span><br><span class=\"line\">spring.social.twitter.app-id= # your application's Twitter App ID</span><br><span class=\"line\">spring.social.twitter.app-secret= # your application's Twitter App Secret</span><br><span class=\"line\"></span><br><span class=\"line\"># THYMELEAF (ThymeleafAutoConfiguration)</span><br><span class=\"line\">spring.thymeleaf.cache=true # Enable template caching.</span><br><span class=\"line\">spring.thymeleaf.check-template-location=true # Check that the templates location exists.</span><br><span class=\"line\">spring.thymeleaf.content-type=text/html # Content-Type value.</span><br><span class=\"line\">spring.thymeleaf.enabled=true # Enable MVC Thymeleaf view resolution.</span><br><span class=\"line\">spring.thymeleaf.encoding=UTF-8 # Template encoding.</span><br><span class=\"line\">spring.thymeleaf.excluded-view-names= # Comma-separated list of view names that should be excluded from resolution.</span><br><span class=\"line\">spring.thymeleaf.mode=HTML5 # Template mode to be applied to templates. See also StandardTemplateModeHandlers.</span><br><span class=\"line\">spring.thymeleaf.prefix=classpath:/templates/ # Prefix that gets prepended to view names when building a URL.</span><br><span class=\"line\">spring.thymeleaf.suffix=.html # Suffix that gets appended to view names when building a URL.</span><br><span class=\"line\">spring.thymeleaf.template-resolver-order= # Order of the template resolver in the chain.</span><br><span class=\"line\">spring.thymeleaf.view-names= # Comma-separated list of view names that can be resolved.</span><br><span class=\"line\"></span><br><span class=\"line\"># VELOCITY TEMPLATES (VelocityAutoConfiguration)</span><br><span class=\"line\">spring.velocity.allow-request-override=false # Set whether HttpServletRequest attributes are allowed to override (hide) controller generated model attributes of the same name.</span><br><span class=\"line\">spring.velocity.allow-session-override=false # Set whether HttpSession attributes are allowed to override (hide) controller generated model attributes of the same name.</span><br><span class=\"line\">spring.velocity.cache= # Enable template caching.</span><br><span class=\"line\">spring.velocity.charset=UTF-8 # Template encoding.</span><br><span class=\"line\">spring.velocity.check-template-location=true # Check that the templates location exists.</span><br><span class=\"line\">spring.velocity.content-type=text/html # Content-Type value.</span><br><span class=\"line\">spring.velocity.date-tool-attribute= # Name of the DateTool helper object to expose in the Velocity context of the view.</span><br><span class=\"line\">spring.velocity.enabled=true # Enable MVC view resolution for this technology.</span><br><span class=\"line\">spring.velocity.expose-request-attributes=false # Set whether all request attributes should be added to the model prior to merging with the template.</span><br><span class=\"line\">spring.velocity.expose-session-attributes=false # Set whether all HttpSession attributes should be added to the model prior to merging with the template.</span><br><span class=\"line\">spring.velocity.expose-spring-macro-helpers=true # Set whether to expose a RequestContext for use by Spring's macro library, under the name \"springMacroRequestContext\".</span><br><span class=\"line\">spring.velocity.number-tool-attribute= # Name of the NumberTool helper object to expose in the Velocity context of the view.</span><br><span class=\"line\">spring.velocity.prefer-file-system-access=true # Prefer file system access for template loading. File system access enables hot detection of template changes.</span><br><span class=\"line\">spring.velocity.prefix= # Prefix that gets prepended to view names when building a URL.</span><br><span class=\"line\">spring.velocity.properties.*= # Additional velocity properties.</span><br><span class=\"line\">spring.velocity.request-context-attribute= # Name of the RequestContext attribute for all views.</span><br><span class=\"line\">spring.velocity.resource-loader-path=classpath:/templates/ # Template path.</span><br><span class=\"line\">spring.velocity.suffix=.vm # Suffix that gets appended to view names when building a URL.</span><br><span class=\"line\">spring.velocity.toolbox-config-location= # Velocity Toolbox config location. For instance `/WEB-INF/toolbox.xml`</span><br><span class=\"line\">spring.velocity.view-names= # White list of view names that can be resolved.</span><br><span class=\"line\"></span><br><span class=\"line\"># SPRING WEB SERVICES (WebServicesProperties)</span><br><span class=\"line\">spring.webservices.path=/services # Path that serves as the base URI for the services.</span><br><span class=\"line\">spring.webservices.servlet.init= # Servlet init parameters to pass to Spring Web Services.</span><br><span class=\"line\">spring.webservices.servlet.load-on-startup=-1 # Load on startup priority of the Spring Web Services servlet.</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"># ----------------------------------------</span><br><span class=\"line\"># SECURITY PROPERTIES</span><br><span class=\"line\"># ----------------------------------------</span><br><span class=\"line\"># SECURITY (SecurityProperties)</span><br><span class=\"line\">security.basic.authorize-mode=role # Security authorize mode to apply.</span><br><span class=\"line\">security.basic.enabled=true # Enable basic authentication.</span><br><span class=\"line\">security.basic.path=/** # Comma-separated list of paths to secure.</span><br><span class=\"line\">security.basic.realm=Spring # HTTP basic realm name.</span><br><span class=\"line\">security.enable-csrf=false # Enable Cross Site Request Forgery support.</span><br><span class=\"line\">security.filter-order=0 # Security filter chain order.</span><br><span class=\"line\">security.filter-dispatcher-types=ASYNC, FORWARD, INCLUDE, REQUEST # Security filter chain dispatcher types.</span><br><span class=\"line\">security.headers.cache=true # Enable cache control HTTP headers.</span><br><span class=\"line\">security.headers.content-type=true # Enable \"X-Content-Type-Options\" header.</span><br><span class=\"line\">security.headers.frame=true # Enable \"X-Frame-Options\" header.</span><br><span class=\"line\">security.headers.hsts= # HTTP Strict Transport Security (HSTS) mode (none, domain, all).</span><br><span class=\"line\">security.headers.xss=true # Enable cross site scripting (XSS) protection.</span><br><span class=\"line\">security.ignored= # Comma-separated list of paths to exclude from the default secured paths.</span><br><span class=\"line\">security.require-ssl=false # Enable secure channel for all requests.</span><br><span class=\"line\">security.sessions=stateless # Session creation policy (always, never, if_required, stateless).</span><br><span class=\"line\">security.user.name=user # Default user name.</span><br><span class=\"line\">security.user.password= # Password for the default user name. A random password is logged on startup by default.</span><br><span class=\"line\">security.user.role=USER # Granted roles for the default user name.</span><br><span class=\"line\"></span><br><span class=\"line\"># SECURITY OAUTH2 CLIENT (OAuth2ClientProperties</span><br><span class=\"line\">security.oauth2.client.client-id= # OAuth2 client id.</span><br><span class=\"line\">security.oauth2.client.client-secret= # OAuth2 client secret. A random secret is generated by default</span><br><span class=\"line\"></span><br><span class=\"line\"># SECURITY OAUTH2 RESOURCES (ResourceServerProperties</span><br><span class=\"line\">security.oauth2.resource.id= # Identifier of the resource.</span><br><span class=\"line\">security.oauth2.resource.jwt.key-uri= # The URI of the JWT token. Can be set if the value is not available and the key is public.</span><br><span class=\"line\">security.oauth2.resource.jwt.key-value= # The verification key of the JWT token. Can either be a symmetric secret or PEM-encoded RSA public key.</span><br><span class=\"line\">security.oauth2.resource.prefer-token-info=true # Use the token info, can be set to false to use the user info.</span><br><span class=\"line\">security.oauth2.resource.service-id=resource #</span><br><span class=\"line\">security.oauth2.resource.token-info-uri= # URI of the token decoding endpoint.</span><br><span class=\"line\">security.oauth2.resource.token-type= # The token type to send when using the userInfoUri.</span><br><span class=\"line\">security.oauth2.resource.user-info-uri= # URI of the user endpoint.</span><br><span class=\"line\"></span><br><span class=\"line\"># SECURITY OAUTH2 SSO (OAuth2SsoProperties</span><br><span class=\"line\">security.oauth2.sso.filter-order= # Filter order to apply if not providing an explicit WebSecurityConfigurerAdapter</span><br><span class=\"line\">security.oauth2.sso.login-path=/login # Path to the login page, i.e. the one that triggers the redirect to the OAuth2 Authorization Server</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"># ----------------------------------------</span><br><span class=\"line\"># DATA PROPERTIES</span><br><span class=\"line\"># ----------------------------------------</span><br><span class=\"line\"></span><br><span class=\"line\"># FLYWAY (FlywayProperties)</span><br><span class=\"line\">flyway.baseline-description= #</span><br><span class=\"line\">flyway.baseline-version=1 # version to start migration</span><br><span class=\"line\">flyway.baseline-on-migrate= #</span><br><span class=\"line\">flyway.check-location=false # Check that migration scripts location exists.</span><br><span class=\"line\">flyway.clean-on-validation-error= #</span><br><span class=\"line\">flyway.enabled=true # Enable flyway.</span><br><span class=\"line\">flyway.encoding= #</span><br><span class=\"line\">flyway.ignore-failed-future-migration= #</span><br><span class=\"line\">flyway.init-sqls= # SQL statements to execute to initialize a connection immediately after obtaining it.</span><br><span class=\"line\">flyway.locations=classpath:db/migration # locations of migrations scripts</span><br><span class=\"line\">flyway.out-of-order= #</span><br><span class=\"line\">flyway.password= # JDBC password if you want Flyway to create its own DataSource</span><br><span class=\"line\">flyway.placeholder-prefix= #</span><br><span class=\"line\">flyway.placeholder-replacement= #</span><br><span class=\"line\">flyway.placeholder-suffix= #</span><br><span class=\"line\">flyway.placeholders.*= #</span><br><span class=\"line\">flyway.schemas= # schemas to update</span><br><span class=\"line\">flyway.sql-migration-prefix=V #</span><br><span class=\"line\">flyway.sql-migration-separator= #</span><br><span class=\"line\">flyway.sql-migration-suffix=.sql #</span><br><span class=\"line\">flyway.table= #</span><br><span class=\"line\">flyway.url= # JDBC url of the database to migrate. If not set, the primary configured data source is used.</span><br><span class=\"line\">flyway.user= # Login user of the database to migrate.</span><br><span class=\"line\">flyway.validate-on-migrate= #</span><br><span class=\"line\"></span><br><span class=\"line\"># LIQUIBASE (LiquibaseProperties)</span><br><span class=\"line\">liquibase.change-log=classpath:/db/changelog/db.changelog-master.yaml # Change log configuration path.</span><br><span class=\"line\">liquibase.check-change-log-location=true # Check the change log location exists.</span><br><span class=\"line\">liquibase.contexts= # Comma-separated list of runtime contexts to use.</span><br><span class=\"line\">liquibase.default-schema= # Default database schema.</span><br><span class=\"line\">liquibase.drop-first=false # Drop the database schema first.</span><br><span class=\"line\">liquibase.enabled=true # Enable liquibase support.</span><br><span class=\"line\">liquibase.labels= # Comma-separated list of runtime labels to use.</span><br><span class=\"line\">liquibase.parameters.*= # Change log parameters.</span><br><span class=\"line\">liquibase.password= # Login password of the database to migrate.</span><br><span class=\"line\">liquibase.rollback-file= # File to which rollback SQL will be written when an update is performed.</span><br><span class=\"line\">liquibase.url= # JDBC url of the database to migrate. If not set, the primary configured data source is used.</span><br><span class=\"line\">liquibase.user= # Login user of the database to migrate.</span><br><span class=\"line\"></span><br><span class=\"line\"># COUCHBASE (CouchbaseProperties)</span><br><span class=\"line\">spring.couchbase.bootstrap-hosts= # Couchbase nodes (host or IP address) to bootstrap from.</span><br><span class=\"line\">spring.couchbase.bucket.name=default # Name of the bucket to connect to.</span><br><span class=\"line\">spring.couchbase.bucket.password=  # Password of the bucket.</span><br><span class=\"line\">spring.couchbase.env.endpoints.key-value=1 # Number of sockets per node against the Key/value service.</span><br><span class=\"line\">spring.couchbase.env.endpoints.query=1 # Number of sockets per node against the Query (N1QL) service.</span><br><span class=\"line\">spring.couchbase.env.endpoints.view=1 # Number of sockets per node against the view service.</span><br><span class=\"line\">spring.couchbase.env.ssl.enabled= # Enable SSL support. Enabled automatically if a \"keyStore\" is provided unless specified otherwise.</span><br><span class=\"line\">spring.couchbase.env.ssl.key-store= # Path to the JVM key store that holds the certificates.</span><br><span class=\"line\">spring.couchbase.env.ssl.key-store-password= # Password used to access the key store.</span><br><span class=\"line\">spring.couchbase.env.timeouts.connect=5000 # Bucket connections timeout in milliseconds.</span><br><span class=\"line\">spring.couchbase.env.timeouts.key-value=2500 # Blocking operations performed on a specific key timeout in milliseconds.</span><br><span class=\"line\">spring.couchbase.env.timeouts.query=7500 # N1QL query operations timeout in milliseconds.</span><br><span class=\"line\">spring.couchbase.env.timeouts.socket-connect=1000 # Socket connect connections timeout in milliseconds.</span><br><span class=\"line\">spring.couchbase.env.timeouts.view=7500 # Regular and geospatial view operations timeout in milliseconds.</span><br><span class=\"line\"></span><br><span class=\"line\"># DAO (PersistenceExceptionTranslationAutoConfiguration)</span><br><span class=\"line\">spring.dao.exceptiontranslation.enabled=true # Enable the PersistenceExceptionTranslationPostProcessor.</span><br><span class=\"line\"></span><br><span class=\"line\"># CASSANDRA (CassandraProperties)</span><br><span class=\"line\">spring.data.cassandra.cluster-name= # Name of the Cassandra cluster.</span><br><span class=\"line\">spring.data.cassandra.compression= # Compression supported by the Cassandra binary protocol.</span><br><span class=\"line\">spring.data.cassandra.connect-timeout-millis= # Socket option: connection time out.</span><br><span class=\"line\">spring.data.cassandra.consistency-level= # Queries consistency level.</span><br><span class=\"line\">spring.data.cassandra.contact-points=localhost # Comma-separated list of cluster node addresses.</span><br><span class=\"line\">spring.data.cassandra.fetch-size= # Queries default fetch size.</span><br><span class=\"line\">spring.data.cassandra.keyspace-name= # Keyspace name to use.</span><br><span class=\"line\">spring.data.cassandra.load-balancing-policy= # Class name of the load balancing policy.</span><br><span class=\"line\">spring.data.cassandra.port= # Port of the Cassandra server.</span><br><span class=\"line\">spring.data.cassandra.password= # Login password of the server.</span><br><span class=\"line\">spring.data.cassandra.read-timeout-millis= # Socket option: read time out.</span><br><span class=\"line\">spring.data.cassandra.reconnection-policy= # Reconnection policy class.</span><br><span class=\"line\">spring.data.cassandra.retry-policy= # Class name of the retry policy.</span><br><span class=\"line\">spring.data.cassandra.serial-consistency-level= # Queries serial consistency level.</span><br><span class=\"line\">spring.data.cassandra.schema-action= # Schema action to take at startup.</span><br><span class=\"line\">spring.data.cassandra.ssl=false # Enable SSL support.</span><br><span class=\"line\">spring.data.cassandra.username= # Login user of the server.</span><br><span class=\"line\"></span><br><span class=\"line\"># DATA COUCHBASE (CouchbaseDataProperties)</span><br><span class=\"line\">spring.data.couchbase.auto-index=false # Automatically create views and indexes.</span><br><span class=\"line\">spring.data.couchbase.consistency=read-your-own-writes # Consistency to apply by default on generated queries.</span><br><span class=\"line\">spring.data.couchbase.repositories.enabled=true # Enable Couchbase repositories.</span><br><span class=\"line\"></span><br><span class=\"line\"># ELASTICSEARCH (ElasticsearchProperties)</span><br><span class=\"line\">spring.data.elasticsearch.cluster-name=elasticsearch # Elasticsearch cluster name.</span><br><span class=\"line\">spring.data.elasticsearch.cluster-nodes= # Comma-separated list of cluster node addresses. If not specified, starts a client node.</span><br><span class=\"line\">spring.data.elasticsearch.properties.*= # Additional properties used to configure the client.</span><br><span class=\"line\">spring.data.elasticsearch.repositories.enabled=true # Enable Elasticsearch repositories.</span><br><span class=\"line\"></span><br><span class=\"line\"># MONGODB (MongoProperties)</span><br><span class=\"line\">spring.data.mongodb.authentication-database= # Authentication database name.</span><br><span class=\"line\">spring.data.mongodb.database=test # Database name.</span><br><span class=\"line\">spring.data.mongodb.field-naming-strategy= # Fully qualified name of the FieldNamingStrategy to use.</span><br><span class=\"line\">spring.data.mongodb.grid-fs-database= # GridFS database name.</span><br><span class=\"line\">spring.data.mongodb.host=localhost # Mongo server host.</span><br><span class=\"line\">spring.data.mongodb.password= # Login password of the mongo server.</span><br><span class=\"line\">spring.data.mongodb.port=27017 # Mongo server port.</span><br><span class=\"line\">spring.data.mongodb.repositories.enabled=true # Enable Mongo repositories.</span><br><span class=\"line\">spring.data.mongodb.uri=mongodb://localhost/test # Mongo database URI. When set, host and port are ignored.</span><br><span class=\"line\">spring.data.mongodb.username= # Login user of the mongo server.</span><br><span class=\"line\"></span><br><span class=\"line\"># DATA REDIS</span><br><span class=\"line\">spring.data.redis.repositories.enabled=true # Enable Redis repositories.</span><br><span class=\"line\"></span><br><span class=\"line\"># NEO4J (Neo4jProperties)</span><br><span class=\"line\">spring.data.neo4j.compiler= # Compiler to use.</span><br><span class=\"line\">spring.data.neo4j.embedded.enabled=true # Enable embedded mode if the embedded driver is available.</span><br><span class=\"line\">spring.data.neo4j.password= # Login password of the server.</span><br><span class=\"line\">spring.data.neo4j.repositories.enabled=true # Enable Neo4j repositories.</span><br><span class=\"line\">spring.data.neo4j.session.scope=singleton # Scope (lifetime) of the session.</span><br><span class=\"line\">spring.data.neo4j.uri= # URI used by the driver. Auto-detected by default.</span><br><span class=\"line\">spring.data.neo4j.username= # Login user of the server.</span><br><span class=\"line\"></span><br><span class=\"line\"># DATA REST (RepositoryRestProperties)</span><br><span class=\"line\">spring.data.rest.base-path= # Base path to be used by Spring Data REST to expose repository resources.</span><br><span class=\"line\">spring.data.rest.default-page-size= # Default size of pages.</span><br><span class=\"line\">spring.data.rest.enable-enum-translation= # Enable enum value translation via the Spring Data REST default resource bundle.</span><br><span class=\"line\">spring.data.rest.limit-param-name= # Name of the URL query string parameter that indicates how many results to return at once.</span><br><span class=\"line\">spring.data.rest.max-page-size= # Maximum size of pages.</span><br><span class=\"line\">spring.data.rest.page-param-name= # Name of the URL query string parameter that indicates what page to return.</span><br><span class=\"line\">spring.data.rest.return-body-on-create= # Return a response body after creating an entity.</span><br><span class=\"line\">spring.data.rest.return-body-on-update= # Return a response body after updating an entity.</span><br><span class=\"line\">spring.data.rest.sort-param-name= # Name of the URL query string parameter that indicates what direction to sort results.</span><br><span class=\"line\"></span><br><span class=\"line\"># SOLR (SolrProperties)</span><br><span class=\"line\">spring.data.solr.host=http://127.0.0.1:8983/solr # Solr host. Ignored if \"zk-host\" is set.</span><br><span class=\"line\">spring.data.solr.repositories.enabled=true # Enable Solr repositories.</span><br><span class=\"line\">spring.data.solr.zk-host= # ZooKeeper host address in the form HOST:PORT.</span><br><span class=\"line\"></span><br><span class=\"line\"># DATASOURCE (DataSourceAutoConfiguration &amp; DataSourceProperties)</span><br><span class=\"line\">spring.datasource.continue-on-error=false # Do not stop if an error occurs while initializing the database.</span><br><span class=\"line\">spring.datasource.data= # Data (DML) script resource reference.</span><br><span class=\"line\">spring.datasource.data-username= # User of the database to execute DML scripts (if different).</span><br><span class=\"line\">spring.datasource.data-password= # Password of the database to execute DML scripts (if different).</span><br><span class=\"line\">spring.datasource.dbcp.*= # Commons DBCP specific settings</span><br><span class=\"line\">spring.datasource.dbcp2.*= # Commons DBCP2 specific settings</span><br><span class=\"line\">spring.datasource.driver-class-name= # Fully qualified name of the JDBC driver. Auto-detected based on the URL by default.</span><br><span class=\"line\">spring.datasource.hikari.*= # Hikari specific settings</span><br><span class=\"line\">spring.datasource.initialize=true # Populate the database using 'data.sql'.</span><br><span class=\"line\">spring.datasource.jmx-enabled=false # Enable JMX support (if provided by the underlying pool).</span><br><span class=\"line\">spring.datasource.jndi-name= # JNDI location of the datasource. Class, url, username &amp; password are ignored when set.</span><br><span class=\"line\">spring.datasource.name=testdb # Name of the datasource.</span><br><span class=\"line\">spring.datasource.password= # Login password of the database.</span><br><span class=\"line\">spring.datasource.platform=all # Platform to use in the schema resource (schema-$&#123;platform&#125;.sql).</span><br><span class=\"line\">spring.datasource.schema= # Schema (DDL) script resource reference.</span><br><span class=\"line\">spring.datasource.schema-username= # User of the database to execute DDL scripts (if different).</span><br><span class=\"line\">spring.datasource.schema-password= # Password of the database to execute DDL scripts (if different).</span><br><span class=\"line\">spring.datasource.separator=; # Statement separator in SQL initialization scripts.</span><br><span class=\"line\">spring.datasource.sql-script-encoding= # SQL scripts encoding.</span><br><span class=\"line\">spring.datasource.tomcat.*= # Tomcat datasource specific settings</span><br><span class=\"line\">spring.datasource.type= # Fully qualified name of the connection pool implementation to use. By default, it is auto-detected from the classpath.</span><br><span class=\"line\">spring.datasource.url= # JDBC url of the database.</span><br><span class=\"line\">spring.datasource.username=</span><br><span class=\"line\"></span><br><span class=\"line\"># JEST (Elasticsearch HTTP client) (JestProperties)</span><br><span class=\"line\">spring.elasticsearch.jest.connection-timeout=3000 # Connection timeout in milliseconds.</span><br><span class=\"line\">spring.elasticsearch.jest.password= # Login password.</span><br><span class=\"line\">spring.elasticsearch.jest.proxy.host= # Proxy host the HTTP client should use.</span><br><span class=\"line\">spring.elasticsearch.jest.proxy.port= # Proxy port the HTTP client should use.</span><br><span class=\"line\">spring.elasticsearch.jest.read-timeout=3000 # Read timeout in milliseconds.</span><br><span class=\"line\">spring.elasticsearch.jest.uris=http://localhost:9200 # Comma-separated list of the Elasticsearch instances to use.</span><br><span class=\"line\">spring.elasticsearch.jest.username= # Login user.</span><br><span class=\"line\"></span><br><span class=\"line\"># H2 Web Console (H2ConsoleProperties)</span><br><span class=\"line\">spring.h2.console.enabled=false # Enable the console.</span><br><span class=\"line\">spring.h2.console.path=/h2-console # Path at which the console will be available.</span><br><span class=\"line\">spring.h2.console.settings.trace=false # Enable trace output.</span><br><span class=\"line\">spring.h2.console.settings.web-allow-others=false # Enable remote access.</span><br><span class=\"line\"></span><br><span class=\"line\"># JOOQ (JooqAutoConfiguration)</span><br><span class=\"line\">spring.jooq.sql-dialect= # SQLDialect JOOQ used when communicating with the configured datasource. For instance `POSTGRES`</span><br><span class=\"line\"></span><br><span class=\"line\"># JPA (JpaBaseConfiguration, HibernateJpaAutoConfiguration)</span><br><span class=\"line\">spring.data.jpa.repositories.enabled=true # Enable JPA repositories.</span><br><span class=\"line\">spring.jpa.database= # Target database to operate on, auto-detected by default. Can be alternatively set using the \"databasePlatform\" property.</span><br><span class=\"line\">spring.jpa.database-platform= # Name of the target database to operate on, auto-detected by default. Can be alternatively set using the \"Database\" enum.</span><br><span class=\"line\">spring.jpa.generate-ddl=false # Initialize the schema on startup.</span><br><span class=\"line\">spring.jpa.hibernate.ddl-auto= # DDL mode. This is actually a shortcut for the \"hibernate.hbm2ddl.auto\" property. Default to \"create-drop\" when using an embedded database, \"none\" otherwise.</span><br><span class=\"line\">spring.jpa.hibernate.naming.implicit-strategy= # Hibernate 5 implicit naming strategy fully qualified name.</span><br><span class=\"line\">spring.jpa.hibernate.naming.physical-strategy= # Hibernate 5 physical naming strategy fully qualified name.</span><br><span class=\"line\">spring.jpa.hibernate.naming.strategy= # Hibernate 4 naming strategy fully qualified name. Not supported with Hibernate 5.</span><br><span class=\"line\">spring.jpa.hibernate.use-new-id-generator-mappings= # Use Hibernate's newer IdentifierGenerator for AUTO, TABLE and SEQUENCE.</span><br><span class=\"line\">spring.jpa.open-in-view=true # Register OpenEntityManagerInViewInterceptor. Binds a JPA EntityManager to the thread for the entire processing of the request.</span><br><span class=\"line\">spring.jpa.properties.*= # Additional native properties to set on the JPA provider.</span><br><span class=\"line\">spring.jpa.show-sql=false # Enable logging of SQL statements.</span><br><span class=\"line\"></span><br><span class=\"line\"># JTA (JtaAutoConfiguration)</span><br><span class=\"line\">spring.jta.enabled=true # Enable JTA support.</span><br><span class=\"line\">spring.jta.log-dir= # Transaction logs directory.</span><br><span class=\"line\">spring.jta.transaction-manager-id= # Transaction manager unique identifier.</span><br><span class=\"line\"></span><br><span class=\"line\"># ATOMIKOS (AtomikosProperties)</span><br><span class=\"line\">spring.jta.atomikos.connectionfactory.borrow-connection-timeout=30 # Timeout, in seconds, for borrowing connections from the pool.</span><br><span class=\"line\">spring.jta.atomikos.connectionfactory.ignore-session-transacted-flag=true # Whether or not to ignore the transacted flag when creating session.</span><br><span class=\"line\">spring.jta.atomikos.connectionfactory.local-transaction-mode=false # Whether or not local transactions are desired.</span><br><span class=\"line\">spring.jta.atomikos.connectionfactory.maintenance-interval=60 # The time, in seconds, between runs of the pool's maintenance thread.</span><br><span class=\"line\">spring.jta.atomikos.connectionfactory.max-idle-time=60 # The time, in seconds, after which connections are cleaned up from the pool.</span><br><span class=\"line\">spring.jta.atomikos.connectionfactory.max-lifetime=0 # The time, in seconds, that a connection can be pooled for before being destroyed. 0 denotes no limit.</span><br><span class=\"line\">spring.jta.atomikos.connectionfactory.max-pool-size=1 # The maximum size of the pool.</span><br><span class=\"line\">spring.jta.atomikos.connectionfactory.min-pool-size=1 # The minimum size of the pool.</span><br><span class=\"line\">spring.jta.atomikos.connectionfactory.reap-timeout=0 # The reap timeout, in seconds, for borrowed connections. 0 denotes no limit.</span><br><span class=\"line\">spring.jta.atomikos.connectionfactory.unique-resource-name=jmsConnectionFactory # The unique name used to identify the resource during recovery.</span><br><span class=\"line\">spring.jta.atomikos.datasource.borrow-connection-timeout=30 # Timeout, in seconds, for borrowing connections from the pool.</span><br><span class=\"line\">spring.jta.atomikos.datasource.default-isolation-level= # Default isolation level of connections provided by the pool.</span><br><span class=\"line\">spring.jta.atomikos.datasource.login-timeout= # Timeout, in seconds, for establishing a database connection.</span><br><span class=\"line\">spring.jta.atomikos.datasource.maintenance-interval=60 # The time, in seconds, between runs of the pool's maintenance thread.</span><br><span class=\"line\">spring.jta.atomikos.datasource.max-idle-time=60 # The time, in seconds, after which connections are cleaned up from the pool.</span><br><span class=\"line\">spring.jta.atomikos.datasource.max-lifetime=0 # The time, in seconds, that a connection can be pooled for before being destroyed. 0 denotes no limit.</span><br><span class=\"line\">spring.jta.atomikos.datasource.max-pool-size=1 # The maximum size of the pool.</span><br><span class=\"line\">spring.jta.atomikos.datasource.min-pool-size=1 # The minimum size of the pool.</span><br><span class=\"line\">spring.jta.atomikos.datasource.reap-timeout=0 # The reap timeout, in seconds, for borrowed connections. 0 denotes no limit.</span><br><span class=\"line\">spring.jta.atomikos.datasource.test-query= # SQL query or statement used to validate a connection before returning it.</span><br><span class=\"line\">spring.jta.atomikos.datasource.unique-resource-name=dataSource # The unique name used to identify the resource during recovery.</span><br><span class=\"line\">spring.jta.atomikos.properties.checkpoint-interval=500 # Interval between checkpoints.</span><br><span class=\"line\">spring.jta.atomikos.properties.console-file-count=1 # Number of debug logs files that can be created.</span><br><span class=\"line\">spring.jta.atomikos.properties.console-file-limit=-1 # How many bytes can be stored at most in debug logs files.</span><br><span class=\"line\">spring.jta.atomikos.properties.console-file-name=tm.out # Debug logs file name.</span><br><span class=\"line\">spring.jta.atomikos.properties.console-log-level= # Console log level.</span><br><span class=\"line\">spring.jta.atomikos.properties.default-jta-timeout=10000 # Default timeout for JTA transactions.</span><br><span class=\"line\">spring.jta.atomikos.properties.enable-logging=true # Enable disk logging.</span><br><span class=\"line\">spring.jta.atomikos.properties.force-shutdown-on-vm-exit=false # Specify if a VM shutdown should trigger forced shutdown of the transaction core.</span><br><span class=\"line\">spring.jta.atomikos.properties.log-base-dir= # Directory in which the log files should be stored.</span><br><span class=\"line\">spring.jta.atomikos.properties.log-base-name=tmlog # Transactions log file base name.</span><br><span class=\"line\">spring.jta.atomikos.properties.max-actives=50 # Maximum number of active transactions.</span><br><span class=\"line\">spring.jta.atomikos.properties.max-timeout=300000 # Maximum timeout (in milliseconds) that can be allowed for transactions.</span><br><span class=\"line\">spring.jta.atomikos.properties.output-dir= # Directory in which to store the debug log files.</span><br><span class=\"line\">spring.jta.atomikos.properties.serial-jta-transactions=true # Specify if sub-transactions should be joined when possible.</span><br><span class=\"line\">spring.jta.atomikos.properties.service= # Transaction manager implementation that should be started.</span><br><span class=\"line\">spring.jta.atomikos.properties.threaded-two-phase-commit=true # Use different (and concurrent) threads for two-phase commit on the participating resources.</span><br><span class=\"line\">spring.jta.atomikos.properties.transaction-manager-unique-name= # Transaction manager's unique name.</span><br><span class=\"line\"></span><br><span class=\"line\"># BITRONIX</span><br><span class=\"line\">spring.jta.bitronix.connectionfactory.acquire-increment=1 # Number of connections to create when growing the pool.</span><br><span class=\"line\">spring.jta.bitronix.connectionfactory.acquisition-interval=1 # Time, in seconds, to wait before trying to acquire a connection again after an invalid connection was acquired.</span><br><span class=\"line\">spring.jta.bitronix.connectionfactory.acquisition-timeout=30 # Timeout, in seconds, for acquiring connections from the pool.</span><br><span class=\"line\">spring.jta.bitronix.connectionfactory.allow-local-transactions=true # Whether or not the transaction manager should allow mixing XA and non-XA transactions.</span><br><span class=\"line\">spring.jta.bitronix.connectionfactory.apply-transaction-timeout=false # Whether or not the transaction timeout should be set on the XAResource when it is enlisted.</span><br><span class=\"line\">spring.jta.bitronix.connectionfactory.automatic-enlisting-enabled=true # Whether or not resources should be enlisted and delisted automatically.</span><br><span class=\"line\">spring.jta.bitronix.connectionfactory.cache-producers-consumers=true # Whether or not produces and consumers should be cached.</span><br><span class=\"line\">spring.jta.bitronix.connectionfactory.defer-connection-release=true # Whether or not the provider can run many transactions on the same connection and supports transaction interleaving.</span><br><span class=\"line\">spring.jta.bitronix.connectionfactory.ignore-recovery-failures=false # Whether or not recovery failures should be ignored.</span><br><span class=\"line\">spring.jta.bitronix.connectionfactory.max-idle-time=60 # The time, in seconds, after which connections are cleaned up from the pool.</span><br><span class=\"line\">spring.jta.bitronix.connectionfactory.max-pool-size=10 # The maximum size of the pool. 0 denotes no limit.</span><br><span class=\"line\">spring.jta.bitronix.connectionfactory.min-pool-size=0 # The minimum size of the pool.</span><br><span class=\"line\">spring.jta.bitronix.connectionfactory.password= # The password to use to connect to the JMS provider.</span><br><span class=\"line\">spring.jta.bitronix.connectionfactory.share-transaction-connections=false #  Whether or not connections in the ACCESSIBLE state can be shared within the context of a transaction.</span><br><span class=\"line\">spring.jta.bitronix.connectionfactory.test-connections=true # Whether or not connections should be tested when acquired from the pool.</span><br><span class=\"line\">spring.jta.bitronix.connectionfactory.two-pc-ordering-position=1 # The position that this resource should take during two-phase commit (always first is Integer.MIN_VALUE, always last is Integer.MAX_VALUE).</span><br><span class=\"line\">spring.jta.bitronix.connectionfactory.unique-name=jmsConnectionFactory # The unique name used to identify the resource during recovery.</span><br><span class=\"line\">spring.jta.bitronix.connectionfactory.use-tm-join=true Whether or not TMJOIN should be used when starting XAResources.</span><br><span class=\"line\">spring.jta.bitronix.connectionfactory.user= # The user to use to connect to the JMS provider.</span><br><span class=\"line\">spring.jta.bitronix.datasource.acquire-increment=1 # Number of connections to create when growing the pool.</span><br><span class=\"line\">spring.jta.bitronix.datasource.acquisition-interval=1 # Time, in seconds, to wait before trying to acquire a connection again after an invalid connection was acquired.</span><br><span class=\"line\">spring.jta.bitronix.datasource.acquisition-timeout=30 # Timeout, in seconds, for acquiring connections from the pool.</span><br><span class=\"line\">spring.jta.bitronix.datasource.allow-local-transactions=true # Whether or not the transaction manager should allow mixing XA and non-XA transactions.</span><br><span class=\"line\">spring.jta.bitronix.datasource.apply-transaction-timeout=false # Whether or not the transaction timeout should be set on the XAResource when it is enlisted.</span><br><span class=\"line\">spring.jta.bitronix.datasource.automatic-enlisting-enabled=true # Whether or not resources should be enlisted and delisted automatically.</span><br><span class=\"line\">spring.jta.bitronix.datasource.cursor-holdability= # The default cursor holdability for connections.</span><br><span class=\"line\">spring.jta.bitronix.datasource.defer-connection-release=true # Whether or not the database can run many transactions on the same connection and supports transaction interleaving.</span><br><span class=\"line\">spring.jta.bitronix.datasource.enable-jdbc4-connection-test= # Whether or not Connection.isValid() is called when acquiring a connection from the pool.</span><br><span class=\"line\">spring.jta.bitronix.datasource.ignore-recovery-failures=false # Whether or not recovery failures should be ignored.</span><br><span class=\"line\">spring.jta.bitronix.datasource.isolation-level= # The default isolation level for connections.</span><br><span class=\"line\">spring.jta.bitronix.datasource.local-auto-commit= # The default auto-commit mode for local transactions.</span><br><span class=\"line\">spring.jta.bitronix.datasource.login-timeout= # Timeout, in seconds, for establishing a database connection.</span><br><span class=\"line\">spring.jta.bitronix.datasource.max-idle-time=60 # The time, in seconds, after which connections are cleaned up from the pool.</span><br><span class=\"line\">spring.jta.bitronix.datasource.max-pool-size=10 # The maximum size of the pool. 0 denotes no limit.</span><br><span class=\"line\">spring.jta.bitronix.datasource.min-pool-size=0 # The minimum size of the pool.</span><br><span class=\"line\">spring.jta.bitronix.datasource.prepared-statement-cache-size=0 # The target size of the prepared statement cache. 0 disables the cache.</span><br><span class=\"line\">spring.jta.bitronix.datasource.share-transaction-connections=false #  Whether or not connections in the ACCESSIBLE state can be shared within the context of a transaction.</span><br><span class=\"line\">spring.jta.bitronix.datasource.test-query= # SQL query or statement used to validate a connection before returning it.</span><br><span class=\"line\">spring.jta.bitronix.datasource.two-pc-ordering-position=1 # The position that this resource should take during two-phase commit (always first is Integer.MIN_VALUE, always last is Integer.MAX_VALUE).</span><br><span class=\"line\">spring.jta.bitronix.datasource.unique-name=dataSource # The unique name used to identify the resource during recovery.</span><br><span class=\"line\">spring.jta.bitronix.datasource.use-tm-join=true Whether or not TMJOIN should be used when starting XAResources.</span><br><span class=\"line\">spring.jta.bitronix.properties.allow-multiple-lrc=false # Allow multiple LRC resources to be enlisted into the same transaction.</span><br><span class=\"line\">spring.jta.bitronix.properties.asynchronous2-pc=false # Enable asynchronously execution of two phase commit.</span><br><span class=\"line\">spring.jta.bitronix.properties.background-recovery-interval-seconds=60 # Interval in seconds at which to run the recovery process in the background.</span><br><span class=\"line\">spring.jta.bitronix.properties.current-node-only-recovery=true # Recover only the current node.</span><br><span class=\"line\">spring.jta.bitronix.properties.debug-zero-resource-transaction=false # Log the creation and commit call stacks of transactions executed without a single enlisted resource.</span><br><span class=\"line\">spring.jta.bitronix.properties.default-transaction-timeout=60 # Default transaction timeout in seconds.</span><br><span class=\"line\">spring.jta.bitronix.properties.disable-jmx=false # Enable JMX support.</span><br><span class=\"line\">spring.jta.bitronix.properties.exception-analyzer= # Set the fully qualified name of the exception analyzer implementation to use.</span><br><span class=\"line\">spring.jta.bitronix.properties.filter-log-status=false # Enable filtering of logs so that only mandatory logs are written.</span><br><span class=\"line\">spring.jta.bitronix.properties.force-batching-enabled=true #  Set if disk forces are batched.</span><br><span class=\"line\">spring.jta.bitronix.properties.forced-write-enabled=true # Set if logs are forced to disk.</span><br><span class=\"line\">spring.jta.bitronix.properties.graceful-shutdown-interval=60 # Maximum amount of seconds the TM will wait for transactions to get done before aborting them at shutdown time.</span><br><span class=\"line\">spring.jta.bitronix.properties.jndi-transaction-synchronization-registry-name= # JNDI name of the TransactionSynchronizationRegistry.</span><br><span class=\"line\">spring.jta.bitronix.properties.jndi-user-transaction-name= # JNDI name of the UserTransaction.</span><br><span class=\"line\">spring.jta.bitronix.properties.journal=disk # Name of the journal. Can be 'disk', 'null' or a class name.</span><br><span class=\"line\">spring.jta.bitronix.properties.log-part1-filename=btm1.tlog # Name of the first fragment of the journal.</span><br><span class=\"line\">spring.jta.bitronix.properties.log-part2-filename=btm2.tlog # Name of the second fragment of the journal.</span><br><span class=\"line\">spring.jta.bitronix.properties.max-log-size-in-mb=2 # Maximum size in megabytes of the journal fragments.</span><br><span class=\"line\">spring.jta.bitronix.properties.resource-configuration-filename= # ResourceLoader configuration file name.</span><br><span class=\"line\">spring.jta.bitronix.properties.server-id= # ASCII ID that must uniquely identify this TM instance. Default to the machine's IP address.</span><br><span class=\"line\">spring.jta.bitronix.properties.skip-corrupted-logs=false # Skip corrupted transactions log entries.</span><br><span class=\"line\">spring.jta.bitronix.properties.warn-about-zero-resource-transaction=true # Log a warning for transactions executed without a single enlisted resource.</span><br><span class=\"line\"></span><br><span class=\"line\"># NARAYANA (NarayanaProperties)</span><br><span class=\"line\">spring.jta.narayana.default-timeout=60 # Transaction timeout in seconds.</span><br><span class=\"line\">spring.jta.narayana.expiry-scanners=com.arjuna.ats.internal.arjuna.recovery.ExpiredTransactionStatusManagerScanner # Comma-separated list of expiry scanners.</span><br><span class=\"line\">spring.jta.narayana.log-dir= # Transaction object store directory.</span><br><span class=\"line\">spring.jta.narayana.one-phase-commit=true # Enable one phase commit optimisation.</span><br><span class=\"line\">spring.jta.narayana.periodic-recovery-period=120 # Interval in which periodic recovery scans are performed in seconds.</span><br><span class=\"line\">spring.jta.narayana.recovery-backoff-period=10 # Back off period between first and second phases of the recovery scan in seconds.</span><br><span class=\"line\">spring.jta.narayana.recovery-db-pass= # Database password to be used by recovery manager.</span><br><span class=\"line\">spring.jta.narayana.recovery-db-user= # Database username to be used by recovery manager.</span><br><span class=\"line\">spring.jta.narayana.recovery-jms-pass= # JMS password to be used by recovery manager.</span><br><span class=\"line\">spring.jta.narayana.recovery-jms-user= # JMS username to be used by recovery manager.</span><br><span class=\"line\">spring.jta.narayana.recovery-modules= # Comma-separated list of recovery modules.</span><br><span class=\"line\">spring.jta.narayana.transaction-manager-id=1 # Unique transaction manager id.</span><br><span class=\"line\">spring.jta.narayana.xa-resource-orphan-filters= # Comma-separated list of orphan filters.</span><br><span class=\"line\"></span><br><span class=\"line\"># EMBEDDED MONGODB (EmbeddedMongoProperties)</span><br><span class=\"line\">spring.mongodb.embedded.features=SYNC_DELAY # Comma-separated list of features to enable.</span><br><span class=\"line\">spring.mongodb.embedded.storage.databaseDir= # Directory used for data storage.</span><br><span class=\"line\">spring.mongodb.embedded.storage.oplogSize= # Maximum size of the oplog in megabytes.</span><br><span class=\"line\">spring.mongodb.embedded.storage.replSetName= # Name of the replica set.</span><br><span class=\"line\">spring.mongodb.embedded.version=2.6.10 # Version of Mongo to use.</span><br><span class=\"line\"></span><br><span class=\"line\"># REDIS (RedisProperties)</span><br><span class=\"line\">spring.redis.cluster.max-redirects= # Maximum number of redirects to follow when executing commands across the cluster.</span><br><span class=\"line\">spring.redis.cluster.nodes= # Comma-separated list of \"host:port\" pairs to bootstrap from.</span><br><span class=\"line\">spring.redis.database=0 # Database index used by the connection factory.</span><br><span class=\"line\">spring.redis.host=localhost # Redis server host.</span><br><span class=\"line\">spring.redis.password= # Login password of the redis server.</span><br><span class=\"line\">spring.redis.pool.max-active=8 # Max number of connections that can be allocated by the pool at a given time. Use a negative value for no limit.</span><br><span class=\"line\">spring.redis.pool.max-idle=8 # Max number of \"idle\" connections in the pool. Use a negative value to indicate an unlimited number of idle connections.</span><br><span class=\"line\">spring.redis.pool.max-wait=-1 # Maximum amount of time (in milliseconds) a connection allocation should block before throwing an exception when the pool is exhausted. Use a negative value to block indefinitely.</span><br><span class=\"line\">spring.redis.pool.min-idle=0 # Target for the minimum number of idle connections to maintain in the pool. This setting only has an effect if it is positive.</span><br><span class=\"line\">spring.redis.port=6379 # Redis server port.</span><br><span class=\"line\">spring.redis.sentinel.master= # Name of Redis server.</span><br><span class=\"line\">spring.redis.sentinel.nodes= # Comma-separated list of host:port pairs.</span><br><span class=\"line\">spring.redis.timeout=0 # Connection timeout in milliseconds.</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"># ----------------------------------------</span><br><span class=\"line\"># INTEGRATION PROPERTIES</span><br><span class=\"line\"># ----------------------------------------</span><br><span class=\"line\"></span><br><span class=\"line\"># ACTIVEMQ (ActiveMQProperties)</span><br><span class=\"line\">spring.activemq.broker-url= # URL of the ActiveMQ broker. Auto-generated by default. For instance `tcp://localhost:61616`</span><br><span class=\"line\">spring.activemq.in-memory=true # Specify if the default broker URL should be in memory. Ignored if an explicit broker has been specified.</span><br><span class=\"line\">spring.activemq.password= # Login password of the broker.</span><br><span class=\"line\">spring.activemq.user= # Login user of the broker.</span><br><span class=\"line\">spring.activemq.packages.trust-all=false # Trust all packages.</span><br><span class=\"line\">spring.activemq.packages.trusted= # Comma-separated list of specific packages to trust (when not trusting all packages).</span><br><span class=\"line\">spring.activemq.pool.configuration.*= # See PooledConnectionFactory.</span><br><span class=\"line\">spring.activemq.pool.enabled=false # Whether a PooledConnectionFactory should be created instead of a regular ConnectionFactory.</span><br><span class=\"line\">spring.activemq.pool.expiry-timeout=0 # Connection expiration timeout in milliseconds.</span><br><span class=\"line\">spring.activemq.pool.idle-timeout=30000 # Connection idle timeout in milliseconds.</span><br><span class=\"line\">spring.activemq.pool.max-connections=1 # Maximum number of pooled connections.</span><br><span class=\"line\"></span><br><span class=\"line\"># ARTEMIS (ArtemisProperties)</span><br><span class=\"line\">spring.artemis.embedded.cluster-password= # Cluster password. Randomly generated on startup by default.</span><br><span class=\"line\">spring.artemis.embedded.data-directory= # Journal file directory. Not necessary if persistence is turned off.</span><br><span class=\"line\">spring.artemis.embedded.enabled=true # Enable embedded mode if the Artemis server APIs are available.</span><br><span class=\"line\">spring.artemis.embedded.persistent=false # Enable persistent store.</span><br><span class=\"line\">spring.artemis.embedded.queues= # Comma-separated list of queues to create on startup.</span><br><span class=\"line\">spring.artemis.embedded.server-id= # Server id. By default, an auto-incremented counter is used.</span><br><span class=\"line\">spring.artemis.embedded.topics= # Comma-separated list of topics to create on startup.</span><br><span class=\"line\">spring.artemis.host=localhost # Artemis broker host.</span><br><span class=\"line\">spring.artemis.mode= # Artemis deployment mode, auto-detected by default. Can be explicitly set to \"native\" or \"embedded\".</span><br><span class=\"line\">spring.artemis.password= # Login password of the broker.</span><br><span class=\"line\">spring.artemis.port=61616 # Artemis broker port.</span><br><span class=\"line\">spring.artemis.user= # Login user of the broker.</span><br><span class=\"line\"></span><br><span class=\"line\"># SPRING BATCH (BatchProperties)</span><br><span class=\"line\">spring.batch.initializer.enabled=true # Create the required batch tables on startup if necessary.</span><br><span class=\"line\">spring.batch.job.enabled=true # Execute all Spring Batch jobs in the context on startup.</span><br><span class=\"line\">spring.batch.job.names= # Comma-separated list of job names to execute on startup (For instance `job1,job2`). By default, all Jobs found in the context are executed.</span><br><span class=\"line\">spring.batch.schema=classpath:org/springframework/batch/core/schema-@@platform@@.sql # Path to the SQL file to use to initialize the database schema.</span><br><span class=\"line\">spring.batch.table-prefix= # Table prefix for all the batch meta-data tables.</span><br><span class=\"line\"></span><br><span class=\"line\"># HORNETQ (HornetQProperties)</span><br><span class=\"line\">spring.hornetq.embedded.cluster-password= # Cluster password. Randomly generated on startup by default.</span><br><span class=\"line\">spring.hornetq.embedded.data-directory= # Journal file directory. Not necessary if persistence is turned off.</span><br><span class=\"line\">spring.hornetq.embedded.enabled=true # Enable embedded mode if the HornetQ server APIs are available.</span><br><span class=\"line\">spring.hornetq.embedded.persistent=false # Enable persistent store.</span><br><span class=\"line\">spring.hornetq.embedded.queues= # Comma-separated list of queues to create on startup.</span><br><span class=\"line\">spring.hornetq.embedded.server-id= # Server id. By default, an auto-incremented counter is used.</span><br><span class=\"line\">spring.hornetq.embedded.topics= # Comma-separated list of topics to create on startup.</span><br><span class=\"line\">spring.hornetq.host=localhost # HornetQ broker host.</span><br><span class=\"line\">spring.hornetq.mode= # HornetQ deployment mode, auto-detected by default. Can be explicitly set to \"native\" or \"embedded\".</span><br><span class=\"line\">spring.hornetq.password= # Login password of the broker.</span><br><span class=\"line\">spring.hornetq.port=5445 # HornetQ broker port.</span><br><span class=\"line\">spring.hornetq.user= # Login user of the broker.</span><br><span class=\"line\"></span><br><span class=\"line\"># JMS (JmsProperties)</span><br><span class=\"line\">spring.jms.jndi-name= # Connection factory JNDI name. When set, takes precedence to others connection factory auto-configurations.</span><br><span class=\"line\">spring.jms.listener.acknowledge-mode= # Acknowledge mode of the container. By default, the listener is transacted with automatic acknowledgment.</span><br><span class=\"line\">spring.jms.listener.auto-startup=true # Start the container automatically on startup.</span><br><span class=\"line\">spring.jms.listener.concurrency= # Minimum number of concurrent consumers.</span><br><span class=\"line\">spring.jms.listener.max-concurrency= # Maximum number of concurrent consumers.</span><br><span class=\"line\">spring.jms.pub-sub-domain=false # Specify if the default destination type is topic.</span><br><span class=\"line\"></span><br><span class=\"line\"># RABBIT (RabbitProperties)</span><br><span class=\"line\">spring.rabbitmq.addresses= # Comma-separated list of addresses to which the client should connect.</span><br><span class=\"line\">spring.rabbitmq.cache.channel.checkout-timeout= # Number of milliseconds to wait to obtain a channel if the cache size has been reached.</span><br><span class=\"line\">spring.rabbitmq.cache.channel.size= # Number of channels to retain in the cache.</span><br><span class=\"line\">spring.rabbitmq.cache.connection.mode=CHANNEL # Connection factory cache mode.</span><br><span class=\"line\">spring.rabbitmq.cache.connection.size= # Number of connections to cache.</span><br><span class=\"line\">spring.rabbitmq.connection-timeout= # Connection timeout, in milliseconds; zero for infinite.</span><br><span class=\"line\">spring.rabbitmq.dynamic=true # Create an AmqpAdmin bean.</span><br><span class=\"line\">spring.rabbitmq.host=localhost # RabbitMQ host.</span><br><span class=\"line\">spring.rabbitmq.listener.acknowledge-mode= # Acknowledge mode of container.</span><br><span class=\"line\">spring.rabbitmq.listener.auto-startup=true # Start the container automatically on startup.</span><br><span class=\"line\">spring.rabbitmq.listener.concurrency= # Minimum number of consumers.</span><br><span class=\"line\">spring.rabbitmq.listener.default-requeue-rejected= # Whether or not to requeue delivery failures; default `true`.</span><br><span class=\"line\">spring.rabbitmq.listener.max-concurrency= # Maximum number of consumers.</span><br><span class=\"line\">spring.rabbitmq.listener.prefetch= # Number of messages to be handled in a single request. It should be greater than or equal to the transaction size (if used).</span><br><span class=\"line\">spring.rabbitmq.listener.retry.enabled=false # Whether or not publishing retries are enabled.</span><br><span class=\"line\">spring.rabbitmq.listener.retry.initial-interval=1000 # Interval between the first and second attempt to deliver a message.</span><br><span class=\"line\">spring.rabbitmq.listener.retry.max-attempts=3 # Maximum number of attempts to deliver a message.</span><br><span class=\"line\">spring.rabbitmq.listener.retry.max-interval=10000 # Maximum number of attempts to deliver a message.</span><br><span class=\"line\">spring.rabbitmq.listener.retry.multiplier=1.0 # A multiplier to apply to the previous delivery retry interval.</span><br><span class=\"line\">spring.rabbitmq.listener.retry.stateless=true # Whether or not retry is stateless or stateful.</span><br><span class=\"line\">spring.rabbitmq.listener.transaction-size= # Number of messages to be processed in a transaction. For best results it should be less than or equal to the prefetch count.</span><br><span class=\"line\">spring.rabbitmq.password= # Login to authenticate against the broker.</span><br><span class=\"line\">spring.rabbitmq.port=5672 # RabbitMQ port.</span><br><span class=\"line\">spring.rabbitmq.publisher-confirms=false # Enable publisher confirms.</span><br><span class=\"line\">spring.rabbitmq.publisher-returns=false # Enable publisher returns.</span><br><span class=\"line\">spring.rabbitmq.requested-heartbeat= # Requested heartbeat timeout, in seconds; zero for none.</span><br><span class=\"line\">spring.rabbitmq.ssl.enabled=false # Enable SSL support.</span><br><span class=\"line\">spring.rabbitmq.ssl.key-store= # Path to the key store that holds the SSL certificate.</span><br><span class=\"line\">spring.rabbitmq.ssl.key-store-password= # Password used to access the key store.</span><br><span class=\"line\">spring.rabbitmq.ssl.trust-store= # Trust store that holds SSL certificates.</span><br><span class=\"line\">spring.rabbitmq.ssl.trust-store-password= # Password used to access the trust store.</span><br><span class=\"line\">spring.rabbitmq.ssl.algorithm= # SSL algorithm to use. By default configure by the rabbit client library.</span><br><span class=\"line\">spring.rabbitmq.template.mandatory=false # Enable mandatory messages.</span><br><span class=\"line\">spring.rabbitmq.template.receive-timeout=0 # Timeout for `receive()` methods.</span><br><span class=\"line\">spring.rabbitmq.template.reply-timeout=5000 # Timeout for `sendAndReceive()` methods.</span><br><span class=\"line\">spring.rabbitmq.template.retry.enabled=false # Set to true to enable retries in the `RabbitTemplate`.</span><br><span class=\"line\">spring.rabbitmq.template.retry.initial-interval=1000 # Interval between the first and second attempt to publish a message.</span><br><span class=\"line\">spring.rabbitmq.template.retry.max-attempts=3 # Maximum number of attempts to publish a message.</span><br><span class=\"line\">spring.rabbitmq.template.retry.max-interval=10000 # Maximum number of attempts to publish a message.</span><br><span class=\"line\">spring.rabbitmq.template.retry.multiplier=1.0 # A multiplier to apply to the previous publishing retry interval.</span><br><span class=\"line\">spring.rabbitmq.username= # Login user to authenticate to the broker.</span><br><span class=\"line\">spring.rabbitmq.virtual-host= # Virtual host to use when connecting to the broker.</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"># ----------------------------------------</span><br><span class=\"line\"># ACTUATOR PROPERTIES</span><br><span class=\"line\"># ----------------------------------------</span><br><span class=\"line\"></span><br><span class=\"line\"># ENDPOINTS (AbstractEndpoint subclasses)</span><br><span class=\"line\">endpoints.enabled=true # Enable endpoints.</span><br><span class=\"line\">endpoints.sensitive= # Default endpoint sensitive setting.</span><br><span class=\"line\">endpoints.actuator.enabled=true # Enable the endpoint.</span><br><span class=\"line\">endpoints.actuator.path= # Endpoint URL path.</span><br><span class=\"line\">endpoints.actuator.sensitive=false # Enable security on the endpoint.</span><br><span class=\"line\">endpoints.autoconfig.enabled= # Enable the endpoint.</span><br><span class=\"line\">endpoints.autoconfig.id= # Endpoint identifier.</span><br><span class=\"line\">endpoints.autoconfig.path= # Endpoint path.</span><br><span class=\"line\">endpoints.autoconfig.sensitive= # Mark if the endpoint exposes sensitive information.</span><br><span class=\"line\">endpoints.beans.enabled= # Enable the endpoint.</span><br><span class=\"line\">endpoints.beans.id= # Endpoint identifier.</span><br><span class=\"line\">endpoints.beans.path= # Endpoint path.</span><br><span class=\"line\">endpoints.beans.sensitive= # Mark if the endpoint exposes sensitive information.</span><br><span class=\"line\">endpoints.configprops.enabled= # Enable the endpoint.</span><br><span class=\"line\">endpoints.configprops.id= # Endpoint identifier.</span><br><span class=\"line\">endpoints.configprops.keys-to-sanitize=password,secret,key,token,.*credentials.*,vcap_services # Keys that should be sanitized. Keys can be simple strings that the property ends with or regex expressions.</span><br><span class=\"line\">endpoints.configprops.path= # Endpoint path.</span><br><span class=\"line\">endpoints.configprops.sensitive= # Mark if the endpoint exposes sensitive information.</span><br><span class=\"line\">endpoints.docs.curies.enabled=false # Enable the curie generation.</span><br><span class=\"line\">endpoints.docs.enabled=true # Enable actuator docs endpoint.</span><br><span class=\"line\">endpoints.docs.path=/docs #</span><br><span class=\"line\">endpoints.docs.sensitive=false #</span><br><span class=\"line\">endpoints.dump.enabled= # Enable the endpoint.</span><br><span class=\"line\">endpoints.dump.id= # Endpoint identifier.</span><br><span class=\"line\">endpoints.dump.path= # Endpoint path.</span><br><span class=\"line\">endpoints.dump.sensitive= # Mark if the endpoint exposes sensitive information.</span><br><span class=\"line\">endpoints.env.enabled= # Enable the endpoint.</span><br><span class=\"line\">endpoints.env.id= # Endpoint identifier.</span><br><span class=\"line\">endpoints.env.keys-to-sanitize=password,secret,key,token,.*credentials.*,vcap_services # Keys that should be sanitized. Keys can be simple strings that the property ends with or regex expressions.</span><br><span class=\"line\">endpoints.env.path= # Endpoint path.</span><br><span class=\"line\">endpoints.env.sensitive= # Mark if the endpoint exposes sensitive information.</span><br><span class=\"line\">endpoints.flyway.enabled= # Enable the endpoint.</span><br><span class=\"line\">endpoints.flyway.id= # Endpoint identifier.</span><br><span class=\"line\">endpoints.flyway.sensitive= # Mark if the endpoint exposes sensitive information.</span><br><span class=\"line\">endpoints.health.enabled= # Enable the endpoint.</span><br><span class=\"line\">endpoints.health.id= # Endpoint identifier.</span><br><span class=\"line\">endpoints.health.mapping.*= # Mapping of health statuses to HttpStatus codes. By default, registered health statuses map to sensible defaults (i.e. UP maps to 200).</span><br><span class=\"line\">endpoints.health.path= # Endpoint path.</span><br><span class=\"line\">endpoints.health.sensitive= # Mark if the endpoint exposes sensitive information.</span><br><span class=\"line\">endpoints.health.time-to-live=1000 # Time to live for cached result, in milliseconds.</span><br><span class=\"line\">endpoints.heapdump.enabled= # Enable the endpoint.</span><br><span class=\"line\">endpoints.heapdump.path= # Endpoint path.</span><br><span class=\"line\">endpoints.heapdump.sensitive= # Mark if the endpoint exposes sensitive information.</span><br><span class=\"line\">endpoints.info.enabled= # Enable the endpoint.</span><br><span class=\"line\">endpoints.info.id= # Endpoint identifier.</span><br><span class=\"line\">endpoints.info.path= # Endpoint path.</span><br><span class=\"line\">endpoints.info.sensitive= # Mark if the endpoint exposes sensitive information.</span><br><span class=\"line\">endpoints.jolokia.enabled=true # Enable Jolokia endpoint.</span><br><span class=\"line\">endpoints.jolokia.path=/jolokia # Endpoint URL path.</span><br><span class=\"line\">endpoints.jolokia.sensitive=true # Enable security on the endpoint.</span><br><span class=\"line\">endpoints.liquibase.enabled= # Enable the endpoint.</span><br><span class=\"line\">endpoints.liquibase.id= # Endpoint identifier.</span><br><span class=\"line\">endpoints.liquibase.sensitive= # Mark if the endpoint exposes sensitive information.</span><br><span class=\"line\">endpoints.logfile.enabled=true # Enable the endpoint.</span><br><span class=\"line\">endpoints.logfile.external-file= # External Logfile to be accessed.</span><br><span class=\"line\">endpoints.logfile.path=/logfile # Endpoint URL path.</span><br><span class=\"line\">endpoints.logfile.sensitive=true # Enable security on the endpoint.</span><br><span class=\"line\">endpoints.mappings.enabled= # Enable the endpoint.</span><br><span class=\"line\">endpoints.mappings.id= # Endpoint identifier.</span><br><span class=\"line\">endpoints.mappings.path= # Endpoint path.</span><br><span class=\"line\">endpoints.mappings.sensitive= # Mark if the endpoint exposes sensitive information.</span><br><span class=\"line\">endpoints.metrics.enabled= # Enable the endpoint.</span><br><span class=\"line\">endpoints.metrics.filter.enabled=true # Enable the metrics servlet filter.</span><br><span class=\"line\">endpoints.metrics.filter.gauge-submissions=merged # Http filter gauge submissions (merged, per-http-method)</span><br><span class=\"line\">endpoints.metrics.filter.counter-submissions=merged # Http filter counter submissions (merged, per-http-method)</span><br><span class=\"line\">endpoints.metrics.id= # Endpoint identifier.</span><br><span class=\"line\">endpoints.metrics.path= # Endpoint path.</span><br><span class=\"line\">endpoints.metrics.sensitive= # Mark if the endpoint exposes sensitive information.</span><br><span class=\"line\">endpoints.shutdown.enabled= # Enable the endpoint.</span><br><span class=\"line\">endpoints.shutdown.id= # Endpoint identifier.</span><br><span class=\"line\">endpoints.shutdown.path= # Endpoint path.</span><br><span class=\"line\">endpoints.shutdown.sensitive= # Mark if the endpoint exposes sensitive information.</span><br><span class=\"line\">endpoints.trace.enabled= # Enable the endpoint.</span><br><span class=\"line\">endpoints.trace.id= # Endpoint identifier.</span><br><span class=\"line\">endpoints.trace.path= # Endpoint path.</span><br><span class=\"line\">endpoints.trace.sensitive= # Mark if the endpoint exposes sensitive information.</span><br><span class=\"line\"></span><br><span class=\"line\"># ENDPOINTS CORS CONFIGURATION (EndpointCorsProperties)</span><br><span class=\"line\">endpoints.cors.allow-credentials= # Set whether credentials are supported. When not set, credentials are not supported.</span><br><span class=\"line\">endpoints.cors.allowed-headers= # Comma-separated list of headers to allow in a request. '*' allows all headers.</span><br><span class=\"line\">endpoints.cors.allowed-methods=GET # Comma-separated list of methods to allow. '*' allows all methods.</span><br><span class=\"line\">endpoints.cors.allowed-origins= # Comma-separated list of origins to allow. '*' allows all origins. When not set, CORS support is disabled.</span><br><span class=\"line\">endpoints.cors.exposed-headers= # Comma-separated list of headers to include in a response.</span><br><span class=\"line\">endpoints.cors.max-age=1800 # How long, in seconds, the response from a pre-flight request can be cached by clients.</span><br><span class=\"line\"></span><br><span class=\"line\"># JMX ENDPOINT (EndpointMBeanExportProperties)</span><br><span class=\"line\">endpoints.jmx.domain= # JMX domain name. Initialized with the value of 'spring.jmx.default-domain' if set.</span><br><span class=\"line\">endpoints.jmx.enabled=true # Enable JMX export of all endpoints.</span><br><span class=\"line\">endpoints.jmx.static-names= # Additional static properties to append to all ObjectNames of MBeans representing Endpoints.</span><br><span class=\"line\">endpoints.jmx.unique-names=false # Ensure that ObjectNames are modified in case of conflict.</span><br><span class=\"line\"></span><br><span class=\"line\"># JOLOKIA (JolokiaProperties)</span><br><span class=\"line\">jolokia.config.*= # See Jolokia manual</span><br><span class=\"line\"></span><br><span class=\"line\"># MANAGEMENT HTTP SERVER (ManagementServerProperties)</span><br><span class=\"line\">management.add-application-context-header=true # Add the \"X-Application-Context\" HTTP header in each response.</span><br><span class=\"line\">management.address= # Network address that the management endpoints should bind to.</span><br><span class=\"line\">management.context-path= # Management endpoint context-path. For instance `/actuator`</span><br><span class=\"line\">management.port= # Management endpoint HTTP port. Uses the same port as the application by default. Configure a different port to use management-specific SSL.</span><br><span class=\"line\">management.security.enabled=true # Enable security.</span><br><span class=\"line\">management.security.roles=ADMIN # Comma-separated list of roles that can access the management endpoint.</span><br><span class=\"line\">management.security.sessions=stateless # Session creating policy to use (always, never, if_required, stateless).</span><br><span class=\"line\">management.ssl.ciphers= # Supported SSL ciphers. Requires a custom management.port.</span><br><span class=\"line\">management.ssl.client-auth= # Whether client authentication is wanted (\"want\") or needed (\"need\"). Requires a trust store. Requires a custom management.port.</span><br><span class=\"line\">management.ssl.enabled= # Enable SSL support. Requires a custom management.port.</span><br><span class=\"line\">management.ssl.enabled-protocols= # Enabled SSL protocols. Requires a custom management.port.</span><br><span class=\"line\">management.ssl.key-alias= # Alias that identifies the key in the key store. Requires a custom management.port.</span><br><span class=\"line\">management.ssl.key-password= # Password used to access the key in the key store. Requires a custom management.port.</span><br><span class=\"line\">management.ssl.key-store= # Path to the key store that holds the SSL certificate (typically a jks file). Requires a custom management.port.</span><br><span class=\"line\">management.ssl.key-store-password= # Password used to access the key store. Requires a custom management.port.</span><br><span class=\"line\">management.ssl.key-store-provider= # Provider for the key store. Requires a custom management.port.</span><br><span class=\"line\">management.ssl.key-store-type= # Type of the key store. Requires a custom management.port.</span><br><span class=\"line\">management.ssl.protocol=TLS # SSL protocol to use. Requires a custom management.port.</span><br><span class=\"line\">management.ssl.trust-store= # Trust store that holds SSL certificates. Requires a custom management.port.</span><br><span class=\"line\">management.ssl.trust-store-password= # Password used to access the trust store. Requires a custom management.port.</span><br><span class=\"line\">management.ssl.trust-store-provider= # Provider for the trust store. Requires a custom management.port.</span><br><span class=\"line\">management.ssl.trust-store-type= # Type of the trust store. Requires a custom management.port.</span><br><span class=\"line\"></span><br><span class=\"line\"># HEALTH INDICATORS (previously health.*)</span><br><span class=\"line\">management.health.db.enabled=true # Enable database health check.</span><br><span class=\"line\">management.health.defaults.enabled=true # Enable default health indicators.</span><br><span class=\"line\">management.health.diskspace.enabled=true # Enable disk space health check.</span><br><span class=\"line\">management.health.diskspace.path= # Path used to compute the available disk space.</span><br><span class=\"line\">management.health.diskspace.threshold=0 # Minimum disk space that should be available, in bytes.</span><br><span class=\"line\">management.health.elasticsearch.enabled=true # Enable elasticsearch health check.</span><br><span class=\"line\">management.health.elasticsearch.indices= # Comma-separated index names.</span><br><span class=\"line\">management.health.elasticsearch.response-timeout=100 # The time, in milliseconds, to wait for a response from the cluster.</span><br><span class=\"line\">management.health.jms.enabled=true # Enable JMS health check.</span><br><span class=\"line\">management.health.mail.enabled=true # Enable Mail health check.</span><br><span class=\"line\">management.health.mongo.enabled=true # Enable MongoDB health check.</span><br><span class=\"line\">management.health.rabbit.enabled=true # Enable RabbitMQ health check.</span><br><span class=\"line\">management.health.redis.enabled=true # Enable Redis health check.</span><br><span class=\"line\">management.health.solr.enabled=true # Enable Solr health check.</span><br><span class=\"line\">management.health.status.order=DOWN, OUT_OF_SERVICE, UNKNOWN, UP # Comma-separated list of health statuses in order of severity.</span><br><span class=\"line\"></span><br><span class=\"line\"># INFO CONTRIBUTORS (InfoContributorProperties)</span><br><span class=\"line\">management.info.build.enabled=true # Enable build info.</span><br><span class=\"line\">management.info.defaults.enabled=true # Enable default info contributors.</span><br><span class=\"line\">management.info.env.enabled=true # Enable environment info.</span><br><span class=\"line\">management.info.git.enabled=true # Enable git info.</span><br><span class=\"line\">management.info.git.mode=simple # Mode to use to expose git information.</span><br><span class=\"line\"></span><br><span class=\"line\"># REMOTE SHELL (ShellProperties)</span><br><span class=\"line\">management.shell.auth.type=simple # Authentication type. Auto-detected according to the environment.</span><br><span class=\"line\">management.shell.auth.jaas.domain=my-domain # JAAS domain.</span><br><span class=\"line\">management.shell.auth.key.path= # Path to the authentication key. This should point to a valid \".pem\" file.</span><br><span class=\"line\">management.shell.auth.simple.user.name=user # Login user.</span><br><span class=\"line\">management.shell.auth.simple.user.password= # Login password.</span><br><span class=\"line\">management.shell.auth.spring.roles=ADMIN # Comma-separated list of required roles to login to the CRaSH console.</span><br><span class=\"line\">management.shell.command-path-patterns=classpath*:/commands/**,classpath*:/crash/commands/** # Patterns to use to look for commands.</span><br><span class=\"line\">management.shell.command-refresh-interval=-1 # Scan for changes and update the command if necessary (in seconds).</span><br><span class=\"line\">management.shell.config-path-patterns=classpath*:/crash/* # Patterns to use to look for configurations.</span><br><span class=\"line\">management.shell.disabled-commands=jpa*,jdbc*,jndi* # Comma-separated list of commands to disable.</span><br><span class=\"line\">management.shell.disabled-plugins= # Comma-separated list of plugins to disable. Certain plugins are disabled by default based on the environment.</span><br><span class=\"line\">management.shell.ssh.auth-timeout = # Number of milliseconds after user will be prompted to login again.</span><br><span class=\"line\">management.shell.ssh.enabled=true # Enable CRaSH SSH support.</span><br><span class=\"line\">management.shell.ssh.idle-timeout = # Number of milliseconds after which unused connections are closed.</span><br><span class=\"line\">management.shell.ssh.key-path= # Path to the SSH server key.</span><br><span class=\"line\">management.shell.ssh.port=2000 # SSH port.</span><br><span class=\"line\">management.shell.telnet.enabled=false # Enable CRaSH telnet support. Enabled by default if the TelnetPlugin is  available.</span><br><span class=\"line\">management.shell.telnet.port=5000 # Telnet port.</span><br><span class=\"line\"></span><br><span class=\"line\"># TRACING (TraceProperties)</span><br><span class=\"line\">management.trace.include=request-headers,response-headers,cookies,errors # Items to be included in the trace.</span><br><span class=\"line\"></span><br><span class=\"line\"># METRICS EXPORT (MetricExportProperties)</span><br><span class=\"line\">spring.metrics.export.aggregate.key-pattern= # Pattern that tells the aggregator what to do with the keys from the source repository.</span><br><span class=\"line\">spring.metrics.export.aggregate.prefix= # Prefix for global repository if active.</span><br><span class=\"line\">spring.metrics.export.delay-millis=5000 # Delay in milliseconds between export ticks. Metrics are exported to external sources on a schedule with this delay.</span><br><span class=\"line\">spring.metrics.export.enabled=true # Flag to enable metric export (assuming a MetricWriter is available).</span><br><span class=\"line\">spring.metrics.export.excludes= # List of patterns for metric names to exclude. Applied after the includes.</span><br><span class=\"line\">spring.metrics.export.includes= # List of patterns for metric names to include.</span><br><span class=\"line\">spring.metrics.export.redis.key=keys.spring.metrics # Key for redis repository export (if active).</span><br><span class=\"line\">spring.metrics.export.redis.prefix=spring.metrics # Prefix for redis repository if active.</span><br><span class=\"line\">spring.metrics.export.send-latest= # Flag to switch off any available optimizations based on not exporting unchanged metric values.</span><br><span class=\"line\">spring.metrics.export.statsd.host= # Host of a statsd server to receive exported metrics.</span><br><span class=\"line\">spring.metrics.export.statsd.port=8125 # Port of a statsd server to receive exported metrics.</span><br><span class=\"line\">spring.metrics.export.statsd.prefix= # Prefix for statsd exported metrics.</span><br><span class=\"line\">spring.metrics.export.triggers.*= # Specific trigger properties per MetricWriter bean name.</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"># ----------------------------------------</span><br><span class=\"line\"># DEVTOOLS PROPERTIES</span><br><span class=\"line\"># ----------------------------------------</span><br><span class=\"line\"></span><br><span class=\"line\"># DEVTOOLS (DevToolsProperties)</span><br><span class=\"line\">spring.devtools.livereload.enabled=true # Enable a livereload.com compatible server.</span><br><span class=\"line\">spring.devtools.livereload.port=35729 # Server port.</span><br><span class=\"line\">spring.devtools.restart.additional-exclude= # Additional patterns that should be excluded from triggering a full restart.</span><br><span class=\"line\">spring.devtools.restart.additional-paths= # Additional paths to watch for changes.</span><br><span class=\"line\">spring.devtools.restart.enabled=true # Enable automatic restart.</span><br><span class=\"line\">spring.devtools.restart.exclude=META-INF/maven/**,META-INF/resources/**,resources/**,static/**,public/**,templates/**,**/*Test.class,**/*Tests.class,git.properties # Patterns that should be excluded from triggering a full restart.</span><br><span class=\"line\">spring.devtools.restart.poll-interval=1000 # Amount of time (in milliseconds) to wait between polling for classpath changes.</span><br><span class=\"line\">spring.devtools.restart.quiet-period=400 # Amount of quiet time (in milliseconds) required without any classpath changes before a restart is triggered.</span><br><span class=\"line\">spring.devtools.restart.trigger-file= # Name of a specific file that when changed will trigger the restart check. If not specified any classpath file change will trigger the restart.</span><br><span class=\"line\"></span><br><span class=\"line\"># REMOTE DEVTOOLS (RemoteDevToolsProperties)</span><br><span class=\"line\">spring.devtools.remote.context-path=/.~~spring-boot!~ # Context path used to handle the remote connection.</span><br><span class=\"line\">spring.devtools.remote.debug.enabled=true # Enable remote debug support.</span><br><span class=\"line\">spring.devtools.remote.debug.local-port=8000 # Local remote debug server port.</span><br><span class=\"line\">spring.devtools.remote.proxy.host= # The host of the proxy to use to connect to the remote application.</span><br><span class=\"line\">spring.devtools.remote.proxy.port= # The port of the proxy to use to connect to the remote application.</span><br><span class=\"line\">spring.devtools.remote.restart.enabled=true # Enable remote restart.</span><br><span class=\"line\">spring.devtools.remote.secret= # A shared secret required to establish a connection (required to enable remote support).</span><br><span class=\"line\">spring.devtools.remote.secret-header-name=X-AUTH-TOKEN # HTTP header used to transfer the shared secret.</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"application-properties相关通用属性\"><a href=\"#application-properties相关通用属性\" class=\"headerlink\" title=\"application.properties相关通用属性\"></a>application.properties相关通用属性</h1><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br><span class=\"line\">195</span><br><span class=\"line\">196</span><br><span class=\"line\">197</span><br><span class=\"line\">198</span><br><span class=\"line\">199</span><br><span class=\"line\">200</span><br><span class=\"line\">201</span><br><span class=\"line\">202</span><br><span class=\"line\">203</span><br><span class=\"line\">204</span><br><span class=\"line\">205</span><br><span class=\"line\">206</span><br><span class=\"line\">207</span><br><span class=\"line\">208</span><br><span class=\"line\">209</span><br><span class=\"line\">210</span><br><span class=\"line\">211</span><br><span class=\"line\">212</span><br><span class=\"line\">213</span><br><span class=\"line\">214</span><br><span class=\"line\">215</span><br><span class=\"line\">216</span><br><span class=\"line\">217</span><br><span class=\"line\">218</span><br><span class=\"line\">219</span><br><span class=\"line\">220</span><br><span class=\"line\">221</span><br><span class=\"line\">222</span><br><span class=\"line\">223</span><br><span class=\"line\">224</span><br><span class=\"line\">225</span><br><span class=\"line\">226</span><br><span class=\"line\">227</span><br><span class=\"line\">228</span><br><span class=\"line\">229</span><br><span class=\"line\">230</span><br><span class=\"line\">231</span><br><span class=\"line\">232</span><br><span class=\"line\">233</span><br><span class=\"line\">234</span><br><span class=\"line\">235</span><br><span class=\"line\">236</span><br><span class=\"line\">237</span><br><span class=\"line\">238</span><br><span class=\"line\">239</span><br><span class=\"line\">240</span><br><span class=\"line\">241</span><br><span class=\"line\">242</span><br><span class=\"line\">243</span><br><span class=\"line\">244</span><br><span class=\"line\">245</span><br><span class=\"line\">246</span><br><span class=\"line\">247</span><br><span class=\"line\">248</span><br><span class=\"line\">249</span><br><span class=\"line\">250</span><br><span class=\"line\">251</span><br><span class=\"line\">252</span><br><span class=\"line\">253</span><br><span class=\"line\">254</span><br><span class=\"line\">255</span><br><span class=\"line\">256</span><br><span class=\"line\">257</span><br><span class=\"line\">258</span><br><span class=\"line\">259</span><br><span class=\"line\">260</span><br><span class=\"line\">261</span><br><span class=\"line\">262</span><br><span class=\"line\">263</span><br><span class=\"line\">264</span><br><span class=\"line\">265</span><br><span class=\"line\">266</span><br><span class=\"line\">267</span><br><span class=\"line\">268</span><br><span class=\"line\">269</span><br><span class=\"line\">270</span><br><span class=\"line\">271</span><br><span class=\"line\">272</span><br><span class=\"line\">273</span><br><span class=\"line\">274</span><br><span class=\"line\">275</span><br><span class=\"line\">276</span><br><span class=\"line\">277</span><br><span class=\"line\">278</span><br><span class=\"line\">279</span><br><span class=\"line\">280</span><br><span class=\"line\">281</span><br><span class=\"line\">282</span><br><span class=\"line\">283</span><br><span class=\"line\">284</span><br><span class=\"line\">285</span><br><span class=\"line\">286</span><br><span class=\"line\">287</span><br><span class=\"line\">288</span><br><span class=\"line\">289</span><br><span class=\"line\">290</span><br><span class=\"line\">291</span><br><span class=\"line\">292</span><br><span class=\"line\">293</span><br><span class=\"line\">294</span><br><span class=\"line\">295</span><br><span class=\"line\">296</span><br><span class=\"line\">297</span><br><span class=\"line\">298</span><br><span class=\"line\">299</span><br><span class=\"line\">300</span><br><span class=\"line\">301</span><br><span class=\"line\">302</span><br><span class=\"line\">303</span><br><span class=\"line\">304</span><br><span class=\"line\">305</span><br><span class=\"line\">306</span><br><span class=\"line\">307</span><br><span class=\"line\">308</span><br><span class=\"line\">309</span><br><span class=\"line\">310</span><br><span class=\"line\">311</span><br><span class=\"line\">312</span><br><span class=\"line\">313</span><br><span class=\"line\">314</span><br><span class=\"line\">315</span><br><span class=\"line\">316</span><br><span class=\"line\">317</span><br><span class=\"line\">318</span><br><span class=\"line\">319</span><br><span class=\"line\">320</span><br><span class=\"line\">321</span><br><span class=\"line\">322</span><br><span class=\"line\">323</span><br><span class=\"line\">324</span><br><span class=\"line\">325</span><br><span class=\"line\">326</span><br><span class=\"line\">327</span><br><span class=\"line\">328</span><br><span class=\"line\">329</span><br><span class=\"line\">330</span><br><span class=\"line\">331</span><br><span class=\"line\">332</span><br><span class=\"line\">333</span><br><span class=\"line\">334</span><br><span class=\"line\">335</span><br><span class=\"line\">336</span><br><span class=\"line\">337</span><br><span class=\"line\">338</span><br><span class=\"line\">339</span><br><span class=\"line\">340</span><br><span class=\"line\">341</span><br><span class=\"line\">342</span><br><span class=\"line\">343</span><br><span class=\"line\">344</span><br><span class=\"line\">345</span><br><span class=\"line\">346</span><br><span class=\"line\">347</span><br><span class=\"line\">348</span><br><span class=\"line\">349</span><br><span class=\"line\">350</span><br><span class=\"line\">351</span><br><span class=\"line\">352</span><br><span class=\"line\">353</span><br><span class=\"line\">354</span><br><span class=\"line\">355</span><br><span class=\"line\">356</span><br><span class=\"line\">357</span><br><span class=\"line\">358</span><br><span class=\"line\">359</span><br><span class=\"line\">360</span><br><span class=\"line\">361</span><br><span class=\"line\">362</span><br><span class=\"line\">363</span><br><span class=\"line\">364</span><br><span class=\"line\">365</span><br><span class=\"line\">366</span><br><span class=\"line\">367</span><br><span class=\"line\">368</span><br><span class=\"line\">369</span><br><span class=\"line\">370</span><br><span class=\"line\">371</span><br><span class=\"line\">372</span><br><span class=\"line\">373</span><br><span class=\"line\">374</span><br><span class=\"line\">375</span><br><span class=\"line\">376</span><br><span class=\"line\">377</span><br><span class=\"line\">378</span><br><span class=\"line\">379</span><br><span class=\"line\">380</span><br><span class=\"line\">381</span><br><span class=\"line\">382</span><br><span class=\"line\">383</span><br><span class=\"line\">384</span><br><span class=\"line\">385</span><br><span class=\"line\">386</span><br><span class=\"line\">387</span><br><span class=\"line\">388</span><br><span class=\"line\">389</span><br><span class=\"line\">390</span><br><span class=\"line\">391</span><br><span class=\"line\">392</span><br><span class=\"line\">393</span><br><span class=\"line\">394</span><br><span class=\"line\">395</span><br><span class=\"line\">396</span><br><span class=\"line\">397</span><br><span class=\"line\">398</span><br><span class=\"line\">399</span><br><span class=\"line\">400</span><br><span class=\"line\">401</span><br><span class=\"line\">402</span><br><span class=\"line\">403</span><br><span class=\"line\">404</span><br><span class=\"line\">405</span><br><span class=\"line\">406</span><br><span class=\"line\">407</span><br><span class=\"line\">408</span><br><span class=\"line\">409</span><br><span class=\"line\">410</span><br><span class=\"line\">411</span><br><span class=\"line\">412</span><br><span class=\"line\">413</span><br><span class=\"line\">414</span><br><span class=\"line\">415</span><br><span class=\"line\">416</span><br><span class=\"line\">417</span><br><span class=\"line\">418</span><br><span class=\"line\">419</span><br><span class=\"line\">420</span><br><span class=\"line\">421</span><br><span class=\"line\">422</span><br><span class=\"line\">423</span><br><span class=\"line\">424</span><br><span class=\"line\">425</span><br><span class=\"line\">426</span><br><span class=\"line\">427</span><br><span class=\"line\">428</span><br><span class=\"line\">429</span><br><span class=\"line\">430</span><br><span class=\"line\">431</span><br><span class=\"line\">432</span><br><span class=\"line\">433</span><br><span class=\"line\">434</span><br><span class=\"line\">435</span><br><span class=\"line\">436</span><br><span class=\"line\">437</span><br><span class=\"line\">438</span><br><span class=\"line\">439</span><br><span class=\"line\">440</span><br><span class=\"line\">441</span><br><span class=\"line\">442</span><br><span class=\"line\">443</span><br><span class=\"line\">444</span><br><span class=\"line\">445</span><br><span class=\"line\">446</span><br><span class=\"line\">447</span><br><span class=\"line\">448</span><br><span class=\"line\">449</span><br><span class=\"line\">450</span><br><span class=\"line\">451</span><br><span class=\"line\">452</span><br><span class=\"line\">453</span><br><span class=\"line\">454</span><br><span class=\"line\">455</span><br><span class=\"line\">456</span><br><span class=\"line\">457</span><br><span class=\"line\">458</span><br><span class=\"line\">459</span><br><span class=\"line\">460</span><br><span class=\"line\">461</span><br><span class=\"line\">462</span><br><span class=\"line\">463</span><br><span class=\"line\">464</span><br><span class=\"line\">465</span><br><span class=\"line\">466</span><br><span class=\"line\">467</span><br><span class=\"line\">468</span><br><span class=\"line\">469</span><br><span class=\"line\">470</span><br><span class=\"line\">471</span><br><span class=\"line\">472</span><br><span class=\"line\">473</span><br><span class=\"line\">474</span><br><span class=\"line\">475</span><br><span class=\"line\">476</span><br><span class=\"line\">477</span><br><span class=\"line\">478</span><br><span class=\"line\">479</span><br><span class=\"line\">480</span><br><span class=\"line\">481</span><br><span class=\"line\">482</span><br><span class=\"line\">483</span><br><span class=\"line\">484</span><br><span class=\"line\">485</span><br><span class=\"line\">486</span><br><span class=\"line\">487</span><br><span class=\"line\">488</span><br><span class=\"line\">489</span><br><span class=\"line\">490</span><br><span class=\"line\">491</span><br><span class=\"line\">492</span><br><span class=\"line\">493</span><br><span class=\"line\">494</span><br><span class=\"line\">495</span><br><span class=\"line\">496</span><br><span class=\"line\">497</span><br><span class=\"line\">498</span><br><span class=\"line\">499</span><br><span class=\"line\">500</span><br><span class=\"line\">501</span><br><span class=\"line\">502</span><br><span class=\"line\">503</span><br><span class=\"line\">504</span><br><span class=\"line\">505</span><br><span class=\"line\">506</span><br><span class=\"line\">507</span><br><span class=\"line\">508</span><br><span class=\"line\">509</span><br><span class=\"line\">510</span><br><span class=\"line\">511</span><br><span class=\"line\">512</span><br><span class=\"line\">513</span><br><span class=\"line\">514</span><br><span class=\"line\">515</span><br><span class=\"line\">516</span><br><span class=\"line\">517</span><br><span class=\"line\">518</span><br><span class=\"line\">519</span><br><span class=\"line\">520</span><br><span class=\"line\">521</span><br><span class=\"line\">522</span><br><span class=\"line\">523</span><br><span class=\"line\">524</span><br><span class=\"line\">525</span><br><span class=\"line\">526</span><br><span class=\"line\">527</span><br><span class=\"line\">528</span><br><span class=\"line\">529</span><br><span class=\"line\">530</span><br><span class=\"line\">531</span><br><span class=\"line\">532</span><br><span class=\"line\">533</span><br><span class=\"line\">534</span><br><span class=\"line\">535</span><br><span class=\"line\">536</span><br><span class=\"line\">537</span><br><span class=\"line\">538</span><br><span class=\"line\">539</span><br><span class=\"line\">540</span><br><span class=\"line\">541</span><br><span class=\"line\">542</span><br><span class=\"line\">543</span><br><span class=\"line\">544</span><br><span class=\"line\">545</span><br><span class=\"line\">546</span><br><span class=\"line\">547</span><br><span class=\"line\">548</span><br><span class=\"line\">549</span><br><span class=\"line\">550</span><br><span class=\"line\">551</span><br><span class=\"line\">552</span><br><span class=\"line\">553</span><br><span class=\"line\">554</span><br><span class=\"line\">555</span><br><span class=\"line\">556</span><br><span class=\"line\">557</span><br><span class=\"line\">558</span><br><span class=\"line\">559</span><br><span class=\"line\">560</span><br><span class=\"line\">561</span><br><span class=\"line\">562</span><br><span class=\"line\">563</span><br><span class=\"line\">564</span><br><span class=\"line\">565</span><br><span class=\"line\">566</span><br><span class=\"line\">567</span><br><span class=\"line\">568</span><br><span class=\"line\">569</span><br><span class=\"line\">570</span><br><span class=\"line\">571</span><br><span class=\"line\">572</span><br><span class=\"line\">573</span><br><span class=\"line\">574</span><br><span class=\"line\">575</span><br><span class=\"line\">576</span><br><span class=\"line\">577</span><br><span class=\"line\">578</span><br><span class=\"line\">579</span><br><span class=\"line\">580</span><br><span class=\"line\">581</span><br><span class=\"line\">582</span><br><span class=\"line\">583</span><br><span class=\"line\">584</span><br><span class=\"line\">585</span><br><span class=\"line\">586</span><br><span class=\"line\">587</span><br><span class=\"line\">588</span><br><span class=\"line\">589</span><br><span class=\"line\">590</span><br><span class=\"line\">591</span><br><span class=\"line\">592</span><br><span class=\"line\">593</span><br><span class=\"line\">594</span><br><span class=\"line\">595</span><br><span class=\"line\">596</span><br><span class=\"line\">597</span><br><span class=\"line\">598</span><br><span class=\"line\">599</span><br><span class=\"line\">600</span><br><span class=\"line\">601</span><br><span class=\"line\">602</span><br><span class=\"line\">603</span><br><span class=\"line\">604</span><br><span class=\"line\">605</span><br><span class=\"line\">606</span><br><span class=\"line\">607</span><br><span class=\"line\">608</span><br><span class=\"line\">609</span><br><span class=\"line\">610</span><br><span class=\"line\">611</span><br><span class=\"line\">612</span><br><span class=\"line\">613</span><br><span class=\"line\">614</span><br><span class=\"line\">615</span><br><span class=\"line\">616</span><br><span class=\"line\">617</span><br><span class=\"line\">618</span><br><span class=\"line\">619</span><br><span class=\"line\">620</span><br><span class=\"line\">621</span><br><span class=\"line\">622</span><br><span class=\"line\">623</span><br><span class=\"line\">624</span><br><span class=\"line\">625</span><br><span class=\"line\">626</span><br><span class=\"line\">627</span><br><span class=\"line\">628</span><br><span class=\"line\">629</span><br><span class=\"line\">630</span><br><span class=\"line\">631</span><br><span class=\"line\">632</span><br><span class=\"line\">633</span><br><span class=\"line\">634</span><br><span class=\"line\">635</span><br><span class=\"line\">636</span><br><span class=\"line\">637</span><br><span class=\"line\">638</span><br><span class=\"line\">639</span><br><span class=\"line\">640</span><br><span class=\"line\">641</span><br><span class=\"line\">642</span><br><span class=\"line\">643</span><br><span class=\"line\">644</span><br><span class=\"line\">645</span><br><span class=\"line\">646</span><br><span class=\"line\">647</span><br><span class=\"line\">648</span><br><span class=\"line\">649</span><br><span class=\"line\">650</span><br><span class=\"line\">651</span><br><span class=\"line\">652</span><br><span class=\"line\">653</span><br><span class=\"line\">654</span><br><span class=\"line\">655</span><br><span class=\"line\">656</span><br><span class=\"line\">657</span><br><span class=\"line\">658</span><br><span class=\"line\">659</span><br><span class=\"line\">660</span><br><span class=\"line\">661</span><br><span class=\"line\">662</span><br><span class=\"line\">663</span><br><span class=\"line\">664</span><br><span class=\"line\">665</span><br><span class=\"line\">666</span><br><span class=\"line\">667</span><br><span class=\"line\">668</span><br><span class=\"line\">669</span><br><span class=\"line\">670</span><br><span class=\"line\">671</span><br><span class=\"line\">672</span><br><span class=\"line\">673</span><br><span class=\"line\">674</span><br><span class=\"line\">675</span><br><span class=\"line\">676</span><br><span class=\"line\">677</span><br><span class=\"line\">678</span><br><span class=\"line\">679</span><br><span class=\"line\">680</span><br><span class=\"line\">681</span><br><span class=\"line\">682</span><br><span class=\"line\">683</span><br><span class=\"line\">684</span><br><span class=\"line\">685</span><br><span class=\"line\">686</span><br><span class=\"line\">687</span><br><span class=\"line\">688</span><br><span class=\"line\">689</span><br><span class=\"line\">690</span><br><span class=\"line\">691</span><br><span class=\"line\">692</span><br><span class=\"line\">693</span><br><span class=\"line\">694</span><br><span class=\"line\">695</span><br><span class=\"line\">696</span><br><span class=\"line\">697</span><br><span class=\"line\">698</span><br><span class=\"line\">699</span><br><span class=\"line\">700</span><br><span class=\"line\">701</span><br><span class=\"line\">702</span><br><span class=\"line\">703</span><br><span class=\"line\">704</span><br><span class=\"line\">705</span><br><span class=\"line\">706</span><br><span class=\"line\">707</span><br><span class=\"line\">708</span><br><span class=\"line\">709</span><br><span class=\"line\">710</span><br><span class=\"line\">711</span><br><span class=\"line\">712</span><br><span class=\"line\">713</span><br><span class=\"line\">714</span><br><span class=\"line\">715</span><br><span class=\"line\">716</span><br><span class=\"line\">717</span><br><span class=\"line\">718</span><br><span class=\"line\">719</span><br><span class=\"line\">720</span><br><span class=\"line\">721</span><br><span class=\"line\">722</span><br><span class=\"line\">723</span><br><span class=\"line\">724</span><br><span class=\"line\">725</span><br><span class=\"line\">726</span><br><span class=\"line\">727</span><br><span class=\"line\">728</span><br><span class=\"line\">729</span><br><span class=\"line\">730</span><br><span class=\"line\">731</span><br><span class=\"line\">732</span><br><span class=\"line\">733</span><br><span class=\"line\">734</span><br><span class=\"line\">735</span><br><span class=\"line\">736</span><br><span class=\"line\">737</span><br><span class=\"line\">738</span><br><span class=\"line\">739</span><br><span class=\"line\">740</span><br><span class=\"line\">741</span><br><span class=\"line\">742</span><br><span class=\"line\">743</span><br><span class=\"line\">744</span><br><span class=\"line\">745</span><br><span class=\"line\">746</span><br><span class=\"line\">747</span><br><span class=\"line\">748</span><br><span class=\"line\">749</span><br><span class=\"line\">750</span><br><span class=\"line\">751</span><br><span class=\"line\">752</span><br><span class=\"line\">753</span><br><span class=\"line\">754</span><br><span class=\"line\">755</span><br><span class=\"line\">756</span><br><span class=\"line\">757</span><br><span class=\"line\">758</span><br><span class=\"line\">759</span><br><span class=\"line\">760</span><br><span class=\"line\">761</span><br><span class=\"line\">762</span><br><span class=\"line\">763</span><br><span class=\"line\">764</span><br><span class=\"line\">765</span><br><span class=\"line\">766</span><br><span class=\"line\">767</span><br><span class=\"line\">768</span><br><span class=\"line\">769</span><br><span class=\"line\">770</span><br><span class=\"line\">771</span><br><span class=\"line\">772</span><br><span class=\"line\">773</span><br><span class=\"line\">774</span><br><span class=\"line\">775</span><br><span class=\"line\">776</span><br><span class=\"line\">777</span><br><span class=\"line\">778</span><br><span class=\"line\">779</span><br><span class=\"line\">780</span><br><span class=\"line\">781</span><br><span class=\"line\">782</span><br><span class=\"line\">783</span><br><span class=\"line\">784</span><br><span class=\"line\">785</span><br><span class=\"line\">786</span><br><span class=\"line\">787</span><br><span class=\"line\">788</span><br><span class=\"line\">789</span><br><span class=\"line\">790</span><br><span class=\"line\">791</span><br><span class=\"line\">792</span><br><span class=\"line\">793</span><br><span class=\"line\">794</span><br><span class=\"line\">795</span><br><span class=\"line\">796</span><br><span class=\"line\">797</span><br><span class=\"line\">798</span><br><span class=\"line\">799</span><br><span class=\"line\">800</span><br><span class=\"line\">801</span><br><span class=\"line\">802</span><br><span class=\"line\">803</span><br><span class=\"line\">804</span><br><span class=\"line\">805</span><br><span class=\"line\">806</span><br><span class=\"line\">807</span><br><span class=\"line\">808</span><br><span class=\"line\">809</span><br><span class=\"line\">810</span><br><span class=\"line\">811</span><br><span class=\"line\">812</span><br><span class=\"line\">813</span><br><span class=\"line\">814</span><br><span class=\"line\">815</span><br><span class=\"line\">816</span><br><span class=\"line\">817</span><br><span class=\"line\">818</span><br><span class=\"line\">819</span><br><span class=\"line\">820</span><br><span class=\"line\">821</span><br><span class=\"line\">822</span><br><span class=\"line\">823</span><br><span class=\"line\">824</span><br><span class=\"line\">825</span><br><span class=\"line\">826</span><br><span class=\"line\">827</span><br><span class=\"line\">828</span><br><span class=\"line\">829</span><br><span class=\"line\">830</span><br><span class=\"line\">831</span><br><span class=\"line\">832</span><br><span class=\"line\">833</span><br><span class=\"line\">834</span><br><span class=\"line\">835</span><br><span class=\"line\">836</span><br><span class=\"line\">837</span><br><span class=\"line\">838</span><br><span class=\"line\">839</span><br><span class=\"line\">840</span><br><span class=\"line\">841</span><br><span class=\"line\">842</span><br><span class=\"line\">843</span><br><span class=\"line\">844</span><br><span class=\"line\">845</span><br><span class=\"line\">846</span><br><span class=\"line\">847</span><br><span class=\"line\">848</span><br><span class=\"line\">849</span><br><span class=\"line\">850</span><br><span class=\"line\">851</span><br><span class=\"line\">852</span><br><span class=\"line\">853</span><br><span class=\"line\">854</span><br><span class=\"line\">855</span><br><span class=\"line\">856</span><br><span class=\"line\">857</span><br><span class=\"line\">858</span><br><span class=\"line\">859</span><br><span class=\"line\">860</span><br><span class=\"line\">861</span><br><span class=\"line\">862</span><br><span class=\"line\">863</span><br><span class=\"line\">864</span><br><span class=\"line\">865</span><br><span class=\"line\">866</span><br><span class=\"line\">867</span><br><span class=\"line\">868</span><br><span class=\"line\">869</span><br><span class=\"line\">870</span><br><span class=\"line\">871</span><br><span class=\"line\">872</span><br><span class=\"line\">873</span><br><span class=\"line\">874</span><br><span class=\"line\">875</span><br><span class=\"line\">876</span><br><span class=\"line\">877</span><br><span class=\"line\">878</span><br><span class=\"line\">879</span><br><span class=\"line\">880</span><br><span class=\"line\">881</span><br><span class=\"line\">882</span><br><span class=\"line\">883</span><br><span class=\"line\">884</span><br><span class=\"line\">885</span><br><span class=\"line\">886</span><br><span class=\"line\">887</span><br><span class=\"line\">888</span><br><span class=\"line\">889</span><br><span class=\"line\">890</span><br><span class=\"line\">891</span><br><span class=\"line\">892</span><br><span class=\"line\">893</span><br><span class=\"line\">894</span><br><span class=\"line\">895</span><br><span class=\"line\">896</span><br><span class=\"line\">897</span><br><span class=\"line\">898</span><br><span class=\"line\">899</span><br><span class=\"line\">900</span><br><span class=\"line\">901</span><br><span class=\"line\">902</span><br><span class=\"line\">903</span><br><span class=\"line\">904</span><br><span class=\"line\">905</span><br><span class=\"line\">906</span><br><span class=\"line\">907</span><br><span class=\"line\">908</span><br><span class=\"line\">909</span><br><span class=\"line\">910</span><br><span class=\"line\">911</span><br><span class=\"line\">912</span><br><span class=\"line\">913</span><br><span class=\"line\">914</span><br><span class=\"line\">915</span><br><span class=\"line\">916</span><br><span class=\"line\">917</span><br><span class=\"line\">918</span><br><span class=\"line\">919</span><br><span class=\"line\">920</span><br><span class=\"line\">921</span><br><span class=\"line\">922</span><br><span class=\"line\">923</span><br><span class=\"line\">924</span><br><span class=\"line\">925</span><br><span class=\"line\">926</span><br><span class=\"line\">927</span><br><span class=\"line\">928</span><br><span class=\"line\">929</span><br><span class=\"line\">930</span><br><span class=\"line\">931</span><br><span class=\"line\">932</span><br><span class=\"line\">933</span><br><span class=\"line\">934</span><br><span class=\"line\">935</span><br><span class=\"line\">936</span><br><span class=\"line\">937</span><br><span class=\"line\">938</span><br><span class=\"line\">939</span><br><span class=\"line\">940</span><br><span class=\"line\">941</span><br><span class=\"line\">942</span><br><span class=\"line\">943</span><br><span class=\"line\">944</span><br><span class=\"line\">945</span><br><span class=\"line\">946</span><br><span class=\"line\">947</span><br><span class=\"line\">948</span><br><span class=\"line\">949</span><br><span class=\"line\">950</span><br><span class=\"line\">951</span><br><span class=\"line\">952</span><br><span class=\"line\">953</span><br><span class=\"line\">954</span><br><span class=\"line\">955</span><br><span class=\"line\">956</span><br><span class=\"line\">957</span><br><span class=\"line\">958</span><br><span class=\"line\">959</span><br><span class=\"line\">960</span><br><span class=\"line\">961</span><br><span class=\"line\">962</span><br><span class=\"line\">963</span><br><span class=\"line\">964</span><br><span class=\"line\">965</span><br><span class=\"line\">966</span><br><span class=\"line\">967</span><br><span class=\"line\">968</span><br><span class=\"line\">969</span><br><span class=\"line\">970</span><br><span class=\"line\">971</span><br><span class=\"line\">972</span><br><span class=\"line\">973</span><br><span class=\"line\">974</span><br><span class=\"line\">975</span><br><span class=\"line\">976</span><br><span class=\"line\">977</span><br><span class=\"line\">978</span><br><span class=\"line\">979</span><br><span class=\"line\">980</span><br><span class=\"line\">981</span><br><span class=\"line\">982</span><br><span class=\"line\">983</span><br><span class=\"line\">984</span><br><span class=\"line\">985</span><br><span class=\"line\">986</span><br><span class=\"line\">987</span><br><span class=\"line\">988</span><br><span class=\"line\">989</span><br><span class=\"line\">990</span><br><span class=\"line\">991</span><br><span class=\"line\">992</span><br><span class=\"line\">993</span><br><span class=\"line\">994</span><br><span class=\"line\">995</span><br><span class=\"line\">996</span><br><span class=\"line\">997</span><br><span class=\"line\">998</span><br><span class=\"line\">999</span><br><span class=\"line\">1000</span><br><span class=\"line\">1001</span><br><span class=\"line\">1002</span><br><span class=\"line\">1003</span><br><span class=\"line\">1004</span><br><span class=\"line\">1005</span><br><span class=\"line\">1006</span><br><span class=\"line\">1007</span><br><span class=\"line\">1008</span><br><span class=\"line\">1009</span><br><span class=\"line\">1010</span><br><span class=\"line\">1011</span><br><span class=\"line\">1012</span><br><span class=\"line\">1013</span><br><span class=\"line\">1014</span><br><span class=\"line\">1015</span><br><span class=\"line\">1016</span><br><span class=\"line\">1017</span><br><span class=\"line\">1018</span><br><span class=\"line\">1019</span><br><span class=\"line\">1020</span><br><span class=\"line\">1021</span><br><span class=\"line\">1022</span><br><span class=\"line\">1023</span><br><span class=\"line\">1024</span><br><span class=\"line\">1025</span><br><span class=\"line\">1026</span><br><span class=\"line\">1027</span><br><span class=\"line\">1028</span><br><span class=\"line\">1029</span><br><span class=\"line\">1030</span><br><span class=\"line\">1031</span><br><span class=\"line\">1032</span><br><span class=\"line\">1033</span><br><span class=\"line\">1034</span><br><span class=\"line\">1035</span><br><span class=\"line\">1036</span><br><span class=\"line\">1037</span><br><span class=\"line\">1038</span><br><span class=\"line\">1039</span><br><span class=\"line\">1040</span><br><span class=\"line\">1041</span><br><span class=\"line\">1042</span><br><span class=\"line\">1043</span><br><span class=\"line\">1044</span><br><span class=\"line\">1045</span><br><span class=\"line\">1046</span><br><span class=\"line\">1047</span><br><span class=\"line\">1048</span><br><span class=\"line\">1049</span><br><span class=\"line\">1050</span><br><span class=\"line\">1051</span><br><span class=\"line\">1052</span><br><span class=\"line\">1053</span><br><span class=\"line\">1054</span><br><span class=\"line\">1055</span><br><span class=\"line\">1056</span><br><span class=\"line\">1057</span><br><span class=\"line\">1058</span><br><span class=\"line\">1059</span><br><span class=\"line\">1060</span><br><span class=\"line\">1061</span><br><span class=\"line\">1062</span><br><span class=\"line\">1063</span><br><span class=\"line\">1064</span><br><span class=\"line\">1065</span><br><span class=\"line\">1066</span><br><span class=\"line\">1067</span><br><span class=\"line\">1068</span><br><span class=\"line\">1069</span><br><span class=\"line\">1070</span><br><span class=\"line\">1071</span><br><span class=\"line\">1072</span><br><span class=\"line\">1073</span><br><span class=\"line\">1074</span><br><span class=\"line\">1075</span><br><span class=\"line\">1076</span><br><span class=\"line\">1077</span><br><span class=\"line\">1078</span><br><span class=\"line\">1079</span><br><span class=\"line\">1080</span><br><span class=\"line\">1081</span><br><span class=\"line\">1082</span><br><span class=\"line\">1083</span><br><span class=\"line\">1084</span><br><span class=\"line\">1085</span><br><span class=\"line\">1086</span><br><span class=\"line\">1087</span><br><span class=\"line\">1088</span><br><span class=\"line\">1089</span><br><span class=\"line\">1090</span><br><span class=\"line\">1091</span><br><span class=\"line\">1092</span><br><span class=\"line\">1093</span><br><span class=\"line\">1094</span><br><span class=\"line\">1095</span><br><span class=\"line\">1096</span><br><span class=\"line\">1097</span><br><span class=\"line\">1098</span><br><span class=\"line\">1099</span><br><span class=\"line\">1100</span><br><span class=\"line\">1101</span><br><span class=\"line\">1102</span><br><span class=\"line\">1103</span><br><span class=\"line\">1104</span><br><span class=\"line\">1105</span><br><span class=\"line\">1106</span><br><span class=\"line\">1107</span><br><span class=\"line\">1108</span><br><span class=\"line\">1109</span><br><span class=\"line\">1110</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># ===================================================================</span><br><span class=\"line\"># COMMON SPRING BOOT PROPERTIES</span><br><span class=\"line\">#</span><br><span class=\"line\"># This sample file is provided as a guideline. Do NOT copy it in its</span><br><span class=\"line\"># entirety to your own application.               ^^^</span><br><span class=\"line\"># ===================================================================</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"># ----------------------------------------</span><br><span class=\"line\"># CORE PROPERTIES</span><br><span class=\"line\"># ----------------------------------------</span><br><span class=\"line\"></span><br><span class=\"line\"># BANNER</span><br><span class=\"line\">banner.charset=UTF-8 # Banner file encoding.</span><br><span class=\"line\">banner.location=classpath:banner.txt # Banner file location.</span><br><span class=\"line\">banner.image.location=classpath:banner.gif # Banner image file location (jpg/png can also be used).</span><br><span class=\"line\">banner.image.width= # Width of the banner image in chars (default 76)</span><br><span class=\"line\">banner.image.height= # Height of the banner image in chars (default based on image height)</span><br><span class=\"line\">banner.image.margin= # Left hand image margin in chars (default 2)</span><br><span class=\"line\">banner.image.invert= # If images should be inverted for dark terminal themes (default false)</span><br><span class=\"line\"></span><br><span class=\"line\"># LOGGING</span><br><span class=\"line\">logging.config= # Location of the logging configuration file. For instance `classpath:logback.xml` for Logback</span><br><span class=\"line\">logging.exception-conversion-word=%wEx # Conversion word used when logging exceptions.</span><br><span class=\"line\">logging.file= # Log file name. For instance `myapp.log`</span><br><span class=\"line\">logging.level.*= # Log levels severity mapping. For instance `logging.level.org.springframework=DEBUG`</span><br><span class=\"line\">logging.path= # Location of the log file. For instance `/var/log`</span><br><span class=\"line\">logging.pattern.console= # Appender pattern for output to the console. Only supported with the default logback setup.</span><br><span class=\"line\">logging.pattern.file= # Appender pattern for output to the file. Only supported with the default logback setup.</span><br><span class=\"line\">logging.pattern.level= # Appender pattern for log level (default %5p). Only supported with the default logback setup.</span><br><span class=\"line\">logging.register-shutdown-hook=false # Register a shutdown hook for the logging system when it is initialized.</span><br><span class=\"line\"></span><br><span class=\"line\"># AOP</span><br><span class=\"line\">spring.aop.auto=true # Add @EnableAspectJAutoProxy.</span><br><span class=\"line\">spring.aop.proxy-target-class=false # Whether subclass-based (CGLIB) proxies are to be created (true) as opposed to standard Java interface-based proxies (false).</span><br><span class=\"line\"></span><br><span class=\"line\"># IDENTITY (ContextIdApplicationContextInitializer)</span><br><span class=\"line\">spring.application.index= # Application index.</span><br><span class=\"line\">spring.application.name= # Application name.</span><br><span class=\"line\"></span><br><span class=\"line\"># ADMIN (SpringApplicationAdminJmxAutoConfiguration)</span><br><span class=\"line\">spring.application.admin.enabled=false # Enable admin features for the application.</span><br><span class=\"line\">spring.application.admin.jmx-name=org.springframework.boot:type=Admin,name=SpringApplication # JMX name of the application admin MBean.</span><br><span class=\"line\"></span><br><span class=\"line\"># AUTO-CONFIGURATION</span><br><span class=\"line\">spring.autoconfigure.exclude= # Auto-configuration classes to exclude.</span><br><span class=\"line\"></span><br><span class=\"line\"># SPRING CORE</span><br><span class=\"line\">spring.beaninfo.ignore=true # Skip search of BeanInfo classes.</span><br><span class=\"line\"></span><br><span class=\"line\"># SPRING CACHE (CacheProperties)</span><br><span class=\"line\">spring.cache.cache-names= # Comma-separated list of cache names to create if supported by the underlying cache manager.</span><br><span class=\"line\">spring.cache.caffeine.spec= # The spec to use to create caches. Check CaffeineSpec for more details on the spec format.</span><br><span class=\"line\">spring.cache.couchbase.expiration=0 # Entry expiration in milliseconds. By default the entries never expire.</span><br><span class=\"line\">spring.cache.ehcache.config= # The location of the configuration file to use to initialize EhCache.</span><br><span class=\"line\">spring.cache.guava.spec= # The spec to use to create caches. Check CacheBuilderSpec for more details on the spec format.</span><br><span class=\"line\">spring.cache.hazelcast.config= # The location of the configuration file to use to initialize Hazelcast.</span><br><span class=\"line\">spring.cache.infinispan.config= # The location of the configuration file to use to initialize Infinispan.</span><br><span class=\"line\">spring.cache.jcache.config= # The location of the configuration file to use to initialize the cache manager.</span><br><span class=\"line\">spring.cache.jcache.provider= # Fully qualified name of the CachingProvider implementation to use to retrieve the JSR-107 compliant cache manager. Only needed if more than one JSR-107 implementation is available on the classpath.</span><br><span class=\"line\">spring.cache.type= # Cache type, auto-detected according to the environment by default.</span><br><span class=\"line\"></span><br><span class=\"line\"># SPRING CONFIG - using environment property only (ConfigFileApplicationListener)</span><br><span class=\"line\">spring.config.location= # Config file locations.</span><br><span class=\"line\">spring.config.name=application # Config file name.</span><br><span class=\"line\"></span><br><span class=\"line\"># HAZELCAST (HazelcastProperties)</span><br><span class=\"line\">spring.hazelcast.config= # The location of the configuration file to use to initialize Hazelcast.</span><br><span class=\"line\"></span><br><span class=\"line\"># PROJECT INFORMATION (ProjectInfoProperties)</span><br><span class=\"line\">spring.info.build.location=classpath:META-INF/build-info.properties # Location of the generated build-info.properties file.</span><br><span class=\"line\">spring.info.git.location=classpath:git.properties # Location of the generated git.properties file.</span><br><span class=\"line\"></span><br><span class=\"line\"># JMX</span><br><span class=\"line\">spring.jmx.default-domain= # JMX domain name.</span><br><span class=\"line\">spring.jmx.enabled=true # Expose management beans to the JMX domain.</span><br><span class=\"line\">spring.jmx.server=mbeanServer # MBeanServer bean name.</span><br><span class=\"line\"></span><br><span class=\"line\"># Email (MailProperties)</span><br><span class=\"line\">spring.mail.default-encoding=UTF-8 # Default MimeMessage encoding.</span><br><span class=\"line\">spring.mail.host= # SMTP server host. For instance `smtp.example.com`</span><br><span class=\"line\">spring.mail.jndi-name= # Session JNDI name. When set, takes precedence to others mail settings.</span><br><span class=\"line\">spring.mail.password= # Login password of the SMTP server.</span><br><span class=\"line\">spring.mail.port= # SMTP server port.</span><br><span class=\"line\">spring.mail.properties.*= # Additional JavaMail session properties.</span><br><span class=\"line\">spring.mail.protocol=smtp # Protocol used by the SMTP server.</span><br><span class=\"line\">spring.mail.test-connection=false # Test that the mail server is available on startup.</span><br><span class=\"line\">spring.mail.username= # Login user of the SMTP server.</span><br><span class=\"line\"></span><br><span class=\"line\"># APPLICATION SETTINGS (SpringApplication)</span><br><span class=\"line\">spring.main.banner-mode=console # Mode used to display the banner when the application runs.</span><br><span class=\"line\">spring.main.sources= # Sources (class name, package name or XML resource location) to include in the ApplicationContext.</span><br><span class=\"line\">spring.main.web-environment= # Run the application in a web environment (auto-detected by default).</span><br><span class=\"line\"></span><br><span class=\"line\"># FILE ENCODING (FileEncodingApplicationListener)</span><br><span class=\"line\">spring.mandatory-file-encoding= # Expected character encoding the application must use.</span><br><span class=\"line\"></span><br><span class=\"line\"># INTERNATIONALIZATION (MessageSourceAutoConfiguration)</span><br><span class=\"line\">spring.messages.always-use-message-format=false # Set whether to always apply the MessageFormat rules, parsing even messages without arguments.</span><br><span class=\"line\">spring.messages.basename=messages # Comma-separated list of basenames, each following the ResourceBundle convention.</span><br><span class=\"line\">spring.messages.cache-seconds=-1 # Loaded resource bundle files cache expiration, in seconds. When set to -1, bundles are cached forever.</span><br><span class=\"line\">spring.messages.encoding=UTF-8 # Message bundles encoding.</span><br><span class=\"line\">spring.messages.fallback-to-system-locale=true # Set whether to fall back to the system Locale if no files for a specific Locale have been found.</span><br><span class=\"line\"></span><br><span class=\"line\"># OUTPUT</span><br><span class=\"line\">spring.output.ansi.enabled=detect # Configure the ANSI output (can be \"detect\", \"always\", \"never\").</span><br><span class=\"line\"></span><br><span class=\"line\"># PID FILE (ApplicationPidFileWriter)</span><br><span class=\"line\">spring.pid.fail-on-write-error= # Fail if ApplicationPidFileWriter is used but it cannot write the PID file.</span><br><span class=\"line\">spring.pid.file= # Location of the PID file to write (if ApplicationPidFileWriter is used).</span><br><span class=\"line\"></span><br><span class=\"line\"># PROFILES</span><br><span class=\"line\">spring.profiles.active= # Comma-separated list of active profiles.</span><br><span class=\"line\">spring.profiles.include= # Unconditionally activate the specified comma separated profiles.</span><br><span class=\"line\"></span><br><span class=\"line\"># SENDGRID (SendGridAutoConfiguration)</span><br><span class=\"line\">spring.sendgrid.api-key= # SendGrid api key (alternative to username/password)</span><br><span class=\"line\">spring.sendgrid.username= # SendGrid account username</span><br><span class=\"line\">spring.sendgrid.password= # SendGrid account password</span><br><span class=\"line\">spring.sendgrid.proxy.host= # SendGrid proxy host</span><br><span class=\"line\">spring.sendgrid.proxy.port= # SendGrid proxy port</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"># ----------------------------------------</span><br><span class=\"line\"># WEB PROPERTIES</span><br><span class=\"line\"># ----------------------------------------</span><br><span class=\"line\"></span><br><span class=\"line\"># EMBEDDED SERVER CONFIGURATION (ServerProperties)</span><br><span class=\"line\">server.address= # Network address to which the server should bind to.</span><br><span class=\"line\">server.compression.enabled=false # If response compression is enabled.</span><br><span class=\"line\">server.compression.excluded-user-agents= # List of user-agents to exclude from compression.</span><br><span class=\"line\">server.compression.mime-types= # Comma-separated list of MIME types that should be compressed. For instance `text/html,text/css,application/json`</span><br><span class=\"line\">server.compression.min-response-size= # Minimum response size that is required for compression to be performed. For instance 2048</span><br><span class=\"line\">server.connection-timeout= # Time in milliseconds that connectors will wait for another HTTP request before closing the connection. When not set, the connector's container-specific default will be used. Use a value of -1 to indicate no (i.e. infinite) timeout.</span><br><span class=\"line\">server.context-parameters.*= # Servlet context init parameters. For instance `server.context-parameters.a=alpha`</span><br><span class=\"line\">server.context-path= # Context path of the application.</span><br><span class=\"line\">server.display-name=application # Display name of the application.</span><br><span class=\"line\">server.max-http-header-size=0 # Maximum size in bytes of the HTTP message header.</span><br><span class=\"line\">server.max-http-post-size=0 # Maximum size in bytes of the HTTP post content.</span><br><span class=\"line\">server.error.include-stacktrace=never # When to include a \"stacktrace\" attribute.</span><br><span class=\"line\">server.error.path=/error # Path of the error controller.</span><br><span class=\"line\">server.error.whitelabel.enabled=true # Enable the default error page displayed in browsers in case of a server error.</span><br><span class=\"line\">server.jetty.acceptors= # Number of acceptor threads to use.</span><br><span class=\"line\">server.jetty.selectors= # Number of selector threads to use.</span><br><span class=\"line\">server.jsp-servlet.class-name=org.apache.jasper.servlet.JspServlet # The class name of the JSP servlet.</span><br><span class=\"line\">server.jsp-servlet.init-parameters.*= # Init parameters used to configure the JSP servlet</span><br><span class=\"line\">server.jsp-servlet.registered=true # Whether or not the JSP servlet is registered</span><br><span class=\"line\">server.port=8080 # Server HTTP port.</span><br><span class=\"line\">server.server-header= # Value to use for the Server response header (no header is sent if empty)</span><br><span class=\"line\">server.servlet-path=/ # Path of the main dispatcher servlet.</span><br><span class=\"line\">server.use-forward-headers= # If X-Forwarded-* headers should be applied to the HttpRequest.</span><br><span class=\"line\">server.session.cookie.comment= # Comment for the session cookie.</span><br><span class=\"line\">server.session.cookie.domain= # Domain for the session cookie.</span><br><span class=\"line\">server.session.cookie.http-only= # \"HttpOnly\" flag for the session cookie.</span><br><span class=\"line\">server.session.cookie.max-age= # Maximum age of the session cookie in seconds.</span><br><span class=\"line\">server.session.cookie.name= # Session cookie name.</span><br><span class=\"line\">server.session.cookie.path= # Path of the session cookie.</span><br><span class=\"line\">server.session.cookie.secure= # \"Secure\" flag for the session cookie.</span><br><span class=\"line\">server.session.persistent=false # Persist session data between restarts.</span><br><span class=\"line\">server.session.store-dir= # Directory used to store session data.</span><br><span class=\"line\">server.session.timeout= # Session timeout in seconds.</span><br><span class=\"line\">server.session.tracking-modes= # Session tracking modes (one or more of the following: \"cookie\", \"url\", \"ssl\").</span><br><span class=\"line\">server.ssl.ciphers= # Supported SSL ciphers.</span><br><span class=\"line\">server.ssl.client-auth= # Whether client authentication is wanted (\"want\") or needed (\"need\"). Requires a trust store.</span><br><span class=\"line\">server.ssl.enabled= # Enable SSL support.</span><br><span class=\"line\">server.ssl.enabled-protocols= # Enabled SSL protocols.</span><br><span class=\"line\">server.ssl.key-alias= # Alias that identifies the key in the key store.</span><br><span class=\"line\">server.ssl.key-password= # Password used to access the key in the key store.</span><br><span class=\"line\">server.ssl.key-store= # Path to the key store that holds the SSL certificate (typically a jks file).</span><br><span class=\"line\">server.ssl.key-store-password= # Password used to access the key store.</span><br><span class=\"line\">server.ssl.key-store-provider= # Provider for the key store.</span><br><span class=\"line\">server.ssl.key-store-type= # Type of the key store.</span><br><span class=\"line\">server.ssl.protocol=TLS # SSL protocol to use.</span><br><span class=\"line\">server.ssl.trust-store= # Trust store that holds SSL certificates.</span><br><span class=\"line\">server.ssl.trust-store-password= # Password used to access the trust store.</span><br><span class=\"line\">server.ssl.trust-store-provider= # Provider for the trust store.</span><br><span class=\"line\">server.ssl.trust-store-type= # Type of the trust store.</span><br><span class=\"line\">server.tomcat.accesslog.directory=logs # Directory in which log files are created. Can be relative to the tomcat base dir or absolute.</span><br><span class=\"line\">server.tomcat.accesslog.enabled=false # Enable access log.</span><br><span class=\"line\">server.tomcat.accesslog.pattern=common # Format pattern for access logs.</span><br><span class=\"line\">server.tomcat.accesslog.prefix=access_log # Log file name prefix.</span><br><span class=\"line\">server.tomcat.accesslog.rename-on-rotate=false # Defer inclusion of the date stamp in the file name until rotate time.</span><br><span class=\"line\">server.tomcat.accesslog.suffix=.log # Log file name suffix.</span><br><span class=\"line\">server.tomcat.background-processor-delay=30 # Delay in seconds between the invocation of backgroundProcess methods.</span><br><span class=\"line\">server.tomcat.basedir= # Tomcat base directory. If not specified a temporary directory will be used.</span><br><span class=\"line\">server.tomcat.internal-proxies=10\\\\.\\\\d&#123;1,3&#125;\\\\.\\\\d&#123;1,3&#125;\\\\.\\\\d&#123;1,3&#125;|\\\\</span><br><span class=\"line\">        192\\\\.168\\\\.\\\\d&#123;1,3&#125;\\\\.\\\\d&#123;1,3&#125;|\\\\</span><br><span class=\"line\">        169\\\\.254\\\\.\\\\d&#123;1,3&#125;\\\\.\\\\d&#123;1,3&#125;|\\\\</span><br><span class=\"line\">        127\\\\.\\\\d&#123;1,3&#125;\\\\.\\\\d&#123;1,3&#125;\\\\.\\\\d&#123;1,3&#125;|\\\\</span><br><span class=\"line\">        172\\\\.1[6-9]&#123;1&#125;\\\\.\\\\d&#123;1,3&#125;\\\\.\\\\d&#123;1,3&#125;|\\\\</span><br><span class=\"line\">        172\\\\.2[0-9]&#123;1&#125;\\\\.\\\\d&#123;1,3&#125;\\\\.\\\\d&#123;1,3&#125;|\\\\</span><br><span class=\"line\">        172\\\\.3[0-1]&#123;1&#125;\\\\.\\\\d&#123;1,3&#125;\\\\.\\\\d&#123;1,3&#125; # regular expression matching trusted IP addresses.</span><br><span class=\"line\">server.tomcat.max-threads=0 # Maximum amount of worker threads.</span><br><span class=\"line\">server.tomcat.min-spare-threads=0 # Minimum amount of worker threads.</span><br><span class=\"line\">server.tomcat.port-header=X-Forwarded-Port # Name of the HTTP header used to override the original port value.</span><br><span class=\"line\">server.tomcat.protocol-header= # Header that holds the incoming protocol, usually named \"X-Forwarded-Proto\".</span><br><span class=\"line\">server.tomcat.protocol-header-https-value=https # Value of the protocol header that indicates that the incoming request uses SSL.</span><br><span class=\"line\">server.tomcat.redirect-context-root= # Whether requests to the context root should be redirected by appending a / to the path.</span><br><span class=\"line\">server.tomcat.remote-ip-header= # Name of the http header from which the remote ip is extracted. For instance `X-FORWARDED-FOR`</span><br><span class=\"line\">server.tomcat.uri-encoding=UTF-8 # Character encoding to use to decode the URI.</span><br><span class=\"line\">server.undertow.accesslog.dir= # Undertow access log directory.</span><br><span class=\"line\">server.undertow.accesslog.enabled=false # Enable access log.</span><br><span class=\"line\">server.undertow.accesslog.pattern=common # Format pattern for access logs.</span><br><span class=\"line\">server.undertow.buffer-size= # Size of each buffer in bytes.</span><br><span class=\"line\">server.undertow.buffers-per-region= # Number of buffer per region.</span><br><span class=\"line\">server.undertow.direct-buffers= # Allocate buffers outside the Java heap.</span><br><span class=\"line\">server.undertow.io-threads= # Number of I/O threads to create for the worker.</span><br><span class=\"line\">server.undertow.worker-threads= # Number of worker threads.</span><br><span class=\"line\"></span><br><span class=\"line\"># FREEMARKER (FreeMarkerAutoConfiguration)</span><br><span class=\"line\">spring.freemarker.allow-request-override=false # Set whether HttpServletRequest attributes are allowed to override (hide) controller generated model attributes of the same name.</span><br><span class=\"line\">spring.freemarker.allow-session-override=false # Set whether HttpSession attributes are allowed to override (hide) controller generated model attributes of the same name.</span><br><span class=\"line\">spring.freemarker.cache=false # Enable template caching.</span><br><span class=\"line\">spring.freemarker.charset=UTF-8 # Template encoding.</span><br><span class=\"line\">spring.freemarker.check-template-location=true # Check that the templates location exists.</span><br><span class=\"line\">spring.freemarker.content-type=text/html # Content-Type value.</span><br><span class=\"line\">spring.freemarker.enabled=true # Enable MVC view resolution for this technology.</span><br><span class=\"line\">spring.freemarker.expose-request-attributes=false # Set whether all request attributes should be added to the model prior to merging with the template.</span><br><span class=\"line\">spring.freemarker.expose-session-attributes=false # Set whether all HttpSession attributes should be added to the model prior to merging with the template.</span><br><span class=\"line\">spring.freemarker.expose-spring-macro-helpers=true # Set whether to expose a RequestContext for use by Spring's macro library, under the name \"springMacroRequestContext\".</span><br><span class=\"line\">spring.freemarker.prefer-file-system-access=true # Prefer file system access for template loading. File system access enables hot detection of template changes.</span><br><span class=\"line\">spring.freemarker.prefix= # Prefix that gets prepended to view names when building a URL.</span><br><span class=\"line\">spring.freemarker.request-context-attribute= # Name of the RequestContext attribute for all views.</span><br><span class=\"line\">spring.freemarker.settings.*= # Well-known FreeMarker keys which will be passed to FreeMarker's Configuration.</span><br><span class=\"line\">spring.freemarker.suffix= # Suffix that gets appended to view names when building a URL.</span><br><span class=\"line\">spring.freemarker.template-loader-path=classpath:/templates/ # Comma-separated list of template paths.</span><br><span class=\"line\">spring.freemarker.view-names= # White list of view names that can be resolved.</span><br><span class=\"line\"></span><br><span class=\"line\"># GROOVY TEMPLATES (GroovyTemplateAutoConfiguration)</span><br><span class=\"line\">spring.groovy.template.allow-request-override=false # Set whether HttpServletRequest attributes are allowed to override (hide) controller generated model attributes of the same name.</span><br><span class=\"line\">spring.groovy.template.allow-session-override=false # Set whether HttpSession attributes are allowed to override (hide) controller generated model attributes of the same name.</span><br><span class=\"line\">spring.groovy.template.cache= # Enable template caching.</span><br><span class=\"line\">spring.groovy.template.charset=UTF-8 # Template encoding.</span><br><span class=\"line\">spring.groovy.template.check-template-location=true # Check that the templates location exists.</span><br><span class=\"line\">spring.groovy.template.configuration.*= # See GroovyMarkupConfigurer</span><br><span class=\"line\">spring.groovy.template.content-type=test/html # Content-Type value.</span><br><span class=\"line\">spring.groovy.template.enabled=true # Enable MVC view resolution for this technology.</span><br><span class=\"line\">spring.groovy.template.expose-request-attributes=false # Set whether all request attributes should be added to the model prior to merging with the template.</span><br><span class=\"line\">spring.groovy.template.expose-session-attributes=false # Set whether all HttpSession attributes should be added to the model prior to merging with the template.</span><br><span class=\"line\">spring.groovy.template.expose-spring-macro-helpers=true # Set whether to expose a RequestContext for use by Spring's macro library, under the name \"springMacroRequestContext\".</span><br><span class=\"line\">spring.groovy.template.prefix= # Prefix that gets prepended to view names when building a URL.</span><br><span class=\"line\">spring.groovy.template.request-context-attribute= # Name of the RequestContext attribute for all views.</span><br><span class=\"line\">spring.groovy.template.resource-loader-path=classpath:/templates/ # Template path.</span><br><span class=\"line\">spring.groovy.template.suffix=.tpl # Suffix that gets appended to view names when building a URL.</span><br><span class=\"line\">spring.groovy.template.view-names= # White list of view names that can be resolved.</span><br><span class=\"line\"></span><br><span class=\"line\"># SPRING HATEOAS (HateoasProperties)</span><br><span class=\"line\">spring.hateoas.use-hal-as-default-json-media-type=true # Specify if application/hal+json responses should be sent to requests that accept application/json.</span><br><span class=\"line\"></span><br><span class=\"line\"># HTTP message conversion</span><br><span class=\"line\">spring.http.converters.preferred-json-mapper=jackson # Preferred JSON mapper to use for HTTP message conversion. Set to \"gson\" to force the use of Gson when both it and Jackson are on the classpath.</span><br><span class=\"line\"></span><br><span class=\"line\"># HTTP encoding (HttpEncodingProperties)</span><br><span class=\"line\">spring.http.encoding.charset=UTF-8 # Charset of HTTP requests and responses. Added to the \"Content-Type\" header if not set explicitly.</span><br><span class=\"line\">spring.http.encoding.enabled=true # Enable http encoding support.</span><br><span class=\"line\">spring.http.encoding.force= # Force the encoding to the configured charset on HTTP requests and responses.</span><br><span class=\"line\">spring.http.encoding.force-request= # Force the encoding to the configured charset on HTTP requests. Defaults to true when \"force\" has not been specified.</span><br><span class=\"line\">spring.http.encoding.force-response= # Force the encoding to the configured charset on HTTP responses.</span><br><span class=\"line\"></span><br><span class=\"line\"># MULTIPART (MultipartProperties)</span><br><span class=\"line\">spring.http.multipart.enabled=true # Enable support of multi-part uploads.</span><br><span class=\"line\">spring.http.multipart.file-size-threshold=0 # Threshold after which files will be written to disk. Values can use the suffixed \"MB\" or \"KB\" to indicate a Megabyte or Kilobyte size.</span><br><span class=\"line\">spring.http.multipart.location= # Intermediate location of uploaded files.</span><br><span class=\"line\">spring.http.multipart.max-file-size=1Mb # Max file size. Values can use the suffixed \"MB\" or \"KB\" to indicate a Megabyte or Kilobyte size.</span><br><span class=\"line\">spring.http.multipart.max-request-size=10Mb # Max request size. Values can use the suffixed \"MB\" or \"KB\" to indicate a Megabyte or Kilobyte size.</span><br><span class=\"line\"></span><br><span class=\"line\"># JACKSON (JacksonProperties)</span><br><span class=\"line\">spring.jackson.date-format= # Date format string or a fully-qualified date format class name. For instance `yyyy-MM-dd HH:mm:ss`.</span><br><span class=\"line\">spring.jackson.default-property-inclusion= # Controls the inclusion of properties during serialization.</span><br><span class=\"line\">spring.jackson.deserialization.*= # Jackson on/off features that affect the way Java objects are deserialized.</span><br><span class=\"line\">spring.jackson.generator.*= # Jackson on/off features for generators.</span><br><span class=\"line\">spring.jackson.joda-date-time-format= # Joda date time format string. If not configured, \"date-format\" will be used as a fallback if it is configured with a format string.</span><br><span class=\"line\">spring.jackson.locale= # Locale used for formatting.</span><br><span class=\"line\">spring.jackson.mapper.*= # Jackson general purpose on/off features.</span><br><span class=\"line\">spring.jackson.parser.*= # Jackson on/off features for parsers.</span><br><span class=\"line\">spring.jackson.property-naming-strategy= # One of the constants on Jackson's PropertyNamingStrategy. Can also be a fully-qualified class name of a PropertyNamingStrategy subclass.</span><br><span class=\"line\">spring.jackson.serialization.*= # Jackson on/off features that affect the way Java objects are serialized.</span><br><span class=\"line\">spring.jackson.serialization-inclusion= # Controls the inclusion of properties during serialization. Configured with one of the values in Jackson's JsonInclude.Include enumeration.</span><br><span class=\"line\">spring.jackson.time-zone= # Time zone used when formatting dates. For instance `America/Los_Angeles`</span><br><span class=\"line\"></span><br><span class=\"line\"># JERSEY (JerseyProperties)</span><br><span class=\"line\">spring.jersey.application-path= # Path that serves as the base URI for the application. Overrides the value of \"@ApplicationPath\" if specified.</span><br><span class=\"line\">spring.jersey.filter.order=0 # Jersey filter chain order.</span><br><span class=\"line\">spring.jersey.init.*= # Init parameters to pass to Jersey via the servlet or filter.</span><br><span class=\"line\">spring.jersey.servlet.load-on-startup=-1 # Load on startup priority of the Jersey servlet.</span><br><span class=\"line\">spring.jersey.type=servlet # Jersey integration type. Can be either \"servlet\" or \"filter\".</span><br><span class=\"line\"></span><br><span class=\"line\"># SPRING MOBILE DEVICE VIEWS (DeviceDelegatingViewResolverAutoConfiguration)</span><br><span class=\"line\">spring.mobile.devicedelegatingviewresolver.enable-fallback=false # Enable support for fallback resolution.</span><br><span class=\"line\">spring.mobile.devicedelegatingviewresolver.enabled=false # Enable device view resolver.</span><br><span class=\"line\">spring.mobile.devicedelegatingviewresolver.mobile-prefix=mobile/ # Prefix that gets prepended to view names for mobile devices.</span><br><span class=\"line\">spring.mobile.devicedelegatingviewresolver.mobile-suffix= # Suffix that gets appended to view names for mobile devices.</span><br><span class=\"line\">spring.mobile.devicedelegatingviewresolver.normal-prefix= # Prefix that gets prepended to view names for normal devices.</span><br><span class=\"line\">spring.mobile.devicedelegatingviewresolver.normal-suffix= # Suffix that gets appended to view names for normal devices.</span><br><span class=\"line\">spring.mobile.devicedelegatingviewresolver.tablet-prefix=tablet/ # Prefix that gets prepended to view names for tablet devices.</span><br><span class=\"line\">spring.mobile.devicedelegatingviewresolver.tablet-suffix= # Suffix that gets appended to view names for tablet devices.</span><br><span class=\"line\"></span><br><span class=\"line\"># SPRING MOBILE SITE PREFERENCE (SitePreferenceAutoConfiguration)</span><br><span class=\"line\">spring.mobile.sitepreference.enabled=true # Enable SitePreferenceHandler.</span><br><span class=\"line\"></span><br><span class=\"line\"># MUSTACHE TEMPLATES (MustacheAutoConfiguration)</span><br><span class=\"line\">spring.mustache.allow-request-override= # Set whether HttpServletRequest attributes are allowed to override (hide) controller generated model attributes of the same name.</span><br><span class=\"line\">spring.mustache.allow-session-override= # Set whether HttpSession attributes are allowed to override (hide) controller generated model attributes of the same name.</span><br><span class=\"line\">spring.mustache.cache= # Enable template caching.</span><br><span class=\"line\">spring.mustache.charset= # Template encoding.</span><br><span class=\"line\">spring.mustache.check-template-location= # Check that the templates location exists.</span><br><span class=\"line\">spring.mustache.content-type= # Content-Type value.</span><br><span class=\"line\">spring.mustache.enabled= # Enable MVC view resolution for this technology.</span><br><span class=\"line\">spring.mustache.expose-request-attributes= # Set whether all request attributes should be added to the model prior to merging with the template.</span><br><span class=\"line\">spring.mustache.expose-session-attributes= # Set whether all HttpSession attributes should be added to the model prior to merging with the template.</span><br><span class=\"line\">spring.mustache.expose-spring-macro-helpers= # Set whether to expose a RequestContext for use by Spring's macro library, under the name \"springMacroRequestContext\".</span><br><span class=\"line\">spring.mustache.prefix=classpath:/templates/ # Prefix to apply to template names.</span><br><span class=\"line\">spring.mustache.request-context-attribute= # Name of the RequestContext attribute for all views.</span><br><span class=\"line\">spring.mustache.suffix=.html # Suffix to apply to template names.</span><br><span class=\"line\">spring.mustache.view-names= # White list of view names that can be resolved.</span><br><span class=\"line\"></span><br><span class=\"line\"># SPRING MVC (WebMvcProperties)</span><br><span class=\"line\">spring.mvc.async.request-timeout= # Amount of time (in milliseconds) before asynchronous request handling times out.</span><br><span class=\"line\">spring.mvc.date-format= # Date format to use. For instance `dd/MM/yyyy`.</span><br><span class=\"line\">spring.mvc.dispatch-trace-request=false # Dispatch TRACE requests to the FrameworkServlet doService method.</span><br><span class=\"line\">spring.mvc.dispatch-options-request=true # Dispatch OPTIONS requests to the FrameworkServlet doService method.</span><br><span class=\"line\">spring.mvc.favicon.enabled=true # Enable resolution of favicon.ico.</span><br><span class=\"line\">spring.mvc.ignore-default-model-on-redirect=true # If the content of the \"default\" model should be ignored during redirect scenarios.</span><br><span class=\"line\">spring.mvc.locale= # Locale to use. By default, this locale is overridden by the \"Accept-Language\" header.</span><br><span class=\"line\">spring.mvc.locale-resolver=accept-header # Define how the locale should be resolved.</span><br><span class=\"line\">spring.mvc.log-resolved-exception=false # Enable warn logging of exceptions resolved by a \"HandlerExceptionResolver\".</span><br><span class=\"line\">spring.mvc.media-types.*= # Maps file extensions to media types for content negotiation.</span><br><span class=\"line\">spring.mvc.message-codes-resolver-format= # Formatting strategy for message codes. For instance `PREFIX_ERROR_CODE`.</span><br><span class=\"line\">spring.mvc.servlet.load-on-startup=-1 # Load on startup priority of the Spring Web Services servlet.</span><br><span class=\"line\">spring.mvc.static-path-pattern=/** # Path pattern used for static resources.</span><br><span class=\"line\">spring.mvc.throw-exception-if-no-handler-found=false # If a \"NoHandlerFoundException\" should be thrown if no Handler was found to process a request.</span><br><span class=\"line\">spring.mvc.view.prefix= # Spring MVC view prefix.</span><br><span class=\"line\">spring.mvc.view.suffix= # Spring MVC view suffix.</span><br><span class=\"line\"></span><br><span class=\"line\"># SPRING RESOURCES HANDLING (ResourceProperties)</span><br><span class=\"line\">spring.resources.add-mappings=true # Enable default resource handling.</span><br><span class=\"line\">spring.resources.cache-period= # Cache period for the resources served by the resource handler, in seconds.</span><br><span class=\"line\">spring.resources.chain.cache=true # Enable caching in the Resource chain.</span><br><span class=\"line\">spring.resources.chain.enabled= # Enable the Spring Resource Handling chain. Disabled by default unless at least one strategy has been enabled.</span><br><span class=\"line\">spring.resources.chain.gzipped=false # Enable resolution of already gzipped resources.</span><br><span class=\"line\">spring.resources.chain.html-application-cache=false # Enable HTML5 application cache manifest rewriting.</span><br><span class=\"line\">spring.resources.chain.strategy.content.enabled=false # Enable the content Version Strategy.</span><br><span class=\"line\">spring.resources.chain.strategy.content.paths=/** # Comma-separated list of patterns to apply to the Version Strategy.</span><br><span class=\"line\">spring.resources.chain.strategy.fixed.enabled=false # Enable the fixed Version Strategy.</span><br><span class=\"line\">spring.resources.chain.strategy.fixed.paths=/** # Comma-separated list of patterns to apply to the Version Strategy.</span><br><span class=\"line\">spring.resources.chain.strategy.fixed.version= # Version string to use for the Version Strategy.</span><br><span class=\"line\">spring.resources.static-locations=classpath:/META-INF/resources/,classpath:/resources/,classpath:/static/,classpath:/public/ # Locations of static resources.</span><br><span class=\"line\"></span><br><span class=\"line\"># SPRING SESSION (SessionProperties)</span><br><span class=\"line\">spring.session.hazelcast.map-name=spring:session:sessions # Name of the map used to store sessions.</span><br><span class=\"line\">spring.session.jdbc.initializer.enabled=true # Create the required session tables on startup if necessary.</span><br><span class=\"line\">spring.session.jdbc.schema=classpath:org/springframework/session/jdbc/schema-@@platform@@.sql # Path to the SQL file to use to initialize the database schema.</span><br><span class=\"line\">spring.session.jdbc.table-name=SPRING_SESSION # Name of database table used to store sessions.</span><br><span class=\"line\">spring.session.mongo.collection-name=sessions # Collection name used to store sessions.</span><br><span class=\"line\">spring.session.redis.flush-mode= # Flush mode for the Redis sessions.</span><br><span class=\"line\">spring.session.redis.namespace= # Namespace for keys used to store sessions.</span><br><span class=\"line\">spring.session.store-type= # Session store type.</span><br><span class=\"line\"></span><br><span class=\"line\"># SPRING SOCIAL (SocialWebAutoConfiguration)</span><br><span class=\"line\">spring.social.auto-connection-views=false # Enable the connection status view for supported providers.</span><br><span class=\"line\"></span><br><span class=\"line\"># SPRING SOCIAL FACEBOOK (FacebookAutoConfiguration)</span><br><span class=\"line\">spring.social.facebook.app-id= # your application's Facebook App ID</span><br><span class=\"line\">spring.social.facebook.app-secret= # your application's Facebook App Secret</span><br><span class=\"line\"></span><br><span class=\"line\"># SPRING SOCIAL LINKEDIN (LinkedInAutoConfiguration)</span><br><span class=\"line\">spring.social.linkedin.app-id= # your application's LinkedIn App ID</span><br><span class=\"line\">spring.social.linkedin.app-secret= # your application's LinkedIn App Secret</span><br><span class=\"line\"></span><br><span class=\"line\"># SPRING SOCIAL TWITTER (TwitterAutoConfiguration)</span><br><span class=\"line\">spring.social.twitter.app-id= # your application's Twitter App ID</span><br><span class=\"line\">spring.social.twitter.app-secret= # your application's Twitter App Secret</span><br><span class=\"line\"></span><br><span class=\"line\"># THYMELEAF (ThymeleafAutoConfiguration)</span><br><span class=\"line\">spring.thymeleaf.cache=true # Enable template caching.</span><br><span class=\"line\">spring.thymeleaf.check-template-location=true # Check that the templates location exists.</span><br><span class=\"line\">spring.thymeleaf.content-type=text/html # Content-Type value.</span><br><span class=\"line\">spring.thymeleaf.enabled=true # Enable MVC Thymeleaf view resolution.</span><br><span class=\"line\">spring.thymeleaf.encoding=UTF-8 # Template encoding.</span><br><span class=\"line\">spring.thymeleaf.excluded-view-names= # Comma-separated list of view names that should be excluded from resolution.</span><br><span class=\"line\">spring.thymeleaf.mode=HTML5 # Template mode to be applied to templates. See also StandardTemplateModeHandlers.</span><br><span class=\"line\">spring.thymeleaf.prefix=classpath:/templates/ # Prefix that gets prepended to view names when building a URL.</span><br><span class=\"line\">spring.thymeleaf.suffix=.html # Suffix that gets appended to view names when building a URL.</span><br><span class=\"line\">spring.thymeleaf.template-resolver-order= # Order of the template resolver in the chain.</span><br><span class=\"line\">spring.thymeleaf.view-names= # Comma-separated list of view names that can be resolved.</span><br><span class=\"line\"></span><br><span class=\"line\"># VELOCITY TEMPLATES (VelocityAutoConfiguration)</span><br><span class=\"line\">spring.velocity.allow-request-override=false # Set whether HttpServletRequest attributes are allowed to override (hide) controller generated model attributes of the same name.</span><br><span class=\"line\">spring.velocity.allow-session-override=false # Set whether HttpSession attributes are allowed to override (hide) controller generated model attributes of the same name.</span><br><span class=\"line\">spring.velocity.cache= # Enable template caching.</span><br><span class=\"line\">spring.velocity.charset=UTF-8 # Template encoding.</span><br><span class=\"line\">spring.velocity.check-template-location=true # Check that the templates location exists.</span><br><span class=\"line\">spring.velocity.content-type=text/html # Content-Type value.</span><br><span class=\"line\">spring.velocity.date-tool-attribute= # Name of the DateTool helper object to expose in the Velocity context of the view.</span><br><span class=\"line\">spring.velocity.enabled=true # Enable MVC view resolution for this technology.</span><br><span class=\"line\">spring.velocity.expose-request-attributes=false # Set whether all request attributes should be added to the model prior to merging with the template.</span><br><span class=\"line\">spring.velocity.expose-session-attributes=false # Set whether all HttpSession attributes should be added to the model prior to merging with the template.</span><br><span class=\"line\">spring.velocity.expose-spring-macro-helpers=true # Set whether to expose a RequestContext for use by Spring's macro library, under the name \"springMacroRequestContext\".</span><br><span class=\"line\">spring.velocity.number-tool-attribute= # Name of the NumberTool helper object to expose in the Velocity context of the view.</span><br><span class=\"line\">spring.velocity.prefer-file-system-access=true # Prefer file system access for template loading. File system access enables hot detection of template changes.</span><br><span class=\"line\">spring.velocity.prefix= # Prefix that gets prepended to view names when building a URL.</span><br><span class=\"line\">spring.velocity.properties.*= # Additional velocity properties.</span><br><span class=\"line\">spring.velocity.request-context-attribute= # Name of the RequestContext attribute for all views.</span><br><span class=\"line\">spring.velocity.resource-loader-path=classpath:/templates/ # Template path.</span><br><span class=\"line\">spring.velocity.suffix=.vm # Suffix that gets appended to view names when building a URL.</span><br><span class=\"line\">spring.velocity.toolbox-config-location= # Velocity Toolbox config location. For instance `/WEB-INF/toolbox.xml`</span><br><span class=\"line\">spring.velocity.view-names= # White list of view names that can be resolved.</span><br><span class=\"line\"></span><br><span class=\"line\"># SPRING WEB SERVICES (WebServicesProperties)</span><br><span class=\"line\">spring.webservices.path=/services # Path that serves as the base URI for the services.</span><br><span class=\"line\">spring.webservices.servlet.init= # Servlet init parameters to pass to Spring Web Services.</span><br><span class=\"line\">spring.webservices.servlet.load-on-startup=-1 # Load on startup priority of the Spring Web Services servlet.</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"># ----------------------------------------</span><br><span class=\"line\"># SECURITY PROPERTIES</span><br><span class=\"line\"># ----------------------------------------</span><br><span class=\"line\"># SECURITY (SecurityProperties)</span><br><span class=\"line\">security.basic.authorize-mode=role # Security authorize mode to apply.</span><br><span class=\"line\">security.basic.enabled=true # Enable basic authentication.</span><br><span class=\"line\">security.basic.path=/** # Comma-separated list of paths to secure.</span><br><span class=\"line\">security.basic.realm=Spring # HTTP basic realm name.</span><br><span class=\"line\">security.enable-csrf=false # Enable Cross Site Request Forgery support.</span><br><span class=\"line\">security.filter-order=0 # Security filter chain order.</span><br><span class=\"line\">security.filter-dispatcher-types=ASYNC, FORWARD, INCLUDE, REQUEST # Security filter chain dispatcher types.</span><br><span class=\"line\">security.headers.cache=true # Enable cache control HTTP headers.</span><br><span class=\"line\">security.headers.content-type=true # Enable \"X-Content-Type-Options\" header.</span><br><span class=\"line\">security.headers.frame=true # Enable \"X-Frame-Options\" header.</span><br><span class=\"line\">security.headers.hsts= # HTTP Strict Transport Security (HSTS) mode (none, domain, all).</span><br><span class=\"line\">security.headers.xss=true # Enable cross site scripting (XSS) protection.</span><br><span class=\"line\">security.ignored= # Comma-separated list of paths to exclude from the default secured paths.</span><br><span class=\"line\">security.require-ssl=false # Enable secure channel for all requests.</span><br><span class=\"line\">security.sessions=stateless # Session creation policy (always, never, if_required, stateless).</span><br><span class=\"line\">security.user.name=user # Default user name.</span><br><span class=\"line\">security.user.password= # Password for the default user name. A random password is logged on startup by default.</span><br><span class=\"line\">security.user.role=USER # Granted roles for the default user name.</span><br><span class=\"line\"></span><br><span class=\"line\"># SECURITY OAUTH2 CLIENT (OAuth2ClientProperties</span><br><span class=\"line\">security.oauth2.client.client-id= # OAuth2 client id.</span><br><span class=\"line\">security.oauth2.client.client-secret= # OAuth2 client secret. A random secret is generated by default</span><br><span class=\"line\"></span><br><span class=\"line\"># SECURITY OAUTH2 RESOURCES (ResourceServerProperties</span><br><span class=\"line\">security.oauth2.resource.id= # Identifier of the resource.</span><br><span class=\"line\">security.oauth2.resource.jwt.key-uri= # The URI of the JWT token. Can be set if the value is not available and the key is public.</span><br><span class=\"line\">security.oauth2.resource.jwt.key-value= # The verification key of the JWT token. Can either be a symmetric secret or PEM-encoded RSA public key.</span><br><span class=\"line\">security.oauth2.resource.prefer-token-info=true # Use the token info, can be set to false to use the user info.</span><br><span class=\"line\">security.oauth2.resource.service-id=resource #</span><br><span class=\"line\">security.oauth2.resource.token-info-uri= # URI of the token decoding endpoint.</span><br><span class=\"line\">security.oauth2.resource.token-type= # The token type to send when using the userInfoUri.</span><br><span class=\"line\">security.oauth2.resource.user-info-uri= # URI of the user endpoint.</span><br><span class=\"line\"></span><br><span class=\"line\"># SECURITY OAUTH2 SSO (OAuth2SsoProperties</span><br><span class=\"line\">security.oauth2.sso.filter-order= # Filter order to apply if not providing an explicit WebSecurityConfigurerAdapter</span><br><span class=\"line\">security.oauth2.sso.login-path=/login # Path to the login page, i.e. the one that triggers the redirect to the OAuth2 Authorization Server</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"># ----------------------------------------</span><br><span class=\"line\"># DATA PROPERTIES</span><br><span class=\"line\"># ----------------------------------------</span><br><span class=\"line\"></span><br><span class=\"line\"># FLYWAY (FlywayProperties)</span><br><span class=\"line\">flyway.baseline-description= #</span><br><span class=\"line\">flyway.baseline-version=1 # version to start migration</span><br><span class=\"line\">flyway.baseline-on-migrate= #</span><br><span class=\"line\">flyway.check-location=false # Check that migration scripts location exists.</span><br><span class=\"line\">flyway.clean-on-validation-error= #</span><br><span class=\"line\">flyway.enabled=true # Enable flyway.</span><br><span class=\"line\">flyway.encoding= #</span><br><span class=\"line\">flyway.ignore-failed-future-migration= #</span><br><span class=\"line\">flyway.init-sqls= # SQL statements to execute to initialize a connection immediately after obtaining it.</span><br><span class=\"line\">flyway.locations=classpath:db/migration # locations of migrations scripts</span><br><span class=\"line\">flyway.out-of-order= #</span><br><span class=\"line\">flyway.password= # JDBC password if you want Flyway to create its own DataSource</span><br><span class=\"line\">flyway.placeholder-prefix= #</span><br><span class=\"line\">flyway.placeholder-replacement= #</span><br><span class=\"line\">flyway.placeholder-suffix= #</span><br><span class=\"line\">flyway.placeholders.*= #</span><br><span class=\"line\">flyway.schemas= # schemas to update</span><br><span class=\"line\">flyway.sql-migration-prefix=V #</span><br><span class=\"line\">flyway.sql-migration-separator= #</span><br><span class=\"line\">flyway.sql-migration-suffix=.sql #</span><br><span class=\"line\">flyway.table= #</span><br><span class=\"line\">flyway.url= # JDBC url of the database to migrate. If not set, the primary configured data source is used.</span><br><span class=\"line\">flyway.user= # Login user of the database to migrate.</span><br><span class=\"line\">flyway.validate-on-migrate= #</span><br><span class=\"line\"></span><br><span class=\"line\"># LIQUIBASE (LiquibaseProperties)</span><br><span class=\"line\">liquibase.change-log=classpath:/db/changelog/db.changelog-master.yaml # Change log configuration path.</span><br><span class=\"line\">liquibase.check-change-log-location=true # Check the change log location exists.</span><br><span class=\"line\">liquibase.contexts= # Comma-separated list of runtime contexts to use.</span><br><span class=\"line\">liquibase.default-schema= # Default database schema.</span><br><span class=\"line\">liquibase.drop-first=false # Drop the database schema first.</span><br><span class=\"line\">liquibase.enabled=true # Enable liquibase support.</span><br><span class=\"line\">liquibase.labels= # Comma-separated list of runtime labels to use.</span><br><span class=\"line\">liquibase.parameters.*= # Change log parameters.</span><br><span class=\"line\">liquibase.password= # Login password of the database to migrate.</span><br><span class=\"line\">liquibase.rollback-file= # File to which rollback SQL will be written when an update is performed.</span><br><span class=\"line\">liquibase.url= # JDBC url of the database to migrate. If not set, the primary configured data source is used.</span><br><span class=\"line\">liquibase.user= # Login user of the database to migrate.</span><br><span class=\"line\"></span><br><span class=\"line\"># COUCHBASE (CouchbaseProperties)</span><br><span class=\"line\">spring.couchbase.bootstrap-hosts= # Couchbase nodes (host or IP address) to bootstrap from.</span><br><span class=\"line\">spring.couchbase.bucket.name=default # Name of the bucket to connect to.</span><br><span class=\"line\">spring.couchbase.bucket.password=  # Password of the bucket.</span><br><span class=\"line\">spring.couchbase.env.endpoints.key-value=1 # Number of sockets per node against the Key/value service.</span><br><span class=\"line\">spring.couchbase.env.endpoints.query=1 # Number of sockets per node against the Query (N1QL) service.</span><br><span class=\"line\">spring.couchbase.env.endpoints.view=1 # Number of sockets per node against the view service.</span><br><span class=\"line\">spring.couchbase.env.ssl.enabled= # Enable SSL support. Enabled automatically if a \"keyStore\" is provided unless specified otherwise.</span><br><span class=\"line\">spring.couchbase.env.ssl.key-store= # Path to the JVM key store that holds the certificates.</span><br><span class=\"line\">spring.couchbase.env.ssl.key-store-password= # Password used to access the key store.</span><br><span class=\"line\">spring.couchbase.env.timeouts.connect=5000 # Bucket connections timeout in milliseconds.</span><br><span class=\"line\">spring.couchbase.env.timeouts.key-value=2500 # Blocking operations performed on a specific key timeout in milliseconds.</span><br><span class=\"line\">spring.couchbase.env.timeouts.query=7500 # N1QL query operations timeout in milliseconds.</span><br><span class=\"line\">spring.couchbase.env.timeouts.socket-connect=1000 # Socket connect connections timeout in milliseconds.</span><br><span class=\"line\">spring.couchbase.env.timeouts.view=7500 # Regular and geospatial view operations timeout in milliseconds.</span><br><span class=\"line\"></span><br><span class=\"line\"># DAO (PersistenceExceptionTranslationAutoConfiguration)</span><br><span class=\"line\">spring.dao.exceptiontranslation.enabled=true # Enable the PersistenceExceptionTranslationPostProcessor.</span><br><span class=\"line\"></span><br><span class=\"line\"># CASSANDRA (CassandraProperties)</span><br><span class=\"line\">spring.data.cassandra.cluster-name= # Name of the Cassandra cluster.</span><br><span class=\"line\">spring.data.cassandra.compression= # Compression supported by the Cassandra binary protocol.</span><br><span class=\"line\">spring.data.cassandra.connect-timeout-millis= # Socket option: connection time out.</span><br><span class=\"line\">spring.data.cassandra.consistency-level= # Queries consistency level.</span><br><span class=\"line\">spring.data.cassandra.contact-points=localhost # Comma-separated list of cluster node addresses.</span><br><span class=\"line\">spring.data.cassandra.fetch-size= # Queries default fetch size.</span><br><span class=\"line\">spring.data.cassandra.keyspace-name= # Keyspace name to use.</span><br><span class=\"line\">spring.data.cassandra.load-balancing-policy= # Class name of the load balancing policy.</span><br><span class=\"line\">spring.data.cassandra.port= # Port of the Cassandra server.</span><br><span class=\"line\">spring.data.cassandra.password= # Login password of the server.</span><br><span class=\"line\">spring.data.cassandra.read-timeout-millis= # Socket option: read time out.</span><br><span class=\"line\">spring.data.cassandra.reconnection-policy= # Reconnection policy class.</span><br><span class=\"line\">spring.data.cassandra.retry-policy= # Class name of the retry policy.</span><br><span class=\"line\">spring.data.cassandra.serial-consistency-level= # Queries serial consistency level.</span><br><span class=\"line\">spring.data.cassandra.schema-action= # Schema action to take at startup.</span><br><span class=\"line\">spring.data.cassandra.ssl=false # Enable SSL support.</span><br><span class=\"line\">spring.data.cassandra.username= # Login user of the server.</span><br><span class=\"line\"></span><br><span class=\"line\"># DATA COUCHBASE (CouchbaseDataProperties)</span><br><span class=\"line\">spring.data.couchbase.auto-index=false # Automatically create views and indexes.</span><br><span class=\"line\">spring.data.couchbase.consistency=read-your-own-writes # Consistency to apply by default on generated queries.</span><br><span class=\"line\">spring.data.couchbase.repositories.enabled=true # Enable Couchbase repositories.</span><br><span class=\"line\"></span><br><span class=\"line\"># ELASTICSEARCH (ElasticsearchProperties)</span><br><span class=\"line\">spring.data.elasticsearch.cluster-name=elasticsearch # Elasticsearch cluster name.</span><br><span class=\"line\">spring.data.elasticsearch.cluster-nodes= # Comma-separated list of cluster node addresses. If not specified, starts a client node.</span><br><span class=\"line\">spring.data.elasticsearch.properties.*= # Additional properties used to configure the client.</span><br><span class=\"line\">spring.data.elasticsearch.repositories.enabled=true # Enable Elasticsearch repositories.</span><br><span class=\"line\"></span><br><span class=\"line\"># MONGODB (MongoProperties)</span><br><span class=\"line\">spring.data.mongodb.authentication-database= # Authentication database name.</span><br><span class=\"line\">spring.data.mongodb.database=test # Database name.</span><br><span class=\"line\">spring.data.mongodb.field-naming-strategy= # Fully qualified name of the FieldNamingStrategy to use.</span><br><span class=\"line\">spring.data.mongodb.grid-fs-database= # GridFS database name.</span><br><span class=\"line\">spring.data.mongodb.host=localhost # Mongo server host.</span><br><span class=\"line\">spring.data.mongodb.password= # Login password of the mongo server.</span><br><span class=\"line\">spring.data.mongodb.port=27017 # Mongo server port.</span><br><span class=\"line\">spring.data.mongodb.repositories.enabled=true # Enable Mongo repositories.</span><br><span class=\"line\">spring.data.mongodb.uri=mongodb://localhost/test # Mongo database URI. When set, host and port are ignored.</span><br><span class=\"line\">spring.data.mongodb.username= # Login user of the mongo server.</span><br><span class=\"line\"></span><br><span class=\"line\"># DATA REDIS</span><br><span class=\"line\">spring.data.redis.repositories.enabled=true # Enable Redis repositories.</span><br><span class=\"line\"></span><br><span class=\"line\"># NEO4J (Neo4jProperties)</span><br><span class=\"line\">spring.data.neo4j.compiler= # Compiler to use.</span><br><span class=\"line\">spring.data.neo4j.embedded.enabled=true # Enable embedded mode if the embedded driver is available.</span><br><span class=\"line\">spring.data.neo4j.password= # Login password of the server.</span><br><span class=\"line\">spring.data.neo4j.repositories.enabled=true # Enable Neo4j repositories.</span><br><span class=\"line\">spring.data.neo4j.session.scope=singleton # Scope (lifetime) of the session.</span><br><span class=\"line\">spring.data.neo4j.uri= # URI used by the driver. Auto-detected by default.</span><br><span class=\"line\">spring.data.neo4j.username= # Login user of the server.</span><br><span class=\"line\"></span><br><span class=\"line\"># DATA REST (RepositoryRestProperties)</span><br><span class=\"line\">spring.data.rest.base-path= # Base path to be used by Spring Data REST to expose repository resources.</span><br><span class=\"line\">spring.data.rest.default-page-size= # Default size of pages.</span><br><span class=\"line\">spring.data.rest.enable-enum-translation= # Enable enum value translation via the Spring Data REST default resource bundle.</span><br><span class=\"line\">spring.data.rest.limit-param-name= # Name of the URL query string parameter that indicates how many results to return at once.</span><br><span class=\"line\">spring.data.rest.max-page-size= # Maximum size of pages.</span><br><span class=\"line\">spring.data.rest.page-param-name= # Name of the URL query string parameter that indicates what page to return.</span><br><span class=\"line\">spring.data.rest.return-body-on-create= # Return a response body after creating an entity.</span><br><span class=\"line\">spring.data.rest.return-body-on-update= # Return a response body after updating an entity.</span><br><span class=\"line\">spring.data.rest.sort-param-name= # Name of the URL query string parameter that indicates what direction to sort results.</span><br><span class=\"line\"></span><br><span class=\"line\"># SOLR (SolrProperties)</span><br><span class=\"line\">spring.data.solr.host=http://127.0.0.1:8983/solr # Solr host. Ignored if \"zk-host\" is set.</span><br><span class=\"line\">spring.data.solr.repositories.enabled=true # Enable Solr repositories.</span><br><span class=\"line\">spring.data.solr.zk-host= # ZooKeeper host address in the form HOST:PORT.</span><br><span class=\"line\"></span><br><span class=\"line\"># DATASOURCE (DataSourceAutoConfiguration &amp; DataSourceProperties)</span><br><span class=\"line\">spring.datasource.continue-on-error=false # Do not stop if an error occurs while initializing the database.</span><br><span class=\"line\">spring.datasource.data= # Data (DML) script resource reference.</span><br><span class=\"line\">spring.datasource.data-username= # User of the database to execute DML scripts (if different).</span><br><span class=\"line\">spring.datasource.data-password= # Password of the database to execute DML scripts (if different).</span><br><span class=\"line\">spring.datasource.dbcp.*= # Commons DBCP specific settings</span><br><span class=\"line\">spring.datasource.dbcp2.*= # Commons DBCP2 specific settings</span><br><span class=\"line\">spring.datasource.driver-class-name= # Fully qualified name of the JDBC driver. Auto-detected based on the URL by default.</span><br><span class=\"line\">spring.datasource.hikari.*= # Hikari specific settings</span><br><span class=\"line\">spring.datasource.initialize=true # Populate the database using 'data.sql'.</span><br><span class=\"line\">spring.datasource.jmx-enabled=false # Enable JMX support (if provided by the underlying pool).</span><br><span class=\"line\">spring.datasource.jndi-name= # JNDI location of the datasource. Class, url, username &amp; password are ignored when set.</span><br><span class=\"line\">spring.datasource.name=testdb # Name of the datasource.</span><br><span class=\"line\">spring.datasource.password= # Login password of the database.</span><br><span class=\"line\">spring.datasource.platform=all # Platform to use in the schema resource (schema-$&#123;platform&#125;.sql).</span><br><span class=\"line\">spring.datasource.schema= # Schema (DDL) script resource reference.</span><br><span class=\"line\">spring.datasource.schema-username= # User of the database to execute DDL scripts (if different).</span><br><span class=\"line\">spring.datasource.schema-password= # Password of the database to execute DDL scripts (if different).</span><br><span class=\"line\">spring.datasource.separator=; # Statement separator in SQL initialization scripts.</span><br><span class=\"line\">spring.datasource.sql-script-encoding= # SQL scripts encoding.</span><br><span class=\"line\">spring.datasource.tomcat.*= # Tomcat datasource specific settings</span><br><span class=\"line\">spring.datasource.type= # Fully qualified name of the connection pool implementation to use. By default, it is auto-detected from the classpath.</span><br><span class=\"line\">spring.datasource.url= # JDBC url of the database.</span><br><span class=\"line\">spring.datasource.username=</span><br><span class=\"line\"></span><br><span class=\"line\"># JEST (Elasticsearch HTTP client) (JestProperties)</span><br><span class=\"line\">spring.elasticsearch.jest.connection-timeout=3000 # Connection timeout in milliseconds.</span><br><span class=\"line\">spring.elasticsearch.jest.password= # Login password.</span><br><span class=\"line\">spring.elasticsearch.jest.proxy.host= # Proxy host the HTTP client should use.</span><br><span class=\"line\">spring.elasticsearch.jest.proxy.port= # Proxy port the HTTP client should use.</span><br><span class=\"line\">spring.elasticsearch.jest.read-timeout=3000 # Read timeout in milliseconds.</span><br><span class=\"line\">spring.elasticsearch.jest.uris=http://localhost:9200 # Comma-separated list of the Elasticsearch instances to use.</span><br><span class=\"line\">spring.elasticsearch.jest.username= # Login user.</span><br><span class=\"line\"></span><br><span class=\"line\"># H2 Web Console (H2ConsoleProperties)</span><br><span class=\"line\">spring.h2.console.enabled=false # Enable the console.</span><br><span class=\"line\">spring.h2.console.path=/h2-console # Path at which the console will be available.</span><br><span class=\"line\">spring.h2.console.settings.trace=false # Enable trace output.</span><br><span class=\"line\">spring.h2.console.settings.web-allow-others=false # Enable remote access.</span><br><span class=\"line\"></span><br><span class=\"line\"># JOOQ (JooqAutoConfiguration)</span><br><span class=\"line\">spring.jooq.sql-dialect= # SQLDialect JOOQ used when communicating with the configured datasource. For instance `POSTGRES`</span><br><span class=\"line\"></span><br><span class=\"line\"># JPA (JpaBaseConfiguration, HibernateJpaAutoConfiguration)</span><br><span class=\"line\">spring.data.jpa.repositories.enabled=true # Enable JPA repositories.</span><br><span class=\"line\">spring.jpa.database= # Target database to operate on, auto-detected by default. Can be alternatively set using the \"databasePlatform\" property.</span><br><span class=\"line\">spring.jpa.database-platform= # Name of the target database to operate on, auto-detected by default. Can be alternatively set using the \"Database\" enum.</span><br><span class=\"line\">spring.jpa.generate-ddl=false # Initialize the schema on startup.</span><br><span class=\"line\">spring.jpa.hibernate.ddl-auto= # DDL mode. This is actually a shortcut for the \"hibernate.hbm2ddl.auto\" property. Default to \"create-drop\" when using an embedded database, \"none\" otherwise.</span><br><span class=\"line\">spring.jpa.hibernate.naming.implicit-strategy= # Hibernate 5 implicit naming strategy fully qualified name.</span><br><span class=\"line\">spring.jpa.hibernate.naming.physical-strategy= # Hibernate 5 physical naming strategy fully qualified name.</span><br><span class=\"line\">spring.jpa.hibernate.naming.strategy= # Hibernate 4 naming strategy fully qualified name. Not supported with Hibernate 5.</span><br><span class=\"line\">spring.jpa.hibernate.use-new-id-generator-mappings= # Use Hibernate's newer IdentifierGenerator for AUTO, TABLE and SEQUENCE.</span><br><span class=\"line\">spring.jpa.open-in-view=true # Register OpenEntityManagerInViewInterceptor. Binds a JPA EntityManager to the thread for the entire processing of the request.</span><br><span class=\"line\">spring.jpa.properties.*= # Additional native properties to set on the JPA provider.</span><br><span class=\"line\">spring.jpa.show-sql=false # Enable logging of SQL statements.</span><br><span class=\"line\"></span><br><span class=\"line\"># JTA (JtaAutoConfiguration)</span><br><span class=\"line\">spring.jta.enabled=true # Enable JTA support.</span><br><span class=\"line\">spring.jta.log-dir= # Transaction logs directory.</span><br><span class=\"line\">spring.jta.transaction-manager-id= # Transaction manager unique identifier.</span><br><span class=\"line\"></span><br><span class=\"line\"># ATOMIKOS (AtomikosProperties)</span><br><span class=\"line\">spring.jta.atomikos.connectionfactory.borrow-connection-timeout=30 # Timeout, in seconds, for borrowing connections from the pool.</span><br><span class=\"line\">spring.jta.atomikos.connectionfactory.ignore-session-transacted-flag=true # Whether or not to ignore the transacted flag when creating session.</span><br><span class=\"line\">spring.jta.atomikos.connectionfactory.local-transaction-mode=false # Whether or not local transactions are desired.</span><br><span class=\"line\">spring.jta.atomikos.connectionfactory.maintenance-interval=60 # The time, in seconds, between runs of the pool's maintenance thread.</span><br><span class=\"line\">spring.jta.atomikos.connectionfactory.max-idle-time=60 # The time, in seconds, after which connections are cleaned up from the pool.</span><br><span class=\"line\">spring.jta.atomikos.connectionfactory.max-lifetime=0 # The time, in seconds, that a connection can be pooled for before being destroyed. 0 denotes no limit.</span><br><span class=\"line\">spring.jta.atomikos.connectionfactory.max-pool-size=1 # The maximum size of the pool.</span><br><span class=\"line\">spring.jta.atomikos.connectionfactory.min-pool-size=1 # The minimum size of the pool.</span><br><span class=\"line\">spring.jta.atomikos.connectionfactory.reap-timeout=0 # The reap timeout, in seconds, for borrowed connections. 0 denotes no limit.</span><br><span class=\"line\">spring.jta.atomikos.connectionfactory.unique-resource-name=jmsConnectionFactory # The unique name used to identify the resource during recovery.</span><br><span class=\"line\">spring.jta.atomikos.datasource.borrow-connection-timeout=30 # Timeout, in seconds, for borrowing connections from the pool.</span><br><span class=\"line\">spring.jta.atomikos.datasource.default-isolation-level= # Default isolation level of connections provided by the pool.</span><br><span class=\"line\">spring.jta.atomikos.datasource.login-timeout= # Timeout, in seconds, for establishing a database connection.</span><br><span class=\"line\">spring.jta.atomikos.datasource.maintenance-interval=60 # The time, in seconds, between runs of the pool's maintenance thread.</span><br><span class=\"line\">spring.jta.atomikos.datasource.max-idle-time=60 # The time, in seconds, after which connections are cleaned up from the pool.</span><br><span class=\"line\">spring.jta.atomikos.datasource.max-lifetime=0 # The time, in seconds, that a connection can be pooled for before being destroyed. 0 denotes no limit.</span><br><span class=\"line\">spring.jta.atomikos.datasource.max-pool-size=1 # The maximum size of the pool.</span><br><span class=\"line\">spring.jta.atomikos.datasource.min-pool-size=1 # The minimum size of the pool.</span><br><span class=\"line\">spring.jta.atomikos.datasource.reap-timeout=0 # The reap timeout, in seconds, for borrowed connections. 0 denotes no limit.</span><br><span class=\"line\">spring.jta.atomikos.datasource.test-query= # SQL query or statement used to validate a connection before returning it.</span><br><span class=\"line\">spring.jta.atomikos.datasource.unique-resource-name=dataSource # The unique name used to identify the resource during recovery.</span><br><span class=\"line\">spring.jta.atomikos.properties.checkpoint-interval=500 # Interval between checkpoints.</span><br><span class=\"line\">spring.jta.atomikos.properties.console-file-count=1 # Number of debug logs files that can be created.</span><br><span class=\"line\">spring.jta.atomikos.properties.console-file-limit=-1 # How many bytes can be stored at most in debug logs files.</span><br><span class=\"line\">spring.jta.atomikos.properties.console-file-name=tm.out # Debug logs file name.</span><br><span class=\"line\">spring.jta.atomikos.properties.console-log-level= # Console log level.</span><br><span class=\"line\">spring.jta.atomikos.properties.default-jta-timeout=10000 # Default timeout for JTA transactions.</span><br><span class=\"line\">spring.jta.atomikos.properties.enable-logging=true # Enable disk logging.</span><br><span class=\"line\">spring.jta.atomikos.properties.force-shutdown-on-vm-exit=false # Specify if a VM shutdown should trigger forced shutdown of the transaction core.</span><br><span class=\"line\">spring.jta.atomikos.properties.log-base-dir= # Directory in which the log files should be stored.</span><br><span class=\"line\">spring.jta.atomikos.properties.log-base-name=tmlog # Transactions log file base name.</span><br><span class=\"line\">spring.jta.atomikos.properties.max-actives=50 # Maximum number of active transactions.</span><br><span class=\"line\">spring.jta.atomikos.properties.max-timeout=300000 # Maximum timeout (in milliseconds) that can be allowed for transactions.</span><br><span class=\"line\">spring.jta.atomikos.properties.output-dir= # Directory in which to store the debug log files.</span><br><span class=\"line\">spring.jta.atomikos.properties.serial-jta-transactions=true # Specify if sub-transactions should be joined when possible.</span><br><span class=\"line\">spring.jta.atomikos.properties.service= # Transaction manager implementation that should be started.</span><br><span class=\"line\">spring.jta.atomikos.properties.threaded-two-phase-commit=true # Use different (and concurrent) threads for two-phase commit on the participating resources.</span><br><span class=\"line\">spring.jta.atomikos.properties.transaction-manager-unique-name= # Transaction manager's unique name.</span><br><span class=\"line\"></span><br><span class=\"line\"># BITRONIX</span><br><span class=\"line\">spring.jta.bitronix.connectionfactory.acquire-increment=1 # Number of connections to create when growing the pool.</span><br><span class=\"line\">spring.jta.bitronix.connectionfactory.acquisition-interval=1 # Time, in seconds, to wait before trying to acquire a connection again after an invalid connection was acquired.</span><br><span class=\"line\">spring.jta.bitronix.connectionfactory.acquisition-timeout=30 # Timeout, in seconds, for acquiring connections from the pool.</span><br><span class=\"line\">spring.jta.bitronix.connectionfactory.allow-local-transactions=true # Whether or not the transaction manager should allow mixing XA and non-XA transactions.</span><br><span class=\"line\">spring.jta.bitronix.connectionfactory.apply-transaction-timeout=false # Whether or not the transaction timeout should be set on the XAResource when it is enlisted.</span><br><span class=\"line\">spring.jta.bitronix.connectionfactory.automatic-enlisting-enabled=true # Whether or not resources should be enlisted and delisted automatically.</span><br><span class=\"line\">spring.jta.bitronix.connectionfactory.cache-producers-consumers=true # Whether or not produces and consumers should be cached.</span><br><span class=\"line\">spring.jta.bitronix.connectionfactory.defer-connection-release=true # Whether or not the provider can run many transactions on the same connection and supports transaction interleaving.</span><br><span class=\"line\">spring.jta.bitronix.connectionfactory.ignore-recovery-failures=false # Whether or not recovery failures should be ignored.</span><br><span class=\"line\">spring.jta.bitronix.connectionfactory.max-idle-time=60 # The time, in seconds, after which connections are cleaned up from the pool.</span><br><span class=\"line\">spring.jta.bitronix.connectionfactory.max-pool-size=10 # The maximum size of the pool. 0 denotes no limit.</span><br><span class=\"line\">spring.jta.bitronix.connectionfactory.min-pool-size=0 # The minimum size of the pool.</span><br><span class=\"line\">spring.jta.bitronix.connectionfactory.password= # The password to use to connect to the JMS provider.</span><br><span class=\"line\">spring.jta.bitronix.connectionfactory.share-transaction-connections=false #  Whether or not connections in the ACCESSIBLE state can be shared within the context of a transaction.</span><br><span class=\"line\">spring.jta.bitronix.connectionfactory.test-connections=true # Whether or not connections should be tested when acquired from the pool.</span><br><span class=\"line\">spring.jta.bitronix.connectionfactory.two-pc-ordering-position=1 # The position that this resource should take during two-phase commit (always first is Integer.MIN_VALUE, always last is Integer.MAX_VALUE).</span><br><span class=\"line\">spring.jta.bitronix.connectionfactory.unique-name=jmsConnectionFactory # The unique name used to identify the resource during recovery.</span><br><span class=\"line\">spring.jta.bitronix.connectionfactory.use-tm-join=true Whether or not TMJOIN should be used when starting XAResources.</span><br><span class=\"line\">spring.jta.bitronix.connectionfactory.user= # The user to use to connect to the JMS provider.</span><br><span class=\"line\">spring.jta.bitronix.datasource.acquire-increment=1 # Number of connections to create when growing the pool.</span><br><span class=\"line\">spring.jta.bitronix.datasource.acquisition-interval=1 # Time, in seconds, to wait before trying to acquire a connection again after an invalid connection was acquired.</span><br><span class=\"line\">spring.jta.bitronix.datasource.acquisition-timeout=30 # Timeout, in seconds, for acquiring connections from the pool.</span><br><span class=\"line\">spring.jta.bitronix.datasource.allow-local-transactions=true # Whether or not the transaction manager should allow mixing XA and non-XA transactions.</span><br><span class=\"line\">spring.jta.bitronix.datasource.apply-transaction-timeout=false # Whether or not the transaction timeout should be set on the XAResource when it is enlisted.</span><br><span class=\"line\">spring.jta.bitronix.datasource.automatic-enlisting-enabled=true # Whether or not resources should be enlisted and delisted automatically.</span><br><span class=\"line\">spring.jta.bitronix.datasource.cursor-holdability= # The default cursor holdability for connections.</span><br><span class=\"line\">spring.jta.bitronix.datasource.defer-connection-release=true # Whether or not the database can run many transactions on the same connection and supports transaction interleaving.</span><br><span class=\"line\">spring.jta.bitronix.datasource.enable-jdbc4-connection-test= # Whether or not Connection.isValid() is called when acquiring a connection from the pool.</span><br><span class=\"line\">spring.jta.bitronix.datasource.ignore-recovery-failures=false # Whether or not recovery failures should be ignored.</span><br><span class=\"line\">spring.jta.bitronix.datasource.isolation-level= # The default isolation level for connections.</span><br><span class=\"line\">spring.jta.bitronix.datasource.local-auto-commit= # The default auto-commit mode for local transactions.</span><br><span class=\"line\">spring.jta.bitronix.datasource.login-timeout= # Timeout, in seconds, for establishing a database connection.</span><br><span class=\"line\">spring.jta.bitronix.datasource.max-idle-time=60 # The time, in seconds, after which connections are cleaned up from the pool.</span><br><span class=\"line\">spring.jta.bitronix.datasource.max-pool-size=10 # The maximum size of the pool. 0 denotes no limit.</span><br><span class=\"line\">spring.jta.bitronix.datasource.min-pool-size=0 # The minimum size of the pool.</span><br><span class=\"line\">spring.jta.bitronix.datasource.prepared-statement-cache-size=0 # The target size of the prepared statement cache. 0 disables the cache.</span><br><span class=\"line\">spring.jta.bitronix.datasource.share-transaction-connections=false #  Whether or not connections in the ACCESSIBLE state can be shared within the context of a transaction.</span><br><span class=\"line\">spring.jta.bitronix.datasource.test-query= # SQL query or statement used to validate a connection before returning it.</span><br><span class=\"line\">spring.jta.bitronix.datasource.two-pc-ordering-position=1 # The position that this resource should take during two-phase commit (always first is Integer.MIN_VALUE, always last is Integer.MAX_VALUE).</span><br><span class=\"line\">spring.jta.bitronix.datasource.unique-name=dataSource # The unique name used to identify the resource during recovery.</span><br><span class=\"line\">spring.jta.bitronix.datasource.use-tm-join=true Whether or not TMJOIN should be used when starting XAResources.</span><br><span class=\"line\">spring.jta.bitronix.properties.allow-multiple-lrc=false # Allow multiple LRC resources to be enlisted into the same transaction.</span><br><span class=\"line\">spring.jta.bitronix.properties.asynchronous2-pc=false # Enable asynchronously execution of two phase commit.</span><br><span class=\"line\">spring.jta.bitronix.properties.background-recovery-interval-seconds=60 # Interval in seconds at which to run the recovery process in the background.</span><br><span class=\"line\">spring.jta.bitronix.properties.current-node-only-recovery=true # Recover only the current node.</span><br><span class=\"line\">spring.jta.bitronix.properties.debug-zero-resource-transaction=false # Log the creation and commit call stacks of transactions executed without a single enlisted resource.</span><br><span class=\"line\">spring.jta.bitronix.properties.default-transaction-timeout=60 # Default transaction timeout in seconds.</span><br><span class=\"line\">spring.jta.bitronix.properties.disable-jmx=false # Enable JMX support.</span><br><span class=\"line\">spring.jta.bitronix.properties.exception-analyzer= # Set the fully qualified name of the exception analyzer implementation to use.</span><br><span class=\"line\">spring.jta.bitronix.properties.filter-log-status=false # Enable filtering of logs so that only mandatory logs are written.</span><br><span class=\"line\">spring.jta.bitronix.properties.force-batching-enabled=true #  Set if disk forces are batched.</span><br><span class=\"line\">spring.jta.bitronix.properties.forced-write-enabled=true # Set if logs are forced to disk.</span><br><span class=\"line\">spring.jta.bitronix.properties.graceful-shutdown-interval=60 # Maximum amount of seconds the TM will wait for transactions to get done before aborting them at shutdown time.</span><br><span class=\"line\">spring.jta.bitronix.properties.jndi-transaction-synchronization-registry-name= # JNDI name of the TransactionSynchronizationRegistry.</span><br><span class=\"line\">spring.jta.bitronix.properties.jndi-user-transaction-name= # JNDI name of the UserTransaction.</span><br><span class=\"line\">spring.jta.bitronix.properties.journal=disk # Name of the journal. Can be 'disk', 'null' or a class name.</span><br><span class=\"line\">spring.jta.bitronix.properties.log-part1-filename=btm1.tlog # Name of the first fragment of the journal.</span><br><span class=\"line\">spring.jta.bitronix.properties.log-part2-filename=btm2.tlog # Name of the second fragment of the journal.</span><br><span class=\"line\">spring.jta.bitronix.properties.max-log-size-in-mb=2 # Maximum size in megabytes of the journal fragments.</span><br><span class=\"line\">spring.jta.bitronix.properties.resource-configuration-filename= # ResourceLoader configuration file name.</span><br><span class=\"line\">spring.jta.bitronix.properties.server-id= # ASCII ID that must uniquely identify this TM instance. Default to the machine's IP address.</span><br><span class=\"line\">spring.jta.bitronix.properties.skip-corrupted-logs=false # Skip corrupted transactions log entries.</span><br><span class=\"line\">spring.jta.bitronix.properties.warn-about-zero-resource-transaction=true # Log a warning for transactions executed without a single enlisted resource.</span><br><span class=\"line\"></span><br><span class=\"line\"># NARAYANA (NarayanaProperties)</span><br><span class=\"line\">spring.jta.narayana.default-timeout=60 # Transaction timeout in seconds.</span><br><span class=\"line\">spring.jta.narayana.expiry-scanners=com.arjuna.ats.internal.arjuna.recovery.ExpiredTransactionStatusManagerScanner # Comma-separated list of expiry scanners.</span><br><span class=\"line\">spring.jta.narayana.log-dir= # Transaction object store directory.</span><br><span class=\"line\">spring.jta.narayana.one-phase-commit=true # Enable one phase commit optimisation.</span><br><span class=\"line\">spring.jta.narayana.periodic-recovery-period=120 # Interval in which periodic recovery scans are performed in seconds.</span><br><span class=\"line\">spring.jta.narayana.recovery-backoff-period=10 # Back off period between first and second phases of the recovery scan in seconds.</span><br><span class=\"line\">spring.jta.narayana.recovery-db-pass= # Database password to be used by recovery manager.</span><br><span class=\"line\">spring.jta.narayana.recovery-db-user= # Database username to be used by recovery manager.</span><br><span class=\"line\">spring.jta.narayana.recovery-jms-pass= # JMS password to be used by recovery manager.</span><br><span class=\"line\">spring.jta.narayana.recovery-jms-user= # JMS username to be used by recovery manager.</span><br><span class=\"line\">spring.jta.narayana.recovery-modules= # Comma-separated list of recovery modules.</span><br><span class=\"line\">spring.jta.narayana.transaction-manager-id=1 # Unique transaction manager id.</span><br><span class=\"line\">spring.jta.narayana.xa-resource-orphan-filters= # Comma-separated list of orphan filters.</span><br><span class=\"line\"></span><br><span class=\"line\"># EMBEDDED MONGODB (EmbeddedMongoProperties)</span><br><span class=\"line\">spring.mongodb.embedded.features=SYNC_DELAY # Comma-separated list of features to enable.</span><br><span class=\"line\">spring.mongodb.embedded.storage.databaseDir= # Directory used for data storage.</span><br><span class=\"line\">spring.mongodb.embedded.storage.oplogSize= # Maximum size of the oplog in megabytes.</span><br><span class=\"line\">spring.mongodb.embedded.storage.replSetName= # Name of the replica set.</span><br><span class=\"line\">spring.mongodb.embedded.version=2.6.10 # Version of Mongo to use.</span><br><span class=\"line\"></span><br><span class=\"line\"># REDIS (RedisProperties)</span><br><span class=\"line\">spring.redis.cluster.max-redirects= # Maximum number of redirects to follow when executing commands across the cluster.</span><br><span class=\"line\">spring.redis.cluster.nodes= # Comma-separated list of \"host:port\" pairs to bootstrap from.</span><br><span class=\"line\">spring.redis.database=0 # Database index used by the connection factory.</span><br><span class=\"line\">spring.redis.host=localhost # Redis server host.</span><br><span class=\"line\">spring.redis.password= # Login password of the redis server.</span><br><span class=\"line\">spring.redis.pool.max-active=8 # Max number of connections that can be allocated by the pool at a given time. Use a negative value for no limit.</span><br><span class=\"line\">spring.redis.pool.max-idle=8 # Max number of \"idle\" connections in the pool. Use a negative value to indicate an unlimited number of idle connections.</span><br><span class=\"line\">spring.redis.pool.max-wait=-1 # Maximum amount of time (in milliseconds) a connection allocation should block before throwing an exception when the pool is exhausted. Use a negative value to block indefinitely.</span><br><span class=\"line\">spring.redis.pool.min-idle=0 # Target for the minimum number of idle connections to maintain in the pool. This setting only has an effect if it is positive.</span><br><span class=\"line\">spring.redis.port=6379 # Redis server port.</span><br><span class=\"line\">spring.redis.sentinel.master= # Name of Redis server.</span><br><span class=\"line\">spring.redis.sentinel.nodes= # Comma-separated list of host:port pairs.</span><br><span class=\"line\">spring.redis.timeout=0 # Connection timeout in milliseconds.</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"># ----------------------------------------</span><br><span class=\"line\"># INTEGRATION PROPERTIES</span><br><span class=\"line\"># ----------------------------------------</span><br><span class=\"line\"></span><br><span class=\"line\"># ACTIVEMQ (ActiveMQProperties)</span><br><span class=\"line\">spring.activemq.broker-url= # URL of the ActiveMQ broker. Auto-generated by default. For instance `tcp://localhost:61616`</span><br><span class=\"line\">spring.activemq.in-memory=true # Specify if the default broker URL should be in memory. Ignored if an explicit broker has been specified.</span><br><span class=\"line\">spring.activemq.password= # Login password of the broker.</span><br><span class=\"line\">spring.activemq.user= # Login user of the broker.</span><br><span class=\"line\">spring.activemq.packages.trust-all=false # Trust all packages.</span><br><span class=\"line\">spring.activemq.packages.trusted= # Comma-separated list of specific packages to trust (when not trusting all packages).</span><br><span class=\"line\">spring.activemq.pool.configuration.*= # See PooledConnectionFactory.</span><br><span class=\"line\">spring.activemq.pool.enabled=false # Whether a PooledConnectionFactory should be created instead of a regular ConnectionFactory.</span><br><span class=\"line\">spring.activemq.pool.expiry-timeout=0 # Connection expiration timeout in milliseconds.</span><br><span class=\"line\">spring.activemq.pool.idle-timeout=30000 # Connection idle timeout in milliseconds.</span><br><span class=\"line\">spring.activemq.pool.max-connections=1 # Maximum number of pooled connections.</span><br><span class=\"line\"></span><br><span class=\"line\"># ARTEMIS (ArtemisProperties)</span><br><span class=\"line\">spring.artemis.embedded.cluster-password= # Cluster password. Randomly generated on startup by default.</span><br><span class=\"line\">spring.artemis.embedded.data-directory= # Journal file directory. Not necessary if persistence is turned off.</span><br><span class=\"line\">spring.artemis.embedded.enabled=true # Enable embedded mode if the Artemis server APIs are available.</span><br><span class=\"line\">spring.artemis.embedded.persistent=false # Enable persistent store.</span><br><span class=\"line\">spring.artemis.embedded.queues= # Comma-separated list of queues to create on startup.</span><br><span class=\"line\">spring.artemis.embedded.server-id= # Server id. By default, an auto-incremented counter is used.</span><br><span class=\"line\">spring.artemis.embedded.topics= # Comma-separated list of topics to create on startup.</span><br><span class=\"line\">spring.artemis.host=localhost # Artemis broker host.</span><br><span class=\"line\">spring.artemis.mode= # Artemis deployment mode, auto-detected by default. Can be explicitly set to \"native\" or \"embedded\".</span><br><span class=\"line\">spring.artemis.password= # Login password of the broker.</span><br><span class=\"line\">spring.artemis.port=61616 # Artemis broker port.</span><br><span class=\"line\">spring.artemis.user= # Login user of the broker.</span><br><span class=\"line\"></span><br><span class=\"line\"># SPRING BATCH (BatchProperties)</span><br><span class=\"line\">spring.batch.initializer.enabled=true # Create the required batch tables on startup if necessary.</span><br><span class=\"line\">spring.batch.job.enabled=true # Execute all Spring Batch jobs in the context on startup.</span><br><span class=\"line\">spring.batch.job.names= # Comma-separated list of job names to execute on startup (For instance `job1,job2`). By default, all Jobs found in the context are executed.</span><br><span class=\"line\">spring.batch.schema=classpath:org/springframework/batch/core/schema-@@platform@@.sql # Path to the SQL file to use to initialize the database schema.</span><br><span class=\"line\">spring.batch.table-prefix= # Table prefix for all the batch meta-data tables.</span><br><span class=\"line\"></span><br><span class=\"line\"># HORNETQ (HornetQProperties)</span><br><span class=\"line\">spring.hornetq.embedded.cluster-password= # Cluster password. Randomly generated on startup by default.</span><br><span class=\"line\">spring.hornetq.embedded.data-directory= # Journal file directory. Not necessary if persistence is turned off.</span><br><span class=\"line\">spring.hornetq.embedded.enabled=true # Enable embedded mode if the HornetQ server APIs are available.</span><br><span class=\"line\">spring.hornetq.embedded.persistent=false # Enable persistent store.</span><br><span class=\"line\">spring.hornetq.embedded.queues= # Comma-separated list of queues to create on startup.</span><br><span class=\"line\">spring.hornetq.embedded.server-id= # Server id. By default, an auto-incremented counter is used.</span><br><span class=\"line\">spring.hornetq.embedded.topics= # Comma-separated list of topics to create on startup.</span><br><span class=\"line\">spring.hornetq.host=localhost # HornetQ broker host.</span><br><span class=\"line\">spring.hornetq.mode= # HornetQ deployment mode, auto-detected by default. Can be explicitly set to \"native\" or \"embedded\".</span><br><span class=\"line\">spring.hornetq.password= # Login password of the broker.</span><br><span class=\"line\">spring.hornetq.port=5445 # HornetQ broker port.</span><br><span class=\"line\">spring.hornetq.user= # Login user of the broker.</span><br><span class=\"line\"></span><br><span class=\"line\"># JMS (JmsProperties)</span><br><span class=\"line\">spring.jms.jndi-name= # Connection factory JNDI name. When set, takes precedence to others connection factory auto-configurations.</span><br><span class=\"line\">spring.jms.listener.acknowledge-mode= # Acknowledge mode of the container. By default, the listener is transacted with automatic acknowledgment.</span><br><span class=\"line\">spring.jms.listener.auto-startup=true # Start the container automatically on startup.</span><br><span class=\"line\">spring.jms.listener.concurrency= # Minimum number of concurrent consumers.</span><br><span class=\"line\">spring.jms.listener.max-concurrency= # Maximum number of concurrent consumers.</span><br><span class=\"line\">spring.jms.pub-sub-domain=false # Specify if the default destination type is topic.</span><br><span class=\"line\"></span><br><span class=\"line\"># RABBIT (RabbitProperties)</span><br><span class=\"line\">spring.rabbitmq.addresses= # Comma-separated list of addresses to which the client should connect.</span><br><span class=\"line\">spring.rabbitmq.cache.channel.checkout-timeout= # Number of milliseconds to wait to obtain a channel if the cache size has been reached.</span><br><span class=\"line\">spring.rabbitmq.cache.channel.size= # Number of channels to retain in the cache.</span><br><span class=\"line\">spring.rabbitmq.cache.connection.mode=CHANNEL # Connection factory cache mode.</span><br><span class=\"line\">spring.rabbitmq.cache.connection.size= # Number of connections to cache.</span><br><span class=\"line\">spring.rabbitmq.connection-timeout= # Connection timeout, in milliseconds; zero for infinite.</span><br><span class=\"line\">spring.rabbitmq.dynamic=true # Create an AmqpAdmin bean.</span><br><span class=\"line\">spring.rabbitmq.host=localhost # RabbitMQ host.</span><br><span class=\"line\">spring.rabbitmq.listener.acknowledge-mode= # Acknowledge mode of container.</span><br><span class=\"line\">spring.rabbitmq.listener.auto-startup=true # Start the container automatically on startup.</span><br><span class=\"line\">spring.rabbitmq.listener.concurrency= # Minimum number of consumers.</span><br><span class=\"line\">spring.rabbitmq.listener.default-requeue-rejected= # Whether or not to requeue delivery failures; default `true`.</span><br><span class=\"line\">spring.rabbitmq.listener.max-concurrency= # Maximum number of consumers.</span><br><span class=\"line\">spring.rabbitmq.listener.prefetch= # Number of messages to be handled in a single request. It should be greater than or equal to the transaction size (if used).</span><br><span class=\"line\">spring.rabbitmq.listener.retry.enabled=false # Whether or not publishing retries are enabled.</span><br><span class=\"line\">spring.rabbitmq.listener.retry.initial-interval=1000 # Interval between the first and second attempt to deliver a message.</span><br><span class=\"line\">spring.rabbitmq.listener.retry.max-attempts=3 # Maximum number of attempts to deliver a message.</span><br><span class=\"line\">spring.rabbitmq.listener.retry.max-interval=10000 # Maximum number of attempts to deliver a message.</span><br><span class=\"line\">spring.rabbitmq.listener.retry.multiplier=1.0 # A multiplier to apply to the previous delivery retry interval.</span><br><span class=\"line\">spring.rabbitmq.listener.retry.stateless=true # Whether or not retry is stateless or stateful.</span><br><span class=\"line\">spring.rabbitmq.listener.transaction-size= # Number of messages to be processed in a transaction. For best results it should be less than or equal to the prefetch count.</span><br><span class=\"line\">spring.rabbitmq.password= # Login to authenticate against the broker.</span><br><span class=\"line\">spring.rabbitmq.port=5672 # RabbitMQ port.</span><br><span class=\"line\">spring.rabbitmq.publisher-confirms=false # Enable publisher confirms.</span><br><span class=\"line\">spring.rabbitmq.publisher-returns=false # Enable publisher returns.</span><br><span class=\"line\">spring.rabbitmq.requested-heartbeat= # Requested heartbeat timeout, in seconds; zero for none.</span><br><span class=\"line\">spring.rabbitmq.ssl.enabled=false # Enable SSL support.</span><br><span class=\"line\">spring.rabbitmq.ssl.key-store= # Path to the key store that holds the SSL certificate.</span><br><span class=\"line\">spring.rabbitmq.ssl.key-store-password= # Password used to access the key store.</span><br><span class=\"line\">spring.rabbitmq.ssl.trust-store= # Trust store that holds SSL certificates.</span><br><span class=\"line\">spring.rabbitmq.ssl.trust-store-password= # Password used to access the trust store.</span><br><span class=\"line\">spring.rabbitmq.ssl.algorithm= # SSL algorithm to use. By default configure by the rabbit client library.</span><br><span class=\"line\">spring.rabbitmq.template.mandatory=false # Enable mandatory messages.</span><br><span class=\"line\">spring.rabbitmq.template.receive-timeout=0 # Timeout for `receive()` methods.</span><br><span class=\"line\">spring.rabbitmq.template.reply-timeout=5000 # Timeout for `sendAndReceive()` methods.</span><br><span class=\"line\">spring.rabbitmq.template.retry.enabled=false # Set to true to enable retries in the `RabbitTemplate`.</span><br><span class=\"line\">spring.rabbitmq.template.retry.initial-interval=1000 # Interval between the first and second attempt to publish a message.</span><br><span class=\"line\">spring.rabbitmq.template.retry.max-attempts=3 # Maximum number of attempts to publish a message.</span><br><span class=\"line\">spring.rabbitmq.template.retry.max-interval=10000 # Maximum number of attempts to publish a message.</span><br><span class=\"line\">spring.rabbitmq.template.retry.multiplier=1.0 # A multiplier to apply to the previous publishing retry interval.</span><br><span class=\"line\">spring.rabbitmq.username= # Login user to authenticate to the broker.</span><br><span class=\"line\">spring.rabbitmq.virtual-host= # Virtual host to use when connecting to the broker.</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"># ----------------------------------------</span><br><span class=\"line\"># ACTUATOR PROPERTIES</span><br><span class=\"line\"># ----------------------------------------</span><br><span class=\"line\"></span><br><span class=\"line\"># ENDPOINTS (AbstractEndpoint subclasses)</span><br><span class=\"line\">endpoints.enabled=true # Enable endpoints.</span><br><span class=\"line\">endpoints.sensitive= # Default endpoint sensitive setting.</span><br><span class=\"line\">endpoints.actuator.enabled=true # Enable the endpoint.</span><br><span class=\"line\">endpoints.actuator.path= # Endpoint URL path.</span><br><span class=\"line\">endpoints.actuator.sensitive=false # Enable security on the endpoint.</span><br><span class=\"line\">endpoints.autoconfig.enabled= # Enable the endpoint.</span><br><span class=\"line\">endpoints.autoconfig.id= # Endpoint identifier.</span><br><span class=\"line\">endpoints.autoconfig.path= # Endpoint path.</span><br><span class=\"line\">endpoints.autoconfig.sensitive= # Mark if the endpoint exposes sensitive information.</span><br><span class=\"line\">endpoints.beans.enabled= # Enable the endpoint.</span><br><span class=\"line\">endpoints.beans.id= # Endpoint identifier.</span><br><span class=\"line\">endpoints.beans.path= # Endpoint path.</span><br><span class=\"line\">endpoints.beans.sensitive= # Mark if the endpoint exposes sensitive information.</span><br><span class=\"line\">endpoints.configprops.enabled= # Enable the endpoint.</span><br><span class=\"line\">endpoints.configprops.id= # Endpoint identifier.</span><br><span class=\"line\">endpoints.configprops.keys-to-sanitize=password,secret,key,token,.*credentials.*,vcap_services # Keys that should be sanitized. Keys can be simple strings that the property ends with or regex expressions.</span><br><span class=\"line\">endpoints.configprops.path= # Endpoint path.</span><br><span class=\"line\">endpoints.configprops.sensitive= # Mark if the endpoint exposes sensitive information.</span><br><span class=\"line\">endpoints.docs.curies.enabled=false # Enable the curie generation.</span><br><span class=\"line\">endpoints.docs.enabled=true # Enable actuator docs endpoint.</span><br><span class=\"line\">endpoints.docs.path=/docs #</span><br><span class=\"line\">endpoints.docs.sensitive=false #</span><br><span class=\"line\">endpoints.dump.enabled= # Enable the endpoint.</span><br><span class=\"line\">endpoints.dump.id= # Endpoint identifier.</span><br><span class=\"line\">endpoints.dump.path= # Endpoint path.</span><br><span class=\"line\">endpoints.dump.sensitive= # Mark if the endpoint exposes sensitive information.</span><br><span class=\"line\">endpoints.env.enabled= # Enable the endpoint.</span><br><span class=\"line\">endpoints.env.id= # Endpoint identifier.</span><br><span class=\"line\">endpoints.env.keys-to-sanitize=password,secret,key,token,.*credentials.*,vcap_services # Keys that should be sanitized. Keys can be simple strings that the property ends with or regex expressions.</span><br><span class=\"line\">endpoints.env.path= # Endpoint path.</span><br><span class=\"line\">endpoints.env.sensitive= # Mark if the endpoint exposes sensitive information.</span><br><span class=\"line\">endpoints.flyway.enabled= # Enable the endpoint.</span><br><span class=\"line\">endpoints.flyway.id= # Endpoint identifier.</span><br><span class=\"line\">endpoints.flyway.sensitive= # Mark if the endpoint exposes sensitive information.</span><br><span class=\"line\">endpoints.health.enabled= # Enable the endpoint.</span><br><span class=\"line\">endpoints.health.id= # Endpoint identifier.</span><br><span class=\"line\">endpoints.health.mapping.*= # Mapping of health statuses to HttpStatus codes. By default, registered health statuses map to sensible defaults (i.e. UP maps to 200).</span><br><span class=\"line\">endpoints.health.path= # Endpoint path.</span><br><span class=\"line\">endpoints.health.sensitive= # Mark if the endpoint exposes sensitive information.</span><br><span class=\"line\">endpoints.health.time-to-live=1000 # Time to live for cached result, in milliseconds.</span><br><span class=\"line\">endpoints.heapdump.enabled= # Enable the endpoint.</span><br><span class=\"line\">endpoints.heapdump.path= # Endpoint path.</span><br><span class=\"line\">endpoints.heapdump.sensitive= # Mark if the endpoint exposes sensitive information.</span><br><span class=\"line\">endpoints.info.enabled= # Enable the endpoint.</span><br><span class=\"line\">endpoints.info.id= # Endpoint identifier.</span><br><span class=\"line\">endpoints.info.path= # Endpoint path.</span><br><span class=\"line\">endpoints.info.sensitive= # Mark if the endpoint exposes sensitive information.</span><br><span class=\"line\">endpoints.jolokia.enabled=true # Enable Jolokia endpoint.</span><br><span class=\"line\">endpoints.jolokia.path=/jolokia # Endpoint URL path.</span><br><span class=\"line\">endpoints.jolokia.sensitive=true # Enable security on the endpoint.</span><br><span class=\"line\">endpoints.liquibase.enabled= # Enable the endpoint.</span><br><span class=\"line\">endpoints.liquibase.id= # Endpoint identifier.</span><br><span class=\"line\">endpoints.liquibase.sensitive= # Mark if the endpoint exposes sensitive information.</span><br><span class=\"line\">endpoints.logfile.enabled=true # Enable the endpoint.</span><br><span class=\"line\">endpoints.logfile.external-file= # External Logfile to be accessed.</span><br><span class=\"line\">endpoints.logfile.path=/logfile # Endpoint URL path.</span><br><span class=\"line\">endpoints.logfile.sensitive=true # Enable security on the endpoint.</span><br><span class=\"line\">endpoints.mappings.enabled= # Enable the endpoint.</span><br><span class=\"line\">endpoints.mappings.id= # Endpoint identifier.</span><br><span class=\"line\">endpoints.mappings.path= # Endpoint path.</span><br><span class=\"line\">endpoints.mappings.sensitive= # Mark if the endpoint exposes sensitive information.</span><br><span class=\"line\">endpoints.metrics.enabled= # Enable the endpoint.</span><br><span class=\"line\">endpoints.metrics.filter.enabled=true # Enable the metrics servlet filter.</span><br><span class=\"line\">endpoints.metrics.filter.gauge-submissions=merged # Http filter gauge submissions (merged, per-http-method)</span><br><span class=\"line\">endpoints.metrics.filter.counter-submissions=merged # Http filter counter submissions (merged, per-http-method)</span><br><span class=\"line\">endpoints.metrics.id= # Endpoint identifier.</span><br><span class=\"line\">endpoints.metrics.path= # Endpoint path.</span><br><span class=\"line\">endpoints.metrics.sensitive= # Mark if the endpoint exposes sensitive information.</span><br><span class=\"line\">endpoints.shutdown.enabled= # Enable the endpoint.</span><br><span class=\"line\">endpoints.shutdown.id= # Endpoint identifier.</span><br><span class=\"line\">endpoints.shutdown.path= # Endpoint path.</span><br><span class=\"line\">endpoints.shutdown.sensitive= # Mark if the endpoint exposes sensitive information.</span><br><span class=\"line\">endpoints.trace.enabled= # Enable the endpoint.</span><br><span class=\"line\">endpoints.trace.id= # Endpoint identifier.</span><br><span class=\"line\">endpoints.trace.path= # Endpoint path.</span><br><span class=\"line\">endpoints.trace.sensitive= # Mark if the endpoint exposes sensitive information.</span><br><span class=\"line\"></span><br><span class=\"line\"># ENDPOINTS CORS CONFIGURATION (EndpointCorsProperties)</span><br><span class=\"line\">endpoints.cors.allow-credentials= # Set whether credentials are supported. When not set, credentials are not supported.</span><br><span class=\"line\">endpoints.cors.allowed-headers= # Comma-separated list of headers to allow in a request. '*' allows all headers.</span><br><span class=\"line\">endpoints.cors.allowed-methods=GET # Comma-separated list of methods to allow. '*' allows all methods.</span><br><span class=\"line\">endpoints.cors.allowed-origins= # Comma-separated list of origins to allow. '*' allows all origins. When not set, CORS support is disabled.</span><br><span class=\"line\">endpoints.cors.exposed-headers= # Comma-separated list of headers to include in a response.</span><br><span class=\"line\">endpoints.cors.max-age=1800 # How long, in seconds, the response from a pre-flight request can be cached by clients.</span><br><span class=\"line\"></span><br><span class=\"line\"># JMX ENDPOINT (EndpointMBeanExportProperties)</span><br><span class=\"line\">endpoints.jmx.domain= # JMX domain name. Initialized with the value of 'spring.jmx.default-domain' if set.</span><br><span class=\"line\">endpoints.jmx.enabled=true # Enable JMX export of all endpoints.</span><br><span class=\"line\">endpoints.jmx.static-names= # Additional static properties to append to all ObjectNames of MBeans representing Endpoints.</span><br><span class=\"line\">endpoints.jmx.unique-names=false # Ensure that ObjectNames are modified in case of conflict.</span><br><span class=\"line\"></span><br><span class=\"line\"># JOLOKIA (JolokiaProperties)</span><br><span class=\"line\">jolokia.config.*= # See Jolokia manual</span><br><span class=\"line\"></span><br><span class=\"line\"># MANAGEMENT HTTP SERVER (ManagementServerProperties)</span><br><span class=\"line\">management.add-application-context-header=true # Add the \"X-Application-Context\" HTTP header in each response.</span><br><span class=\"line\">management.address= # Network address that the management endpoints should bind to.</span><br><span class=\"line\">management.context-path= # Management endpoint context-path. For instance `/actuator`</span><br><span class=\"line\">management.port= # Management endpoint HTTP port. Uses the same port as the application by default. Configure a different port to use management-specific SSL.</span><br><span class=\"line\">management.security.enabled=true # Enable security.</span><br><span class=\"line\">management.security.roles=ADMIN # Comma-separated list of roles that can access the management endpoint.</span><br><span class=\"line\">management.security.sessions=stateless # Session creating policy to use (always, never, if_required, stateless).</span><br><span class=\"line\">management.ssl.ciphers= # Supported SSL ciphers. Requires a custom management.port.</span><br><span class=\"line\">management.ssl.client-auth= # Whether client authentication is wanted (\"want\") or needed (\"need\"). Requires a trust store. Requires a custom management.port.</span><br><span class=\"line\">management.ssl.enabled= # Enable SSL support. Requires a custom management.port.</span><br><span class=\"line\">management.ssl.enabled-protocols= # Enabled SSL protocols. Requires a custom management.port.</span><br><span class=\"line\">management.ssl.key-alias= # Alias that identifies the key in the key store. Requires a custom management.port.</span><br><span class=\"line\">management.ssl.key-password= # Password used to access the key in the key store. Requires a custom management.port.</span><br><span class=\"line\">management.ssl.key-store= # Path to the key store that holds the SSL certificate (typically a jks file). Requires a custom management.port.</span><br><span class=\"line\">management.ssl.key-store-password= # Password used to access the key store. Requires a custom management.port.</span><br><span class=\"line\">management.ssl.key-store-provider= # Provider for the key store. Requires a custom management.port.</span><br><span class=\"line\">management.ssl.key-store-type= # Type of the key store. Requires a custom management.port.</span><br><span class=\"line\">management.ssl.protocol=TLS # SSL protocol to use. Requires a custom management.port.</span><br><span class=\"line\">management.ssl.trust-store= # Trust store that holds SSL certificates. Requires a custom management.port.</span><br><span class=\"line\">management.ssl.trust-store-password= # Password used to access the trust store. Requires a custom management.port.</span><br><span class=\"line\">management.ssl.trust-store-provider= # Provider for the trust store. Requires a custom management.port.</span><br><span class=\"line\">management.ssl.trust-store-type= # Type of the trust store. Requires a custom management.port.</span><br><span class=\"line\"></span><br><span class=\"line\"># HEALTH INDICATORS (previously health.*)</span><br><span class=\"line\">management.health.db.enabled=true # Enable database health check.</span><br><span class=\"line\">management.health.defaults.enabled=true # Enable default health indicators.</span><br><span class=\"line\">management.health.diskspace.enabled=true # Enable disk space health check.</span><br><span class=\"line\">management.health.diskspace.path= # Path used to compute the available disk space.</span><br><span class=\"line\">management.health.diskspace.threshold=0 # Minimum disk space that should be available, in bytes.</span><br><span class=\"line\">management.health.elasticsearch.enabled=true # Enable elasticsearch health check.</span><br><span class=\"line\">management.health.elasticsearch.indices= # Comma-separated index names.</span><br><span class=\"line\">management.health.elasticsearch.response-timeout=100 # The time, in milliseconds, to wait for a response from the cluster.</span><br><span class=\"line\">management.health.jms.enabled=true # Enable JMS health check.</span><br><span class=\"line\">management.health.mail.enabled=true # Enable Mail health check.</span><br><span class=\"line\">management.health.mongo.enabled=true # Enable MongoDB health check.</span><br><span class=\"line\">management.health.rabbit.enabled=true # Enable RabbitMQ health check.</span><br><span class=\"line\">management.health.redis.enabled=true # Enable Redis health check.</span><br><span class=\"line\">management.health.solr.enabled=true # Enable Solr health check.</span><br><span class=\"line\">management.health.status.order=DOWN, OUT_OF_SERVICE, UNKNOWN, UP # Comma-separated list of health statuses in order of severity.</span><br><span class=\"line\"></span><br><span class=\"line\"># INFO CONTRIBUTORS (InfoContributorProperties)</span><br><span class=\"line\">management.info.build.enabled=true # Enable build info.</span><br><span class=\"line\">management.info.defaults.enabled=true # Enable default info contributors.</span><br><span class=\"line\">management.info.env.enabled=true # Enable environment info.</span><br><span class=\"line\">management.info.git.enabled=true # Enable git info.</span><br><span class=\"line\">management.info.git.mode=simple # Mode to use to expose git information.</span><br><span class=\"line\"></span><br><span class=\"line\"># REMOTE SHELL (ShellProperties)</span><br><span class=\"line\">management.shell.auth.type=simple # Authentication type. Auto-detected according to the environment.</span><br><span class=\"line\">management.shell.auth.jaas.domain=my-domain # JAAS domain.</span><br><span class=\"line\">management.shell.auth.key.path= # Path to the authentication key. This should point to a valid \".pem\" file.</span><br><span class=\"line\">management.shell.auth.simple.user.name=user # Login user.</span><br><span class=\"line\">management.shell.auth.simple.user.password= # Login password.</span><br><span class=\"line\">management.shell.auth.spring.roles=ADMIN # Comma-separated list of required roles to login to the CRaSH console.</span><br><span class=\"line\">management.shell.command-path-patterns=classpath*:/commands/**,classpath*:/crash/commands/** # Patterns to use to look for commands.</span><br><span class=\"line\">management.shell.command-refresh-interval=-1 # Scan for changes and update the command if necessary (in seconds).</span><br><span class=\"line\">management.shell.config-path-patterns=classpath*:/crash/* # Patterns to use to look for configurations.</span><br><span class=\"line\">management.shell.disabled-commands=jpa*,jdbc*,jndi* # Comma-separated list of commands to disable.</span><br><span class=\"line\">management.shell.disabled-plugins= # Comma-separated list of plugins to disable. Certain plugins are disabled by default based on the environment.</span><br><span class=\"line\">management.shell.ssh.auth-timeout = # Number of milliseconds after user will be prompted to login again.</span><br><span class=\"line\">management.shell.ssh.enabled=true # Enable CRaSH SSH support.</span><br><span class=\"line\">management.shell.ssh.idle-timeout = # Number of milliseconds after which unused connections are closed.</span><br><span class=\"line\">management.shell.ssh.key-path= # Path to the SSH server key.</span><br><span class=\"line\">management.shell.ssh.port=2000 # SSH port.</span><br><span class=\"line\">management.shell.telnet.enabled=false # Enable CRaSH telnet support. Enabled by default if the TelnetPlugin is  available.</span><br><span class=\"line\">management.shell.telnet.port=5000 # Telnet port.</span><br><span class=\"line\"></span><br><span class=\"line\"># TRACING (TraceProperties)</span><br><span class=\"line\">management.trace.include=request-headers,response-headers,cookies,errors # Items to be included in the trace.</span><br><span class=\"line\"></span><br><span class=\"line\"># METRICS EXPORT (MetricExportProperties)</span><br><span class=\"line\">spring.metrics.export.aggregate.key-pattern= # Pattern that tells the aggregator what to do with the keys from the source repository.</span><br><span class=\"line\">spring.metrics.export.aggregate.prefix= # Prefix for global repository if active.</span><br><span class=\"line\">spring.metrics.export.delay-millis=5000 # Delay in milliseconds between export ticks. Metrics are exported to external sources on a schedule with this delay.</span><br><span class=\"line\">spring.metrics.export.enabled=true # Flag to enable metric export (assuming a MetricWriter is available).</span><br><span class=\"line\">spring.metrics.export.excludes= # List of patterns for metric names to exclude. Applied after the includes.</span><br><span class=\"line\">spring.metrics.export.includes= # List of patterns for metric names to include.</span><br><span class=\"line\">spring.metrics.export.redis.key=keys.spring.metrics # Key for redis repository export (if active).</span><br><span class=\"line\">spring.metrics.export.redis.prefix=spring.metrics # Prefix for redis repository if active.</span><br><span class=\"line\">spring.metrics.export.send-latest= # Flag to switch off any available optimizations based on not exporting unchanged metric values.</span><br><span class=\"line\">spring.metrics.export.statsd.host= # Host of a statsd server to receive exported metrics.</span><br><span class=\"line\">spring.metrics.export.statsd.port=8125 # Port of a statsd server to receive exported metrics.</span><br><span class=\"line\">spring.metrics.export.statsd.prefix= # Prefix for statsd exported metrics.</span><br><span class=\"line\">spring.metrics.export.triggers.*= # Specific trigger properties per MetricWriter bean name.</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"># ----------------------------------------</span><br><span class=\"line\"># DEVTOOLS PROPERTIES</span><br><span class=\"line\"># ----------------------------------------</span><br><span class=\"line\"></span><br><span class=\"line\"># DEVTOOLS (DevToolsProperties)</span><br><span class=\"line\">spring.devtools.livereload.enabled=true # Enable a livereload.com compatible server.</span><br><span class=\"line\">spring.devtools.livereload.port=35729 # Server port.</span><br><span class=\"line\">spring.devtools.restart.additional-exclude= # Additional patterns that should be excluded from triggering a full restart.</span><br><span class=\"line\">spring.devtools.restart.additional-paths= # Additional paths to watch for changes.</span><br><span class=\"line\">spring.devtools.restart.enabled=true # Enable automatic restart.</span><br><span class=\"line\">spring.devtools.restart.exclude=META-INF/maven/**,META-INF/resources/**,resources/**,static/**,public/**,templates/**,**/*Test.class,**/*Tests.class,git.properties # Patterns that should be excluded from triggering a full restart.</span><br><span class=\"line\">spring.devtools.restart.poll-interval=1000 # Amount of time (in milliseconds) to wait between polling for classpath changes.</span><br><span class=\"line\">spring.devtools.restart.quiet-period=400 # Amount of quiet time (in milliseconds) required without any classpath changes before a restart is triggered.</span><br><span class=\"line\">spring.devtools.restart.trigger-file= # Name of a specific file that when changed will trigger the restart check. If not specified any classpath file change will trigger the restart.</span><br><span class=\"line\"></span><br><span class=\"line\"># REMOTE DEVTOOLS (RemoteDevToolsProperties)</span><br><span class=\"line\">spring.devtools.remote.context-path=/.~~spring-boot!~ # Context path used to handle the remote connection.</span><br><span class=\"line\">spring.devtools.remote.debug.enabled=true # Enable remote debug support.</span><br><span class=\"line\">spring.devtools.remote.debug.local-port=8000 # Local remote debug server port.</span><br><span class=\"line\">spring.devtools.remote.proxy.host= # The host of the proxy to use to connect to the remote application.</span><br><span class=\"line\">spring.devtools.remote.proxy.port= # The port of the proxy to use to connect to the remote application.</span><br><span class=\"line\">spring.devtools.remote.restart.enabled=true # Enable remote restart.</span><br><span class=\"line\">spring.devtools.remote.secret= # A shared secret required to establish a connection (required to enable remote support).</span><br><span class=\"line\">spring.devtools.remote.secret-header-name=X-AUTH-TOKEN # HTTP header used to transfer the shared secret.</span><br></pre></td></tr></table></figure>\n"}],"PostAsset":[],"PostCategory":[],"PostTag":[],"Tag":[]}}